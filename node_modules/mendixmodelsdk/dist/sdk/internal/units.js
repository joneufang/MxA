"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var elements_1 = require("./elements");
var structures_1 = require("./structures");
var instances_1 = require("./instances");
var properties_1 = require("./properties");
/**
 * Base class for implementations of {@link IAbstractUnit}.
 */
var AbstractUnit = /** @class */ (function (_super) {
    __extends(AbstractUnit, _super);
    function AbstractUnit(model, structureTypeName, id, isPartial, container) {
        var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
        /** @internal */
        _this._isLoading = false;
        /** @internal */
        _this._afterLoadCallbacks = [];
        return _this;
    }
    Object.defineProperty(AbstractUnit.prototype, "isLoaded", {
        /**
         * Checks whether all attributes are available at this instant;
         * if false, a load is required to access these properties.
         */
        get: function () {
            return !this._isPartial;
        },
        enumerable: true,
        configurable: true
    });
    /** @internal */
    AbstractUnit.prototype._markNotLoaded = function () {
        this._isLoading = false;
        this._isPartial = true;
    };
    /** @internal */
    AbstractUnit.prototype._markLoaded = function () {
        var _this = this;
        this._isLoading = false;
        this._isPartial = false;
        this._afterLoadCallbacks.splice(0).forEach(function (cb) { return cb(_this); });
    };
    /** @internal */
    AbstractUnit.prototype._markLoading = function () {
        if (this._isLoading || this.isLoaded) {
            throw new Error("Illegal state: cannot re-load a unit that's already loaded");
        }
        this._isLoading = true;
    };
    /** @internal */
    AbstractUnit.prototype._registerAfterLoadCallback = function (callback) {
        this._afterLoadCallbacks.push(callback);
    };
    /** @internal */
    AbstractUnit.prototype._updateWithJsonImpl = function (json) {
        _super.prototype._updateWithJsonImpl.call(this, json.contents);
    };
    /** @internal */
    AbstractUnit.prototype._dispose = function () {
        this._model._removeUnit(this);
        _super.prototype._dispose.call(this);
    };
    /**
     * Sends the create delta for this unit and all pending deltas.
     * @internal
     */
    AbstractUnit.prototype._handleCreateSelf = function () {
        var _this = this;
        this.unit._model._sendDelta({
            deltaType: "CREATE_UNIT",
            unitId: this.id,
            containerId: this.container.id,
            containmentName: this._containmentName,
            contentType: this.structureTypeName
        });
        this._state = "attached";
        this._pendingDeltasAfterCreate.forEach(function (delta) {
            delta.unitId = _this.unit.id;
            _this.unit._model._sendDelta(delta);
        });
    };
    AbstractUnit.prototype.deepCopyInto = function (newParent) {
        throw new Error("deepCopy for AbstractUnit not implemented.");
    };
    return AbstractUnit;
}(structures_1.Structure));
exports.AbstractUnit = AbstractUnit;
/**
 * Implementation of {@link IStructuralUnit}.
 */
var StructuralUnit = /** @class */ (function (_super) {
    __extends(StructuralUnit, _super);
    function StructuralUnit(model, structureTypeName, id, _ignoredIsPartial, container) {
        // _ignoredPartial argument is here, because structural units are always loaded completely,
        // but it is nice to keep the constructors for all units uniform so that the factories are simpler.
        return _super.call(this, model, structureTypeName, id, false, container) || this;
    }
    Object.defineProperty(StructuralUnit.prototype, "unit", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    StructuralUnit.prototype.deepCopyInto = function (newParent) {
        // MWE: note that this is techinically possible, but what should be the semantics?
        // also clone structural children? Then the need to be loaded first. See also
        // comments in StructuralChild properties.
        throw new Error("Structural units like folders and modules cannot be cloned");
    };
    StructuralUnit.prototype.delete = function () {
        throw new Error("Deleting structural units is not supported yet");
        // TODO Create a delta to delete a structural unit and remove it from the qualified name cache
        // this._model._qualifiedNameCache.removeStructureFromCache(this);
        // Send delta
        // this._dispose();
    };
    return StructuralUnit;
}(AbstractUnit));
exports.StructuralUnit = StructuralUnit;
/**
 * Implementation of {@link IModelUnit}.
 */
var ModelUnit = /** @class */ (function (_super) {
    __extends(ModelUnit, _super);
    function ModelUnit(model, structureTypeName, id, isPartial, container) {
        var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
        /** @internal */
        _this._isLoading = false;
        /* mimics multiple inheritance */
        /** @internal */
        _this._markNotLoaded = AbstractUnit.prototype._markNotLoaded;
        /** @internal */
        _this._markLoaded = AbstractUnit.prototype._markLoaded;
        /** @internal */
        _this._markLoading = AbstractUnit.prototype._markLoading;
        /** @internal */
        _this._registerAfterLoadCallback = AbstractUnit.prototype._registerAfterLoadCallback;
        /** @internal */
        // Note: flagged as unused by tslint but needs to be in (see failing unit tests otherwise)!
        // tslint:disable-next-line:no-unused-variable
        _this._afterLoadCallbacks = [];
        return _this;
    }
    /** @internal */
    ModelUnit.prototype._handleCreateSelf = function () {
        AbstractUnit.prototype._handleCreateSelf.call(this);
        for (var _i = 0, _a = this.allProperties(); _i < _a.length; _i++) {
            var property = _a[_i];
            if (property instanceof properties_1.PartProperty) {
                var childElement = property.get();
                if (childElement) {
                    childElement._sendCreateDelta(this, property.name);
                }
            }
            else if (property instanceof properties_1.PartListProperty) {
                var childElements = property.get();
                for (var index = 0; index < childElements.length; index++) {
                    childElements[index]._sendCreateDelta(this, property.name, index);
                }
            }
        }
    };
    /** @internal */
    ModelUnit.prototype._updateWithJsonImpl = function (json) {
        AbstractUnit.prototype._updateWithJsonImpl.call(this, json); // delegate
    };
    Object.defineProperty(ModelUnit.prototype, "unit", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelUnit.prototype, "isLoaded", {
        get: function () {
            return !this._isPartial;
        },
        enumerable: true,
        configurable: true
    });
    /** @internal */
    ModelUnit.prototype._dispose = function () {
        this._model._removeUnit(this);
        _super.prototype._dispose.call(this); // follow AbstractElement chain
    };
    /**
     * Given the type and name of an element, returns the element in this model unit
     * with the specified type and name if there is exactly one matching element, otherwise null.
     *
     * @internal
     */
    ModelUnit.prototype._resolveLocalName = function (elementTypeName, name) {
        if (!elementTypeName) {
            throw new Error("please provide an element type name");
        }
        var elementType = instances_1.instancehelpers.lookupClass(elementTypeName, this._model._allModelClasses());
        var matchingElements = [];
        this.traverse(function (abstractElement) {
            if (abstractElement instanceof elementType && abstractElement.name === name) {
                matchingElements.push(abstractElement);
            }
        });
        return matchingElements.length === 1 ? matchingElements[0] : null;
    };
    /**
     * Given an element id, returns the element in this model unit with that id, otherwise null.
     */
    ModelUnit.prototype.findElementById = function (id) {
        return this.traverseFind(function (abstractElement) {
            return abstractElement.id === id ? abstractElement : null;
        });
    };
    /**
     * Deletes this element from the model.
     */
    ModelUnit.prototype.delete = function () {
        if (this._isDeleted) {
            throw new Error("A deleted unit cannot be deleted");
        }
        var handle = this.container ? this.container._childHandle(this) : null;
        if (handle) {
            handle.delete();
        }
        else {
            this._deleteInternal();
        }
    };
    /** @internal */
    ModelUnit.prototype._deleteInternal = function () {
        // Make sure that the element does not delete twice.
        if (this._isDoingDelete) {
            return;
        }
        this._isDoingDelete = true;
        this._model._qualifiedNameCache.removeStructureFromCache(this);
        this._sendDeleteDelta();
        this._container = null;
        this.traverse(function (element) {
            element._state = "deleted";
        });
        this._dispose();
        this._isDoingDelete = false;
    };
    return ModelUnit;
}(elements_1.AbstractElement));
exports.ModelUnit = ModelUnit;
//# sourceMappingURL=units.js.map