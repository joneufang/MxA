"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var mobx_1 = require("mobx");
var by_name_reference_1 = require("./properties/by-name-reference");
var utils_1 = require("../utils");
var elements_1 = require("./elements");
var instances_1 = require("./instances");
/**
 * Manages a cached map [qualified name: string] -> list of structures,
 * with the possibility to retrieve (resolve) based on qualified name.
 *
 * Used to speed up resolution of by-(qualified-)name references.
 */
var QualifiedNameCache = /** @class */ (function () {
    function QualifiedNameCache(_model) {
        /** @internal */
        this._cache = mobx_1.observable.shallowMap();
        this._model = _model;
    }
    /**
     * @param structureTypeName        type name in syntax "MetaModelname$ElementName"
     * @param qualifiedName
     * @returns The element found, or `null` when no element is found.
     */
    QualifiedNameCache.prototype.resolve = function (structureTypeName, qualifiedName) {
        if (!qualifiedName) {
            return null;
        }
        var elements = this._cache.get(qualifiedName);
        if (!elements) {
            return null;
        }
        if (!structureTypeName) {
            throw new Error("please provide a structure type name");
        }
        var initializer = instances_1.instancehelpers.lookupClass(structureTypeName, this._model._allModelClasses());
        var result = lodash_1.find(elements, function (elem) { return elem instanceof initializer; });
        return result || null;
    };
    QualifiedNameCache.prototype.size = function () {
        var _this = this;
        // tslint:disable-next-line:no-unnecessary-type-assertion
        return this._cache.keys().map(function (key) { return _this._cache.get(key).length; }).reduce(function (prev, curr) { return prev + curr; }, 0);
    };
    QualifiedNameCache.prototype.keys = function () {
        return this._cache.keys();
    };
    /**
     * Updates the cache as far as it is affected by the addition or rename of this element.
     * Child entries are updated automatically as well.
     */
    QualifiedNameCache.prototype.addStructureToCache = function (structure) {
        var _this = this;
        structure.traversePublicParts(function (s) { return _this._addElementToCache(s); });
    };
    /**
     * Removes the structure and its children from the cache.
     */
    QualifiedNameCache.prototype.removeStructureFromCache = function (structure) {
        var _this = this;
        structure.traversePublicParts(function (s) { return _this._removeElementFromCache(s); });
    };
    /** @internal */
    QualifiedNameCache.prototype._addElementToCache = function (structure) {
        if (instances_1.instancehelpers.structureIsByNameReferrable(structure)) {
            var oldName = structure._registeredQualifiedName;
            var newName = structure._getQualifiedName();
            if (oldName === newName) {
                return;
            }
            structure._registeredQualifiedName = newName;
            if (oldName !== null) {
                var cachedElementsForOldName = this._cache.get(oldName);
                if (cachedElementsForOldName) {
                    utils_1.utils.removeFromArray(cachedElementsForOldName, structure);
                }
            }
            if (newName === null) {
                return;
            }
            this._getOrCreateEntry(newName).push(structure);
            if (oldName !== null) {
                this._updateByNameReferences(structure, oldName, newName);
            }
        }
    };
    /** @internal */
    QualifiedNameCache.prototype._removeElementFromCache = function (structure) {
        if (structure instanceof elements_1.AbstractElement && structure._registeredQualifiedName) {
            var cachedElements = this._cache.get(structure._registeredQualifiedName);
            if (cachedElements) {
                utils_1.utils.removeFromArray(cachedElements, structure);
            }
        }
    };
    /** @internal */
    QualifiedNameCache.prototype._updateByNameReferences = function (namedStructure, oldName, newName) {
        var targetType = namedStructure.structureTypeName;
        var root = namedStructure.model.root;
        root.traverse(function (structure) {
            structure.loadedProperties().forEach(function (prop) {
                if (prop instanceof by_name_reference_1.ByNameReferenceProperty && prop.targetType === targetType && prop.qualifiedName() === oldName) {
                    prop.updateQualifiedNameForRename(newName);
                }
                else if (prop instanceof by_name_reference_1.ByNameReferenceListProperty && prop.targetType === targetType) {
                    prop.updateQualifiedNamesForRename(prop.qualifiedNames().map(function (name) { return name === oldName ? newName : name; }));
                }
            });
        });
    };
    /** @internal */
    QualifiedNameCache.prototype._getOrCreateEntry = function (key) {
        var result = this._cache.get(key);
        if (!result) {
            result = mobx_1.observable.shallowArray();
            this._cache.set(key, result);
        }
        return result;
    };
    __decorate([
        mobx_1.action
    ], QualifiedNameCache.prototype, "addStructureToCache", null);
    __decorate([
        mobx_1.action
    ], QualifiedNameCache.prototype, "removeStructureFromCache", null);
    return QualifiedNameCache;
}());
exports.QualifiedNameCache = QualifiedNameCache;
//# sourceMappingURL=qualified-name-cache.js.map