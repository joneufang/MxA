import { common } from "../../common";
import { configuration } from "../config";
/**
 * The `transportation` module is responsible for performing requests on the (/a) Model API Server.
 */
/**
 * Implementations of this interface are capable of placing a request with the Model API Server over HTTP.
 * Default implementation: {@link RestTransportation}.
 */
export interface ITransportation {
    /**
     * Fire off a HTTP request, with specified method, url, data, and success and failure callbacks.
     */
    request<T>(options: IRequestOptions, success: common.ICallback<T>, failure: common.IErrorCallback): void;
    requestMultipartBinaryFileUpload<T>(options: IRequestMultipartBinaryFileUploadOptions, success: common.ICallback<T>, failure: common.IErrorCallback): void;
    requestFileDownload<T>(options: IRequestFileDownloadOptions, success: common.ICallback<T>, failure: common.IErrorCallback): void;
}
export declare type RequestMethod = "get" | "put" | "post" | "delete";
export interface IRequestOptions {
    method: RequestMethod;
    url: string;
    headers?: object;
    body?: object;
    longTimeout?: boolean;
}
export interface IRequestMultipartBinaryFileUploadOptions {
    method: RequestMethod;
    url: string;
    headers?: object;
    body?: object;
    fileParameterName: string;
    fileName: string | Blob;
}
export interface IRequestFileDownloadOptions {
    method: RequestMethod;
    url: string;
}
/**
 * Default implementation of {@link ITransportation} that communicates with the Model API Server over
 * HTTP using Request.
 */
export declare class RestTransportation implements ITransportation {
    private config;
    constructor(config: configuration.ISdkConfig);
    request<T>(opts: IRequestOptions, success: common.ICallback<T>, failure: common.IErrorCallback): void;
    requestMultipartBinaryFileUpload<T>(opts: IRequestMultipartBinaryFileUploadOptions, success: common.ICallback<T>, failure: common.IErrorCallback): void;
    requestFileDownload<T>(opts: IRequestFileDownloadOptions, success: common.ICallback<T>, failure: common.IErrorCallback): void;
    private sanitizedMethod(method);
    private url(urlEndpoint);
    private generateStandardOptions(method, url, acceptJson);
    private handleRequest<T>(options, success, failure);
}
