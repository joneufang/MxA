"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var abstract_property_1 = require("./abstract-property");
var references_1 = require("../references");
/**
 * Property value that references a (model) element by id.
 */
var ByIdReferenceProperty = /** @class */ (function (_super) {
    __extends(ByIdReferenceProperty, _super);
    function ByIdReferenceProperty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @internal */
    ByIdReferenceProperty.prototype.initialize = function (value) {
        var _this = this;
        var observableValue = new references_1.ByIdReference(this.parent);
        observableValue.intercept(function (change) { return _this.beforeChange(change); });
        return { observableValue: observableValue };
    };
    ByIdReferenceProperty.prototype.get = function () {
        this.assertReadable();
        return this.observableValue.get();
    };
    ByIdReferenceProperty.prototype.set = function (value) {
        this.assertWritable();
        if (!value && this.isRequired) {
            throw new Error("Cannot unset property that is a required by-id reference");
        }
        this.observableValue.set(value);
    };
    ByIdReferenceProperty.prototype.updateWithRawValue = function (value) {
        this.observableValue.updateWithRawValue(value);
    };
    ByIdReferenceProperty.prototype.resolveReference = function () {
        this.observableValue.resolve();
    };
    /** @internal */
    ByIdReferenceProperty.prototype.beforeChange = function (change) {
        if (this.shouldHandleChange()) {
            this.observableValue.assertValueHasSameUnit(change.newValue);
            this.parent._sendChangeDelta(this.name, change.newValue ? change.newValue.id : null);
        }
        return change;
    };
    ByIdReferenceProperty.prototype.updateElementContainer = function () {
        // We didn't know our container before, now we know it, let's check the referred value:
        this.observableValue.assertValueHasSameUnit(this.observableValue.get());
    };
    /** @internal */
    ByIdReferenceProperty.prototype._toJSON = function () {
        var value = this.get();
        return value ? value.id : null;
    };
    ByIdReferenceProperty.prototype.deepCopyInto = function (clone, idMap, unresolvedIdentifierFixers) {
        var _this = this;
        unresolvedIdentifierFixers.push(function (map) {
            var val = _this.get();
            if (!val) {
                // no target
                clone[_this.name] = val;
            }
            else {
                if (map.hasOwnProperty(val.id)) {
                    // The target was cloned
                    var cloneProperty = clone["__" + _this.name];
                    cloneProperty.observableValue.target.set(map[val.id]);
                }
                else {
                    // The target was outside the cloned range, not supported
                    throw new Error("By-id referred element " + val.structureTypeName + " with ID " + val.id + " was not included in the deepCopy");
                }
            }
        });
    };
    return ByIdReferenceProperty;
}(abstract_property_1.AbstractProperty));
exports.ByIdReferenceProperty = ByIdReferenceProperty;
//# sourceMappingURL=by-id-reference.js.map