"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var abstract_property_1 = require("./abstract-property");
var instances_1 = require("../instances");
/* for debugging:
function describe(element: Element) {
    if (!element) {
        return "null";
    }
    let description = `${element.structureTypeName}(id=${element.id}`;
    description += `, container: `;
    if (element.container) {
        const childHandle = element.container._childHandle(element);
        description += `{id=${element.container.id}, property=${childHandle ? childHandle.containingProperty.name : "ill-defined!"}}`;
    } else {
        description += "null";
    }
    description += ")";
    return description;
}
 */
/**
 * A property value that is a (model) element.
 * Will detect when children are moved, added, deleted and sends the appropriate deltas.
 */
var PartProperty = /** @class */ (function (_super) {
    __extends(PartProperty, _super);
    function PartProperty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @internal */
    PartProperty.prototype.initialize = function (value, hasDefaultValue) {
        this.hasDefaultValue = hasDefaultValue;
        return { observableValue: mobx_1.observable.shallowBox(value) };
    };
    PartProperty.prototype.get = function () {
        this.assertReadable();
        return this.observableValue.get();
    };
    PartProperty.prototype.set = function (newValue) {
        this.assertWritable();
        if (this.isRequired && !newValue) {
            throw new Error("Cannot unset required part property");
        }
        var oldValue = this.observableValue.get();
        if (newValue === oldValue) {
            return;
        }
        if (newValue && !(newValue._isNew || newValue._isDetached)) {
            throw new Error("Only new or detached elements can be assigned to a part property; did you forget to call detach()?");
        }
        if (oldValue) {
            oldValue._sendDeleteDelta();
            oldValue._deleteInternal();
        }
        if (newValue) {
            newValue.versionInfo.checkSameModelVersion(newValue.model, this.parent.model);
            newValue.versionInfo.checkStructureVersion(newValue, true);
            newValue._container = this.parent;
            if (newValue._isNew) {
                if (!this.parent._isNew) {
                    newValue._updateElementsContainer(this.parent.unit);
                    this.parent._model._qualifiedNameCache.addStructureToCache(newValue);
                }
                newValue._sendCreateDelta(this.parent, this.name);
            }
            else {
                if (this.parent._isNew) {
                    throw new Error("Only new elements can be assigned to a part property of a new structure; " +
                        "please add the parent structure to the model first.");
                }
                newValue._state = "attached";
                newValue._model._removeDetachedStructure(newValue);
                newValue._sendAttachDelta(this.parent, this.name);
            }
            newValue._processNameChange();
        }
        this.observableValue.set(newValue || null);
    };
    PartProperty.prototype.updateWithRawValue = function (value) {
        var newChild = instances_1.instancehelpers.modelElementJsonToInstance(this.parent._model, this.parent.unit, this.parent, value, this.parent._isPartial);
        // cleanup old value, we got a server side change that this child is no longer ours:
        var currentChild = this.observableValue.get();
        if (currentChild !== null && currentChild !== newChild) {
            currentChild._dispose();
        }
        this.observableValue.set(newChild);
    };
    PartProperty.prototype.updateElementContainer = function (unit) {
        var element = this.observableValue.get();
        if (element) {
            element._updateElementsContainer(unit);
        }
    };
    PartProperty.prototype.detachValue = function () {
        var element = this.observableValue.get();
        if (element) {
            element._sendDetachDelta();
            this.observableValue.set(null);
        }
    };
    PartProperty.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        var element = this.observableValue.get();
        if (element) {
            element._dispose();
        }
    };
    /** @internal */
    PartProperty.prototype._toJSON = function () {
        var value = this.get();
        return value ? value.toJSON() : null;
    };
    PartProperty.prototype.deepCopyInto = function (clone, idMap, unresolvedIdentifierFixers) {
        var val = this.get();
        if (val === null) {
            clone[this.name] = val;
        }
        else {
            val._deepCopyElementInto(clone, this.name, idMap, unresolvedIdentifierFixers);
        }
    };
    return PartProperty;
}(abstract_property_1.AbstractProperty));
exports.PartProperty = PartProperty;
/**
 * A property value that is a list of (model) elements.
 * Will detect when children are moved, added, deleted and sends the appropriate deltas.
 */
var PartListProperty = /** @class */ (function (_super) {
    __extends(PartListProperty, _super);
    function PartListProperty() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._detaching = false;
        return _this;
    }
    /*
     * Currently, only possible default value for listy properties is [],
     * so we don't have to store initialItems to be able to distinguish from default value.
     */
    /** @internal */
    PartListProperty.prototype.initialize = function (initialItems) {
        var _this = this;
        var observableValue = mobx_1.observable.shallowArray(initialItems || []);
        observableValue.intercept(function (change) { return _this.beforeChange(change); });
        var disposer = observableValue.observe(function (change) { return _this.onChange(change); });
        return { observableValue: observableValue, disposer: disposer };
    };
    PartListProperty.prototype.get = function () {
        this.assertReadable();
        return this.observableValue;
    };
    PartListProperty.prototype.updateWithRawValue = function (value) {
        var _this = this;
        var newChildren = value.map(function (e) {
            return instances_1.instancehelpers.modelElementJsonToInstance(_this.parent._model, _this.parent.unit, _this.parent, e, _this.parent._isPartial);
        });
        var oldChildren = this.observableValue;
        // dispose old children:
        for (var i = 0; i < oldChildren.length; i++) {
            if (newChildren.indexOf(oldChildren[i]) === -1) {
                oldChildren[i]._dispose();
            }
        }
        this.observableValue.replace(newChildren);
    };
    /** @internal */
    PartListProperty.prototype.beforeChange = function (change) {
        if (!this.shouldHandleChange()) {
            return change;
        }
        this.assertWritable();
        this.checkAddedItems(change);
        switch (change.type) {
            case "splice":
                for (var i = change.removedCount - 1; i >= 0; i--) {
                    this.sendChildRemoval(this.observableValue[change.index + i], change.added);
                }
                for (var i = 0; i < change.added.length; i++) {
                    this.sendChildAddition(change.added[i], change.index + i);
                }
                break;
            case "update":
                this.sendChildRemoval(this.observableValue[change.index], [change.newValue]);
                this.sendChildAddition(change.newValue, change.index);
                break;
        }
        return change;
    };
    /** @internal */
    PartListProperty.prototype.checkAddedItems = function (change) {
        var listAfterChange = change.object.slice();
        var newItems = [];
        if (change.type === "splice") {
            newItems.push.apply(newItems, change.added);
            listAfterChange.splice.apply(listAfterChange, [change.index, change.removedCount].concat(change.added));
        }
        else {
            newItems.push(change.newValue);
            listAfterChange[change.index] = change.newValue;
        }
        var _loop_1 = function (item) {
            this_1.checkAddedItem(item, change.object.indexOf(item) >= 0);
            if (listAfterChange.filter(function (other) { return other === item; }).length > 1) {
                throw new Error("Cannot add element '" + item.structureTypeName + "#" + item.id + "' more than once "
                    + ("to property '" + this_1.name + "' of '" + this_1.parent.structureTypeName + "#" + this_1.parent.id + "'"));
            }
        };
        var this_1 = this;
        for (var _i = 0, newItems_1 = newItems; _i < newItems_1.length; _i++) {
            var item = newItems_1[_i];
            _loop_1(item);
        }
    };
    /** @internal */
    PartListProperty.prototype.checkAddedItem = function (item, itemWasAlreadyInList) {
        if (!item) {
            throw new Error("Null values cannot be added to property '" + this.name + "' of '" + this.parent.structureTypeName + "#" + this.parent.id + "'");
        }
        if (!itemWasAlreadyInList && !(item._isNew || item._isDetached)) {
            throw new Error("Only new or detached elements can be added to a part list property; did you forget to call detach()?");
        }
        if (!item._isNew && this.parent._isNew) {
            throw new Error("Only new elements can be added to a part list property of a new structure; " +
                "please add the parent structure to the model first.");
        }
        item.versionInfo.checkSameModelVersion(item.model, this.parent.model);
        item.versionInfo.checkStructureVersion(item, true);
    };
    /** @internal */
    PartListProperty.prototype.sendChildAddition = function (item, index) {
        if (item._isNew) {
            item._sendCreateDelta(this.parent, this.name, index);
        }
        else {
            item._sendAttachDelta(this.parent, this.name, index);
        }
    };
    /** @internal */
    PartListProperty.prototype.sendChildRemoval = function (element, addedElements) {
        if (this._detaching || addedElements.indexOf(element) > -1) {
            element._sendDetachDelta();
        }
        else {
            element._sendDeleteDelta();
            element._deleteInternal();
        }
    };
    /** @internal */
    PartListProperty.prototype.onChange = function (change) {
        if (!this.shouldHandleChange()) {
            return;
        }
        // For change data details see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
        switch (change.type) {
            case "splice":
                for (var i = change.index; i < change.index + change.addedCount; i++) {
                    this.processChildAddition(i);
                }
                break;
            case "update":
                this.processChildAddition(change.index);
                break;
        }
    };
    /** @internal */
    PartListProperty.prototype.processChildAddition = function (index) {
        var item = this.observableValue[index];
        item._container = this.parent;
        if (item._isNew) {
            if (!this.parent._isNew) {
                item._updateElementsContainer(this.parent.unit);
                this.parent._model._qualifiedNameCache.addStructureToCache(item);
            }
            item._unit = this.parent.unit;
        }
        else {
            item._state = "attached";
            item._model._removeDetachedStructure(item);
        }
        item._processNameChange();
    };
    PartListProperty.prototype.updateElementContainer = function (unit) {
        this.observableValue.forEach(function (item) { return item._updateElementsContainer(unit); });
    };
    PartListProperty.prototype.removeChild = function (child) {
        var idx = this.observableValue.indexOf(child);
        if (idx >= 0) {
            this.observableValue.splice(idx, 1);
            return true;
        }
        return false;
    };
    PartListProperty.prototype.detachChild = function (child) {
        var idx = this.observableValue.indexOf(child);
        if (idx >= 0) {
            this._detaching = true;
            this.observableValue.splice(idx, 1);
            this._detaching = false;
        }
    };
    PartListProperty.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.observableValue.forEach(function (elem) { return elem._dispose(); });
    };
    /** @internal */
    PartListProperty.prototype._toJSON = function () {
        return this.get().map(function (item) { return item.toJSON(); });
    };
    PartListProperty.prototype.deepCopyInto = function (clone, idMap, unresolvedIdentifierFixers) {
        var _this = this;
        // throw away default / existing values in the list
        clone["__" + this.name].get().clear();
        this.get()
            .filter(function (child) { return !!child; })
            .forEach(function (child) { return child._deepCopyElementInto(clone, _this.name, idMap, unresolvedIdentifierFixers); });
    };
    return PartListProperty;
}(abstract_property_1.AbstractProperty));
exports.PartListProperty = PartListProperty;
//# sourceMappingURL=part.js.map