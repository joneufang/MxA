"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var abstract_property_1 = require("./abstract-property");
function checkElementIsByNameLocalReferrable(referencingElement, element, propertyName, operation) {
    if (!element) {
        return;
    }
    if (!element._isAttached) {
        throw new Error("Cannot " + operation + " an element that is not currently attached to the model to property '" + propertyName + "'. ");
    }
    if (element.unit !== referencingElement.unit) {
        throw new Error("Cannot refer to an element that is in a different model unit than the referencing element. ");
    }
    if (element["name"] === undefined) {
        throw new Error("Cannot " + operation + " an element of which the local name is not valid yet to property '" + propertyName + "'. " +
            "Make sure that the element has a valid name first.");
    }
}
/**
 * Property value that references a (model) element by a simple name, within the same model unit.
 */
var LocalByNameReferenceProperty = /** @class */ (function (_super) {
    __extends(LocalByNameReferenceProperty, _super);
    function LocalByNameReferenceProperty(declaredOn, parent, name, initialValue, _targetType) {
        var _this = _super.call(this, declaredOn, parent, name, initialValue, _targetType) || this;
        _this._targetType = _targetType;
        return _this;
    }
    /** @internal */
    LocalByNameReferenceProperty.prototype.initialize = function (value, _targetType) {
        var _this = this;
        var localName = value ? value.name : null;
        var observableValue = mobx_1.observable(localName);
        observableValue.intercept(function (change) { return _this.beforeChange(change); });
        return { observableValue: observableValue };
    };
    LocalByNameReferenceProperty.prototype.get = function () {
        this.assertReadable();
        var localName = this.localName();
        if (this.parent.unit) {
            return localName ? this.parent.unit._resolveLocalName(this._targetType, this.observableValue.get()) : null;
        }
        else {
            return null;
        }
    };
    LocalByNameReferenceProperty.prototype.set = function (newValue) {
        this.assertWritable();
        if (this.isRequired && !newValue) {
            throw new Error("Cannot unset required property '" + this.name + "' on instance of type '" + this.parent.structureTypeName + "'");
        }
        checkElementIsByNameLocalReferrable(this.parent, newValue, this.name, "assign");
        this.observableValue.set(newValue ? newValue.name : null);
    };
    LocalByNameReferenceProperty.prototype.updateWithRawValue = function (value) {
        this.observableValue.set(value === "" ? null : value);
    };
    /** @internal */
    LocalByNameReferenceProperty.prototype.beforeChange = function (change) {
        if (this.shouldHandleChange()) {
            this.parent._sendChangeDelta(this.name, change.newValue);
        }
        return change;
    };
    LocalByNameReferenceProperty.prototype.localName = function () {
        return this.observableValue.get();
    };
    Object.defineProperty(LocalByNameReferenceProperty.prototype, "targetType", {
        get: function () {
            return this._targetType;
        },
        enumerable: true,
        configurable: true
    });
    /** @internal */
    LocalByNameReferenceProperty.prototype._toJSON = function () {
        return this.localName();
    };
    LocalByNameReferenceProperty.prototype.deepCopyInto = function (clone, idMap, unresolvedIdentifierFixers) {
        // make sure we copy the refs, not the values, refs might be broken.
        clone["__" + this.name].updateWithRawValue(this.localName());
    };
    return LocalByNameReferenceProperty;
}(abstract_property_1.AbstractProperty));
exports.LocalByNameReferenceProperty = LocalByNameReferenceProperty;
//# sourceMappingURL=local-by-name-reference.js.map