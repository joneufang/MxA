"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var abstract_property_1 = require("./abstract-property");
var units_1 = require("../units");
/**
 * Note: structural child values are updated through AbstractModel._addUnitToStructuralParent.
 */
/**
 * Value of a property owned by a structural unit.
 */
var StructuralChildProperty = /** @class */ (function (_super) {
    __extends(StructuralChildProperty, _super);
    function StructuralChildProperty(declaredOn, parent, name, value, targetRefType) {
        return _super.call(this, declaredOn, parent, name, value) || this;
    }
    /** @internal */
    StructuralChildProperty.prototype.initialize = function (value) {
        return { observableValue: mobx_1.observable.shallowBox(value) };
    };
    StructuralChildProperty.prototype.get = function () {
        this.assertReadable();
        return this.observableValue.get();
    };
    StructuralChildProperty.prototype.set = function (value) {
        if (value) {
            throw new Error("Moving units is not supported yet");
        }
        else {
            if (this.isRequired) {
                throw new Error("Cannot unset required structural child property");
            }
            var unit = this.observableValue.get();
            if (unit instanceof units_1.ModelUnit) {
                unit._deleteInternal();
                this.observableValue.set(null);
            }
            else if (unit instanceof units_1.StructuralUnit) {
                throw new Error("Deleting structural units is not supported yet");
            }
        }
    };
    StructuralChildProperty.prototype.detachValue = function () {
        this.observableValue.set(null);
    };
    StructuralChildProperty.prototype.updateWithRawValue = function (value) {
        throw new Error("Illegal state: cannot update a structural child property");
    };
    StructuralChildProperty.prototype.deepCopyInto = function () {
        /*
        Structural children are not copied by default, that would require
        loading and cloning all children, which is probably not desirable.

        const child =  this.get();
        if (child) {
            child.deepCopyInto(clone);
        }*/
    };
    /** @internal */
    StructuralChildProperty.prototype._toJSON = function () {
        throw new Error("Cannot call _toJSON on a structural child property");
    };
    return StructuralChildProperty;
}(abstract_property_1.AbstractProperty));
exports.StructuralChildProperty = StructuralChildProperty;
/**
 * Property instance that wraps a list of structural units.
 * Structural child values are updated through AbstractModel._addUnitToStructuralParent.
 */
var StructuralChildListProperty = /** @class */ (function (_super) {
    __extends(StructuralChildListProperty, _super);
    function StructuralChildListProperty(declaredOn, parent, name, value, targetRefType) {
        return _super.call(this, declaredOn, parent, name, value) || this;
    }
    /** @internal */
    StructuralChildListProperty.prototype.initialize = function (values) {
        var _this = this;
        var observableValue = mobx_1.observable.shallowArray(values || []);
        observableValue.intercept(function (change) { return _this.beforeChange(change); });
        var disposer = observableValue.observe(function (change) { return _this.onChange(change); });
        return { observableValue: observableValue, disposer: disposer };
    };
    StructuralChildListProperty.prototype.get = function () {
        this.assertReadable();
        return this.observableValue;
    };
    StructuralChildListProperty.prototype.updateWithRawValue = function (value) {
        throw new Error("Illegal state: cannot update a structural child property");
    };
    /** @internal */
    StructuralChildListProperty.prototype.beforeChange = function (change) {
        if (!this.shouldHandleChange()) {
            return change;
        }
        this.assertWritable();
        return change;
    };
    /** @internal */
    StructuralChildListProperty.prototype.onChange = function (change) {
        var _this = this;
        if (!this.shouldHandleChange()) {
            return;
        }
        // For change data details see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
        switch (change.type) {
            case "splice":
                change.removed.forEach(function (unit) { return _this.processChildRemoval(unit); });
                for (var i = change.index; i < change.index + change.addedCount; i++) {
                    this.processChildAddition(i);
                }
                break;
            case "update":
                this.processChildRemoval(change.oldValue);
                this.processChildAddition(change.index);
                break;
        }
    };
    StructuralChildListProperty.prototype.removeChild = function (child) {
        var idx = this.observableValue.indexOf(child);
        if (idx >= 0) {
            this.observableValue.splice(idx, 1);
            return true;
        }
        return false;
    };
    StructuralChildListProperty.prototype.detachChild = function (child) {
        var idx = this.observableValue.indexOf(child);
        if (idx >= 0) {
            // TODO Setup detach for model unit like with elements
            // this._detaching = true;
            this.observableValue.splice(idx, 1);
            // this._detaching = false;
        }
    };
    StructuralChildListProperty.prototype.processChildRemoval = function (unit) {
        if (unit instanceof units_1.StructuralUnit) {
            throw new Error("Deleting structural units is not supported yet");
        }
        if (this.observableValue.indexOf(unit) === -1) {
            unit._container = null;
            unit.delete();
        }
    };
    StructuralChildListProperty.prototype.processChildAddition = function (index) {
        throw new Error("Moving units is not supported yet");
    };
    StructuralChildListProperty.prototype.deepCopyInto = function () {
        /*
        Structural children are not copied by default, that would require
        loading and cloning all children, which is probably not desirable.

        this.get().forEach(child => child.deepCopyInto(clone));
        */
    };
    /** @internal */
    StructuralChildListProperty.prototype._toJSON = function () {
        throw new Error("Cannot call _toJSON on a structural child property");
    };
    return StructuralChildListProperty;
}(abstract_property_1.AbstractProperty));
exports.StructuralChildListProperty = StructuralChildListProperty;
//# sourceMappingURL=structural.js.map