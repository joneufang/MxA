"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var abstract_property_1 = require("./abstract-property");
var utils_1 = require("../../utils");
/**
 * All primitive types.
 * Note: must match exactly with MxPrimitiveTypeEnum!
 */
var PrimitiveTypeEnum;
(function (PrimitiveTypeEnum) {
    PrimitiveTypeEnum[PrimitiveTypeEnum["Integer"] = 0] = "Integer";
    PrimitiveTypeEnum[PrimitiveTypeEnum["String"] = 1] = "String";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Boolean"] = 2] = "Boolean";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Double"] = 3] = "Double";
    PrimitiveTypeEnum[PrimitiveTypeEnum["DateTime"] = 4] = "DateTime";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Guid"] = 5] = "Guid";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Point"] = 6] = "Point";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Size"] = 7] = "Size";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Color"] = 8] = "Color";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Blob"] = 9] = "Blob";
})(PrimitiveTypeEnum = exports.PrimitiveTypeEnum || (exports.PrimitiveTypeEnum = {}));
/*
 * Primitive-typed property value
 */
var PrimitiveProperty = /** @class */ (function (_super) {
    __extends(PrimitiveProperty, _super);
    function PrimitiveProperty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @internal */
    PrimitiveProperty.prototype.initialize = function (defaultValue, primitiveType) {
        var _this = this;
        this.defaultValue = defaultValue;
        this.primitiveType = primitiveType;
        var observableValue = mobx_1.observable.shallowBox(defaultValue);
        observableValue.intercept(function (change) { return _this.beforeChange(change); });
        var disposer = observableValue.observe(function (change) { return _this.onChange(change); });
        return { observableValue: observableValue, disposer: disposer };
    };
    PrimitiveProperty.prototype.get = function () {
        this.assertReadable();
        return this.observableValue.get();
    };
    PrimitiveProperty.prototype.set = function (newValue) {
        this.assertWritable();
        this.observableValue.set(newValue);
    };
    PrimitiveProperty.prototype.updateWithRawValue = function (value) {
        this.observableValue.set(value);
    };
    PrimitiveProperty.prototype.getRawValue = function (value) {
        return value;
    };
    PrimitiveProperty.prototype.beforeChange = function (change) {
        utils_1.utils.assertNotNull(change.newValue, this.name);
        if (this.shouldHandleChange()) {
            this.parent._sendChangeDelta(this.name, this.getRawValue(change.newValue));
        }
        return change;
    };
    /** @internal */
    PrimitiveProperty.prototype.onChange = function (change) {
        if (this.shouldHandleChange()) {
            if (this.name === "name" && this.primitiveType === PrimitiveTypeEnum.String) {
                this.parent._processNameChange();
                this.parent._processLocalNameChange(change.oldValue);
            }
        }
    };
    PrimitiveProperty.prototype.markCurrentValueAsDefault = function () {
        this.defaultValue = this.get();
    };
    /** @internal */
    PrimitiveProperty.prototype._toJSON = function () {
        return this.get();
    };
    PrimitiveProperty.prototype.deepCopyInto = function (clone) {
        if (this.primitiveType !== PrimitiveTypeEnum.Guid) {
            // Guids should never be cloned
            clone[this.name] = this.get();
        }
    };
    return PrimitiveProperty;
}(abstract_property_1.AbstractProperty));
exports.PrimitiveProperty = PrimitiveProperty;
/**
 * Primitive-typed property values list.
 */
var PrimitiveListProperty = /** @class */ (function (_super) {
    __extends(PrimitiveListProperty, _super);
    function PrimitiveListProperty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /*
    * Currently, only possible default value for listy properties is [],
    * so we don't have to store initialItems to be able to distinguish from default value.
    *
    * @internal
    */
    PrimitiveListProperty.prototype.initialize = function (initialItems, primitiveType) {
        var _this = this;
        this.primitiveType = primitiveType;
        var observableValue = mobx_1.observable.shallowArray(initialItems || []);
        observableValue.intercept(function (change) { return _this.beforeChange(change); });
        return { observableValue: observableValue };
    };
    PrimitiveListProperty.prototype.get = function () {
        this.assertReadable();
        return this.observableValue;
    };
    PrimitiveListProperty.prototype.updateWithRawValue = function (value) {
        this.observableValue.replace(value);
    };
    /** @internal */
    PrimitiveListProperty.prototype.beforeChange = function (change) {
        if (!this.shouldHandleChange()) {
            return change;
        }
        this.assertWritable();
        sendListChangeDeltas(this, change);
        return change;
    };
    /** @internal */
    PrimitiveListProperty.prototype.toRawChangeValue = function (value) {
        return value; // primitives can be sent verbatim to the server
    };
    /** @internal */
    PrimitiveListProperty.prototype._toJSON = function () {
        return this.get().slice();
    };
    PrimitiveListProperty.prototype.deepCopyInto = function (clone) {
        if (this.primitiveType !== PrimitiveTypeEnum.Guid) {
            // Guids should never be cloned
            clone[this.name].replace(this.get().slice());
        }
    };
    return PrimitiveListProperty;
}(abstract_property_1.AbstractProperty));
exports.PrimitiveListProperty = PrimitiveListProperty;
/**
 * A property value that is an enum literal.
 */
var EnumProperty = /** @class */ (function (_super) {
    __extends(EnumProperty, _super);
    function EnumProperty(declaredOn, parent, name, initialValue, enumType) {
        var _this = _super.call(this, declaredOn, parent, name, initialValue) || this;
        _this.initialValue = initialValue;
        _this.enumType = enumType;
        return _this;
    }
    EnumProperty.prototype.updateWithRawValue = function (value) {
        this.observableValue.set(this.enumType[value] || this.initialValue);
    };
    EnumProperty.prototype.getRawValue = function (value) {
        return value.name;
    };
    EnumProperty.prototype.set = function (value) {
        if (value) {
            value.checkEnumVersion(this.parent.model.metaModelVersion, true);
        }
        _super.prototype.set.call(this, value);
    };
    /** @internal */
    EnumProperty.prototype.onChange = function (change) {
        // Do not execute the parent behavior.
    };
    /** @internal */
    EnumProperty.prototype._toJSON = function () {
        return this.get().name;
    };
    return EnumProperty;
}(PrimitiveProperty));
exports.EnumProperty = EnumProperty;
/**
 * A property value that is a list of enum literals.
 */
var EnumListProperty = /** @class */ (function (_super) {
    __extends(EnumListProperty, _super);
    function EnumListProperty(declaredOn, parent, name, initialValue, enumType) {
        var _this = _super.call(this, declaredOn, parent, name, initialValue) || this;
        _this.initialValue = initialValue;
        _this.enumType = enumType;
        return _this;
    }
    EnumListProperty.prototype.updateWithRawValue = function (value) {
        var _this = this;
        this.observableValue.replace(value
            ? value.map(function (e) { return _this.enumType[e] || _this.initialValue; }) // XXX: `this.initialValue` is a list, not just one enumeration value!
            : []);
    };
    /** @internal */
    EnumListProperty.prototype.toRawChangeValue = function (value) {
        if (value) {
            value.checkEnumVersion(this.parent.model.metaModelVersion, true);
            return value.toString(); // send enum string representation to the server
        }
        return null;
    };
    /** @internal */
    EnumListProperty.prototype._toJSON = function () {
        return this.get().map(function (item) { return item.name; });
    };
    return EnumListProperty;
}(PrimitiveListProperty));
exports.EnumListProperty = EnumListProperty;
function sendListChangeDeltas(property, change) {
    switch (change.type) {
        case "update":
            utils_1.utils.assertNotNull(change.object[change.index], property.name, true);
            property.parent._sendChangeDelta(property.name, property.toRawChangeValue(change.newValue), "CHANGE", change.index);
            break;
        case "splice":
            change.added.forEach(function (item) { return utils_1.utils.assertNotNull(item, property.name, true); });
            for (var i = change.removedCount - 1; i >= 0; i--) {
                property.parent._sendChangeDelta(property.name, null, "REMOVE", change.index + i);
            }
            for (var i = 0; i < change.added.length; i++) {
                property.parent._sendChangeDelta(property.name, property.toRawChangeValue(change.added[i]), "ADD", change.index + i);
            }
            break;
    }
}
exports.sendListChangeDeltas = sendListChangeDeltas;
//# sourceMappingURL=primitives.js.map