"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var units_1 = require("../units");
var properties_1 = require("../properties");
function findProperty(structure, propertyName) {
    var property = structure["__" + propertyName];
    if (!property) {
        throw new Error("Cannot find property '" + propertyName + "' in element with ID '" + structure.id + "'");
    }
    return property;
}
exports.findProperty = findProperty;
function findElement(model, unit, elementId) {
    var element = unit.findElementById(elementId) || findElementInStructures(model.detachedStructures, elementId);
    if (!element) {
        throw new Error("Cannot find element with ID '" + elementId + "' in unit with ID '" + unit.id + "'");
    }
    return element;
}
exports.findElement = findElement;
function findElementInStructures(structures, elementId) {
    var findElementInStructure = function (structure) { return structure.traverseFind(function (e) { return e.id === elementId ? e : null; }); };
    for (var _i = 0, structures_1 = structures; _i < structures_1.length; _i++) {
        var structure = structures_1[_i];
        var element = findElementInStructure(structure);
        if (element) {
            return element;
        }
    }
    return null;
}
function asModelUnit(unit) {
    if (!(unit instanceof units_1.ModelUnit)) {
        throw new Error("Cannot perform delta on non model unit");
    }
    return unit;
}
exports.asModelUnit = asModelUnit;
function updateStructure(structure, updateAction) {
    var oldIsUpdating = structure._isUpdating;
    structure._isUpdating = true;
    try {
        updateAction();
    }
    finally {
        structure._isUpdating = oldIsUpdating;
    }
}
exports.updateStructure = updateStructure;
function getUnitForDelta(model, delta) {
    if (!delta) {
        throw new Error("Invalid delta");
    }
    var unit = model._units[delta.unitId];
    if (!unit) {
        throw new Error("Cannot find unit with ID '" + delta.unitId + "'");
    }
    if (!unit.isLoaded) {
        throw new Error("Unit is not loaded");
    }
    return unit;
}
exports.getUnitForDelta = getUnitForDelta;
function isListProperty(property) {
    return property instanceof properties_1.PrimitiveListProperty
        || property instanceof properties_1.EnumListProperty
        || property instanceof properties_1.ByNameReferenceListProperty
        || property instanceof properties_1.PartListProperty;
}
exports.isListProperty = isListProperty;
function checkInsertionIndex(index, property) {
    var propertyValue = property.get();
    if (index < 0 || index > propertyValue.length) {
        throw new Error("Index " + index + " is out of bounds for '" + property.name + "', which has a length of " + propertyValue.length);
    }
}
exports.checkInsertionIndex = checkInsertionIndex;
function checkUpdateOrRemovalIndex(index, property) {
    var propertyValue = property.get();
    if (index < 0 || index >= propertyValue.length) {
        throw new Error("Index " + index + " is out of bounds for '" + property.name + "', which has a length of " + propertyValue.length);
    }
}
exports.checkUpdateOrRemovalIndex = checkUpdateOrRemovalIndex;
function checkMutator(mutator, property) {
    if (!mutator) {
        throw new Error("Invalid mutator");
    }
    switch (mutator.mutatorType) {
        case "CHANGE":
            if (isListProperty(property)) {
                if (!util_1.isNumber(mutator.updateIndex)) {
                    throw new Error("Invalid mutator.updateIndex '" + mutator.updateIndex + "' for property '" + property.name + "'");
                }
                checkUpdateOrRemovalIndex(mutator.updateIndex, property);
                if (mutator.value === null) {
                    throw new Error("Cannot push value 'null' to lists");
                }
            }
            break;
        case "ADD":
            if (!isListProperty(property)) {
                throw new Error("Mutator type '" + mutator.mutatorType + "' is only supported for lists");
            }
            if (util_1.isNumber(mutator.insertionIndex)) {
                checkInsertionIndex(mutator.insertionIndex, property);
            }
            if (mutator.value === null) {
                throw new Error("Cannot push value 'null' to lists");
            }
            break;
        case "REMOVE":
            if (!isListProperty(property)) {
                throw new Error("Mutator type '" + mutator.mutatorType + "' is only supported for lists");
            }
            if (!util_1.isNumber(mutator.removalIndex)) {
                throw new Error("Invalid mutator.removalIndex '" + mutator.removalIndex + "' for property '" + property.name + "'");
            }
            checkUpdateOrRemovalIndex(mutator.removalIndex, property);
            break;
        default:
            throw new Error("Invalid mutatorType: " + JSON.stringify(mutator));
    }
}
exports.checkMutator = checkMutator;
function getContainmentInfo(unit, model, elementId) {
    var element = findElement(model, unit, elementId);
    if (!element.container) {
        throw new Error("The container of an element cannot be undefined or null");
    }
    var handle = element.container._childHandle(element);
    var property = handle.containingProperty;
    var index;
    if (isListProperty(property)) {
        index = property.get().indexOf(element);
    }
    return {
        element: element,
        parentId: property.parent.id,
        parentPropertyName: property.name,
        index: index
    };
}
exports.getContainmentInfo = getContainmentInfo;
function rawList(property) {
    return property._toJSON();
}
exports.rawList = rawList;
function rawValue(property) {
    return property._toJSON();
}
exports.rawValue = rawValue;
function removeUselessDeltas(deltas) {
    var deleteIndexMap = {};
    deltas.forEach(function (delta, i) {
        if (delta.deltaType === "DELETE_ELEMENT") {
            deleteIndexMap[delta.elementId] = i;
        }
    });
    var filteredDeltas = [];
    for (var i = 0; i < deltas.length; i++) {
        var delta = deltas[i];
        if (delta.deltaType === "UPDATE_PROPERTY_VALUE") {
            var lastDeleteIndex = deleteIndexMap[delta.elementId];
            if (lastDeleteIndex && lastDeleteIndex > i) {
                continue;
            }
        }
        filteredDeltas.push(delta);
    }
    return filteredDeltas;
}
exports.removeUselessDeltas = removeUselessDeltas;
//# sourceMappingURL=delta-utils.js.map