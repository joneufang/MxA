"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var units_1 = require("../units");
var deltaUtils = require("./delta-utils");
var DeltaReverser = /** @class */ (function () {
    function DeltaReverser(model) {
        this.model = model;
    }
    DeltaReverser.prototype.reverse = function (delta) {
        var unit = deltaUtils.getUnitForDelta(this.model, delta);
        switch (delta.deltaType) {
            case "UPDATE_PROPERTY_VALUE":
                return this.reverseUpdatePropertyValueDelta(delta, deltaUtils.asModelUnit(unit));
            case "CREATE_ELEMENT_TREE":
                return this.reverseCreateElementTreeDelta(delta);
            case "DELETE_ELEMENT":
                return this.reverseDeleteElementDelta(delta, deltaUtils.asModelUnit(unit));
            case "ATTACH_ELEMENT":
                return this.reverseAttachElementDelta(delta);
            case "DETACH_ELEMENT":
                return this.reverseDetachElementDelta(delta, deltaUtils.asModelUnit(unit));
            default:
                throw new Error("Delta type " + delta.deltaType + " is not supported.");
        }
    };
    DeltaReverser.prototype.reverseUpdatePropertyValueDelta = function (delta, unit) {
        var structure = (unit instanceof units_1.StructuralUnit) ?
            unit :
            deltaUtils.findElement(this.model, deltaUtils.asModelUnit(unit), delta.elementId);
        var property = deltaUtils.findProperty(structure, delta.propertyName);
        var reversedMutator;
        var mutator = delta.mutator;
        deltaUtils.checkMutator(delta.mutator, property);
        switch (mutator.mutatorType) {
            case "CHANGE":
                if (deltaUtils.isListProperty(property)) {
                    reversedMutator = {
                        mutatorType: "CHANGE",
                        value: deltaUtils.rawList(property)[mutator.updateIndex],
                        updateIndex: mutator.updateIndex
                    };
                }
                else {
                    reversedMutator = {
                        mutatorType: "CHANGE",
                        value: deltaUtils.rawValue(property)
                    };
                }
                break;
            case "ADD":
                reversedMutator = {
                    mutatorType: "REMOVE",
                    removalIndex: mutator.insertionIndex ? mutator.insertionIndex : deltaUtils.rawList(property).length
                };
                break;
            case "REMOVE":
                reversedMutator = {
                    mutatorType: "ADD",
                    value: deltaUtils.rawList(property)[mutator.removalIndex],
                    insertionIndex: mutator.removalIndex
                };
                break;
            default:
                throw new Error("Invalid mutatorType: " + JSON.stringify(mutator));
        }
        return __assign({}, delta, { mutator: reversedMutator });
    };
    DeltaReverser.prototype.reverseCreateElementTreeDelta = function (delta) {
        return {
            deltaType: "DELETE_ELEMENT",
            unitId: delta.unitId,
            elementId: delta.elementTree.$ID
        };
    };
    DeltaReverser.prototype.reverseDeleteElementDelta = function (delta, unit) {
        var containmentInfo = deltaUtils.getContainmentInfo(unit, this.model, delta.elementId);
        return {
            deltaType: "CREATE_ELEMENT_TREE",
            unitId: delta.unitId,
            additionIndex: containmentInfo.index,
            parentId: containmentInfo.parentId,
            parentPropertyName: containmentInfo.parentPropertyName,
            elementTree: containmentInfo.element.toJSON()
        };
    };
    DeltaReverser.prototype.reverseAttachElementDelta = function (delta) {
        return {
            deltaType: "DETACH_ELEMENT",
            unitId: delta.unitId,
            elementId: delta.elementId
        };
    };
    DeltaReverser.prototype.reverseDetachElementDelta = function (delta, unit) {
        var containmentInfo = deltaUtils.getContainmentInfo(unit, this.model, delta.elementId);
        return {
            deltaType: "ATTACH_ELEMENT",
            unitId: delta.unitId,
            elementId: delta.elementId,
            newIndex: containmentInfo.index,
            newParentId: containmentInfo.parentId,
            newParentPropertyName: containmentInfo.parentPropertyName
        };
    };
    return DeltaReverser;
}());
exports.DeltaReverser = DeltaReverser;
//# sourceMappingURL=delta-reverser.js.map