"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash = require("lodash");
var internal = require("./sdk/internal");
var config_1 = require("./sdk/config");
var abstract_model_1 = require("./sdk/internal/abstract-model");
var utils_1 = require("./sdk/utils");
/**
 * Client class of the Mendix Model SDK.
 * By instantiating this class with appropriate configuration, you can create and read working copies.
 */
var ModelSdkClientImpl = /** @class */ (function () {
    function ModelSdkClientImpl(connectionConfig, modelConstructor) {
        this.connectionConfig = connectionConfig;
        this.modelConstructor = modelConstructor;
        var defaultConfig = {
            endPoint: "https://model.api.mendix.com"
        };
        var sdkConfig = lodash.extend({}, defaultConfig, connectionConfig);
        this.client = sdkConfig.client ||
            new internal.ModelServerClientImpl(sdkConfig.transportation || new internal.RestTransportation(sdkConfig));
    }
    /**
     * Create a new working copy on the model server.
     */
    ModelSdkClientImpl.prototype.createWorkingCopy = function (workingCopyParameters, callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.createWorkingCopy(workingCopyParameters, callback, errorCallback);
    };
    /**
     * Create a new working copy on the model server, and reads it for immediate editing.
     */
    ModelSdkClientImpl.prototype.createAndOpenWorkingCopy = function (workingCopyParameters, callback, errorCallback) {
        var _this = this;
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.createWorkingCopy(workingCopyParameters, function (workingCopyInfo) {
            _this.openWorkingCopy(workingCopyInfo.id, callback, errorCallback);
        }, errorCallback);
    };
    /**
     * Reads a working copy on the model server so it can be edited.
     */
    ModelSdkClientImpl.prototype.openWorkingCopy = function (workingCopyId, callback, errorCallback) {
        config_1.configuration.checkWorkingCopyId(workingCopyId);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        utils_1.utils.resetAlreadyPrintedWarningsState();
        abstract_model_1.AbstractModel.read(this.client, workingCopyId, this.connectionConfig, new this.modelConstructor(this.client, errorCallback, this.connectionConfig), callback, errorCallback);
    };
    /**
     * Gets meta data of a working copy
     */
    ModelSdkClientImpl.prototype.loadWorkingCopyMetaData = function (workingCopyId, callback, errorCallback) {
        config_1.configuration.checkWorkingCopyId(workingCopyId);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.loadWorkingCopyMetaData(workingCopyId, callback, errorCallback);
    };
    /**
     * Deletes this working copy from the server, and the (SDK) client.
     */
    ModelSdkClientImpl.prototype.deleteWorkingCopy = function (workingCopyId, callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.deleteWorkingCopy(workingCopyId, callback, errorCallback);
    };
    /**
     * Grants access to the member specified to his/her OpenID on this working copy.
     */
    ModelSdkClientImpl.prototype.grantAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        config_1.configuration.assertBackendAccess(this.connectionConfig);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.grantAccess(workingCopyId, memberOpenId, callback, errorCallback);
    };
    /**
     * Revokes access of the member specified to his/her OpenID on this working copy.
     */
    ModelSdkClientImpl.prototype.revokeAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        config_1.configuration.assertBackendAccess(this.connectionConfig);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.revokeAccess(workingCopyId, memberOpenId, callback, errorCallback);
    };
    /**
     * Grants access to the member specified to his/her OpenID to the default working copy of this project.
     */
    ModelSdkClientImpl.prototype.grantAccessByProject = function (projectId, memberOpenId, callback, errorCallback) {
        config_1.configuration.assertBackendAccess(this.connectionConfig);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.grantAccessByProject(projectId, memberOpenId, callback, errorCallback);
    };
    /**
     * Revokes access of the member specified to his/her OpenID to the default working copy of this project.
     */
    ModelSdkClientImpl.prototype.revokeAccessByProject = function (projectId, memberOpenId, callback, errorCallback) {
        config_1.configuration.assertBackendAccess(this.connectionConfig);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.revokeAccessByProject(projectId, memberOpenId, callback, errorCallback);
    };
    /**
     * Returns whether the member specified to his/her OpenID has (been granted) access to this working copy.
     */
    ModelSdkClientImpl.prototype.checkAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        config_1.configuration.assertBackendAccess(this.connectionConfig);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.checkAccess(workingCopyId, memberOpenId, callback, errorCallback);
    };
    /**
     * Exports this working copy as MPK.
     */
    ModelSdkClientImpl.prototype.exportMpk = function (workingCopyId, outFilePath, callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.exportMpk(workingCopyId, outFilePath, callback, errorCallback);
    };
    /**
     * Exports this working copy as MPK.
     */
    ModelSdkClientImpl.prototype.exportModuleMpk = function (workingCopyId, moduleId, outFilePath, callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.exportModuleMpk(workingCopyId, moduleId, outFilePath, callback, errorCallback);
    };
    /**
     * Start deploy this working copy and create new job.
     */
    ModelSdkClientImpl.prototype.startAppUpdate = function (workingCopyId, callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.startAppUpdate(workingCopyId, callback, errorCallback);
    };
    /**
     * Start deploy this working copy and create new job.
     */
    ModelSdkClientImpl.prototype.getAppUpdateStatus = function (workingCopyId, jobId, callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.getAppUpdateStatus(workingCopyId, jobId, callback, errorCallback);
    };
    ModelSdkClientImpl.prototype.getAppEnvironmentStatus = function (workingCopyId, callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.getAppEnvironmentStatus(workingCopyId, callback, errorCallback);
    };
    /**
     * Retrieves an array of all working copies you are a member of.
     */
    ModelSdkClientImpl.prototype.getMyWorkingCopies = function (callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.getMyWorkingCopies(callback, errorCallback);
    };
    /**
     * Retrieves the working copy id that the given project ID maps to.
     */
    ModelSdkClientImpl.prototype.getWorkingCopyByProject = function (projectId, callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.getWorkingCopyByProject(projectId, callback, errorCallback);
    };
    /**
     * Update the project-to-working copy mapping with the given data.
     */
    ModelSdkClientImpl.prototype.updateWorkingCopyByProject = function (projectId, workingCopyId, callback, errorCallback) {
        config_1.configuration.assertBackendAccess(this.connectionConfig);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.updateWorkingCopyByProject(projectId, workingCopyId, callback, errorCallback);
    };
    /**
     * Deletes the project-to-working copy mapping for given project ID.
     */
    ModelSdkClientImpl.prototype.deleteWorkingCopyByProject = function (projectId, callback, errorCallback) {
        config_1.configuration.assertBackendAccess(this.connectionConfig);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.deleteWorkingCopyByProject(projectId, callback, errorCallback);
    };
    ModelSdkClientImpl.prototype.lockWorkingCopy = function (workingCopyId, lockOptionsOrCallback, callbackOrErrorCallback, errorCallback) {
        var callback;
        var lockOptions;
        if (typeof lockOptionsOrCallback === "function") {
            callback = lockOptionsOrCallback;
            errorCallback = callbackOrErrorCallback;
            lockOptions = { lockType: "bidi" };
        }
        else if (typeof lockOptionsOrCallback === "string") {
            lockOptions = { lockType: lockOptionsOrCallback };
            callback = callbackOrErrorCallback;
        }
        else {
            lockOptions = lockOptionsOrCallback;
            callback = callbackOrErrorCallback;
        }
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.lockWorkingCopy(workingCopyId, lockOptions, callback, errorCallback);
    };
    /**
     * Unlock the working copy (will be unlocked for the currently authenticated openid, will fail if it's locked by another openid)
     */
    ModelSdkClientImpl.prototype.unlockWorkingCopy = function (workingCopyId, callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.unlockWorkingCopy(workingCopyId, callback, errorCallback);
    };
    return ModelSdkClientImpl;
}());
exports.ModelSdkClientImpl = ModelSdkClientImpl;
//# sourceMappingURL=model-sdk-client.js.map