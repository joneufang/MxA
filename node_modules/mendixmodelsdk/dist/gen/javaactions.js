"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require("./projects");
var javaactions;
(function (javaactions) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `JavaActions`.
     */
    /**
     * In version 6.7.0: introduced
     */
    var ParameterType = /** @class */ (function (_super) {
        __extends(ParameterType, _super);
        function ParameterType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ParameterType() cannot be invoked directly, please use 'model.javaactions.createParameterType()'");
            }
            return _this;
        }
        Object.defineProperty(ParameterType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        ParameterType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ParameterType.structureTypeName = "JavaActions$ParameterType";
        ParameterType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.7.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ParameterType;
    }(internal.Element));
    javaactions.ParameterType = ParameterType;
    /**
     * In version 6.7.0: introduced
     */
    var BasicParameterType = /** @class */ (function (_super) {
        __extends(BasicParameterType, _super);
        function BasicParameterType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__type = new internal.PartProperty(BasicParameterType, _this, "type", null, true);
            if (arguments.length < 4) {
                throw new Error("new BasicParameterType() cannot be invoked directly, please use 'model.javaactions.createBasicParameterType()'");
            }
            return _this;
        }
        Object.defineProperty(BasicParameterType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicParameterType.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BasicParameterType instance in the SDK and on the server.
         * The new BasicParameterType will be automatically stored in the 'parameterType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        BasicParameterType.createIn = function (container) {
            internal.createInVersionCheck(container.model, BasicParameterType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, BasicParameterType, "parameterType", false);
        };
        /**
         * Creates and returns a new BasicParameterType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BasicParameterType.create = function (model) {
            return internal.instancehelpers.createElement(model, BasicParameterType);
        };
        /** @internal */
        BasicParameterType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = StringType.create(this.model);
        };
        BasicParameterType.structureTypeName = "JavaActions$BasicParameterType";
        BasicParameterType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.7.0",
            "properties": {
                "type": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BasicParameterType;
    }(ParameterType));
    javaactions.BasicParameterType = BasicParameterType;
    /**
     * In version 6.6.0: introduced
     */
    var Type = /** @class */ (function (_super) {
        __extends(Type, _super);
        function Type(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Type() cannot be invoked directly, please use 'model.javaactions.createType()'");
            }
            return _this;
        }
        Object.defineProperty(Type.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Type.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Type.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Type.prototype, "containerAsListType", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListType); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        Type.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Type.structureTypeName = "JavaActions$Type";
        Type.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return Type;
    }(internal.Element));
    javaactions.Type = Type;
    /**
     * In version 6.6.0: introduced
     */
    var PrimitiveType = /** @class */ (function (_super) {
        __extends(PrimitiveType, _super);
        function PrimitiveType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new PrimitiveType() cannot be invoked directly, please use 'model.javaactions.createPrimitiveType()'");
            }
            return _this;
        }
        Object.defineProperty(PrimitiveType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PrimitiveType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PrimitiveType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        PrimitiveType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        PrimitiveType.structureTypeName = "JavaActions$PrimitiveType";
        PrimitiveType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return PrimitiveType;
    }(Type));
    javaactions.PrimitiveType = PrimitiveType;
    /**
     * In version 6.6.0: introduced
     */
    var BooleanType = /** @class */ (function (_super) {
        __extends(BooleanType, _super);
        function BooleanType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new BooleanType() cannot be invoked directly, please use 'model.javaactions.createBooleanType()'");
            }
            return _this;
        }
        Object.defineProperty(BooleanType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        BooleanType.createInBasicParameterTypeUnderType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "type", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        BooleanType.createInJavaActionUnderJavaReturnType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "javaReturnType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 to 6.6.0
         */
        BooleanType.createInJavaActionParameterUnderJavaType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "6.6.0", end: "6.6.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "javaType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BooleanType.create = function (model) {
            return internal.instancehelpers.createElement(model, BooleanType);
        };
        /** @internal */
        BooleanType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        BooleanType.structureTypeName = "JavaActions$BooleanType";
        BooleanType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BooleanType;
    }(PrimitiveType));
    javaactions.BooleanType = BooleanType;
    /**
     * In version 6.6.0: introduced
     */
    var EntityType = /** @class */ (function (_super) {
        __extends(EntityType, _super);
        function EntityType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new EntityType() cannot be invoked directly, please use 'model.javaactions.createEntityType()'");
            }
            return _this;
        }
        Object.defineProperty(EntityType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsListType", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListType); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        EntityType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EntityType.structureTypeName = "JavaActions$EntityType";
        EntityType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EntityType;
    }(Type));
    javaactions.EntityType = EntityType;
    /**
     * In version 6.6.0: introduced
     */
    var ConcreteEntityType = /** @class */ (function (_super) {
        __extends(ConcreteEntityType, _super);
        function ConcreteEntityType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__entity = new internal.ByNameReferenceProperty(ConcreteEntityType, _this, "entity", null, "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new ConcreteEntityType() cannot be invoked directly, please use 'model.javaactions.createConcreteEntityType()'");
            }
            return _this;
        }
        Object.defineProperty(ConcreteEntityType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConcreteEntityType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConcreteEntityType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConcreteEntityType.prototype, "containerAsListType", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConcreteEntityType.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConcreteEntityType.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
         * The new ConcreteEntityType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        ConcreteEntityType.createInBasicParameterTypeUnderType = function (container) {
            internal.createInVersionCheck(container.model, ConcreteEntityType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, ConcreteEntityType, "type", false);
        };
        /**
         * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
         * The new ConcreteEntityType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        ConcreteEntityType.createInJavaActionUnderJavaReturnType = function (container) {
            internal.createInVersionCheck(container.model, ConcreteEntityType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, ConcreteEntityType, "javaReturnType", false);
        };
        /**
         * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
         * The new ConcreteEntityType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 to 6.6.0
         */
        ConcreteEntityType.createInJavaActionParameterUnderJavaType = function (container) {
            internal.createInVersionCheck(container.model, ConcreteEntityType.structureTypeName, { start: "6.6.0", end: "6.6.0" });
            return internal.instancehelpers.createElement(container, ConcreteEntityType, "javaType", false);
        };
        /**
         * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
         * The new ConcreteEntityType will be automatically stored in the 'parameter' property
         * of the parent ListType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        ConcreteEntityType.createInListTypeUnderParameter = function (container) {
            internal.createInVersionCheck(container.model, ConcreteEntityType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, ConcreteEntityType, "parameter", false);
        };
        /**
         * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConcreteEntityType.create = function (model) {
            return internal.instancehelpers.createElement(model, ConcreteEntityType);
        };
        /** @internal */
        ConcreteEntityType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ConcreteEntityType.structureTypeName = "JavaActions$ConcreteEntityType";
        ConcreteEntityType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "properties": {
                "entity": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ConcreteEntityType;
    }(EntityType));
    javaactions.ConcreteEntityType = ConcreteEntityType;
    /**
     * In version 6.6.0: introduced
     */
    var DateTimeType = /** @class */ (function (_super) {
        __extends(DateTimeType, _super);
        function DateTimeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DateTimeType() cannot be invoked directly, please use 'model.javaactions.createDateTimeType()'");
            }
            return _this;
        }
        Object.defineProperty(DateTimeType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        DateTimeType.createInBasicParameterTypeUnderType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "type", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        DateTimeType.createInJavaActionUnderJavaReturnType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "javaReturnType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 to 6.6.0
         */
        DateTimeType.createInJavaActionParameterUnderJavaType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "6.6.0", end: "6.6.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "javaType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DateTimeType.create = function (model) {
            return internal.instancehelpers.createElement(model, DateTimeType);
        };
        /** @internal */
        DateTimeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DateTimeType.structureTypeName = "JavaActions$DateTimeType";
        DateTimeType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DateTimeType;
    }(PrimitiveType));
    javaactions.DateTimeType = DateTimeType;
    /**
     * In version 6.6.0: introduced
     */
    var DecimalType = /** @class */ (function (_super) {
        __extends(DecimalType, _super);
        function DecimalType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DecimalType() cannot be invoked directly, please use 'model.javaactions.createDecimalType()'");
            }
            return _this;
        }
        Object.defineProperty(DecimalType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        DecimalType.createInBasicParameterTypeUnderType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "type", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        DecimalType.createInJavaActionUnderJavaReturnType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "javaReturnType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 to 6.6.0
         */
        DecimalType.createInJavaActionParameterUnderJavaType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "6.6.0", end: "6.6.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "javaType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DecimalType.create = function (model) {
            return internal.instancehelpers.createElement(model, DecimalType);
        };
        /** @internal */
        DecimalType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DecimalType.structureTypeName = "JavaActions$DecimalType";
        DecimalType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DecimalType;
    }(PrimitiveType));
    javaactions.DecimalType = DecimalType;
    /**
     * In version 6.7.0: introduced
     */
    var EntityTypeParameterType = /** @class */ (function (_super) {
        __extends(EntityTypeParameterType, _super);
        function EntityTypeParameterType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__typeParameter = new internal.ByIdReferenceProperty(EntityTypeParameterType, _this, "typeParameter", null);
            if (arguments.length < 4) {
                throw new Error("new EntityTypeParameterType() cannot be invoked directly, please use 'model.javaactions.createEntityTypeParameterType()'");
            }
            return _this;
        }
        Object.defineProperty(EntityTypeParameterType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityTypeParameterType.prototype, "typeParameter", {
            get: function () { return this.__typeParameter.get(); },
            set: function (newValue) { this.__typeParameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EntityTypeParameterType instance in the SDK and on the server.
         * The new EntityTypeParameterType will be automatically stored in the 'parameterType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        EntityTypeParameterType.createIn = function (container) {
            internal.createInVersionCheck(container.model, EntityTypeParameterType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, EntityTypeParameterType, "parameterType", false);
        };
        /**
         * Creates and returns a new EntityTypeParameterType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EntityTypeParameterType.create = function (model) {
            return internal.instancehelpers.createElement(model, EntityTypeParameterType);
        };
        /** @internal */
        EntityTypeParameterType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EntityTypeParameterType.structureTypeName = "JavaActions$EntityTypeParameterType";
        EntityTypeParameterType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.7.0",
            "properties": {
                "typeParameter": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EntityTypeParameterType;
    }(ParameterType));
    javaactions.EntityTypeParameterType = EntityTypeParameterType;
    /**
     * In version 6.6.0: introduced
     */
    var EnumerationType = /** @class */ (function (_super) {
        __extends(EnumerationType, _super);
        function EnumerationType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__enumeration = new internal.ByNameReferenceProperty(EnumerationType, _this, "enumeration", null, "Enumerations$Enumeration");
            if (arguments.length < 4) {
                throw new Error("new EnumerationType() cannot be invoked directly, please use 'model.javaactions.createEnumerationType()'");
            }
            return _this;
        }
        Object.defineProperty(EnumerationType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "enumeration", {
            get: function () { return this.__enumeration.get(); },
            set: function (newValue) { this.__enumeration.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "enumerationQualifiedName", {
            get: function () { return this.__enumeration.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        EnumerationType.createInBasicParameterTypeUnderType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "type", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        EnumerationType.createInJavaActionUnderJavaReturnType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "javaReturnType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 to 6.6.0
         */
        EnumerationType.createInJavaActionParameterUnderJavaType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "6.6.0", end: "6.6.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "javaType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EnumerationType.create = function (model) {
            return internal.instancehelpers.createElement(model, EnumerationType);
        };
        /** @internal */
        EnumerationType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EnumerationType.structureTypeName = "JavaActions$EnumerationType";
        EnumerationType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "properties": {
                "enumeration": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EnumerationType;
    }(Type));
    javaactions.EnumerationType = EnumerationType;
    /**
     * In version 7.2.0: introduced
     */
    var ExportMappingParameterType = /** @class */ (function (_super) {
        __extends(ExportMappingParameterType, _super);
        function ExportMappingParameterType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ExportMappingParameterType() cannot be invoked directly, please use 'model.javaactions.createExportMappingParameterType()'");
            }
            return _this;
        }
        Object.defineProperty(ExportMappingParameterType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ExportMappingParameterType instance in the SDK and on the server.
         * The new ExportMappingParameterType will be automatically stored in the 'parameterType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.2.0 and higher
         */
        ExportMappingParameterType.createIn = function (container) {
            internal.createInVersionCheck(container.model, ExportMappingParameterType.structureTypeName, { start: "7.2.0" });
            return internal.instancehelpers.createElement(container, ExportMappingParameterType, "parameterType", false);
        };
        /**
         * Creates and returns a new ExportMappingParameterType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExportMappingParameterType.create = function (model) {
            return internal.instancehelpers.createElement(model, ExportMappingParameterType);
        };
        /** @internal */
        ExportMappingParameterType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ExportMappingParameterType.structureTypeName = "JavaActions$ExportMappingParameterType";
        ExportMappingParameterType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.2.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ExportMappingParameterType;
    }(ParameterType));
    javaactions.ExportMappingParameterType = ExportMappingParameterType;
    /**
     * In version 6.6.0: introduced
     */
    var FloatType = /** @class */ (function (_super) {
        __extends(FloatType, _super);
        function FloatType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new FloatType() cannot be invoked directly, please use 'model.javaactions.createFloatType()'");
            }
            return _this;
        }
        Object.defineProperty(FloatType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        FloatType.createInBasicParameterTypeUnderType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, FloatType, "type", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        FloatType.createInJavaActionUnderJavaReturnType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, FloatType, "javaReturnType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 to 6.6.0
         */
        FloatType.createInJavaActionParameterUnderJavaType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "6.6.0", end: "6.6.0" });
            return internal.instancehelpers.createElement(container, FloatType, "javaType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FloatType.create = function (model) {
            return internal.instancehelpers.createElement(model, FloatType);
        };
        /** @internal */
        FloatType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        FloatType.structureTypeName = "JavaActions$FloatType";
        FloatType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return FloatType;
    }(PrimitiveType));
    javaactions.FloatType = FloatType;
    /**
     * In version 7.2.0: introduced
     */
    var ImportMappingParameterType = /** @class */ (function (_super) {
        __extends(ImportMappingParameterType, _super);
        function ImportMappingParameterType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ImportMappingParameterType() cannot be invoked directly, please use 'model.javaactions.createImportMappingParameterType()'");
            }
            return _this;
        }
        Object.defineProperty(ImportMappingParameterType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ImportMappingParameterType instance in the SDK and on the server.
         * The new ImportMappingParameterType will be automatically stored in the 'parameterType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.2.0 and higher
         */
        ImportMappingParameterType.createIn = function (container) {
            internal.createInVersionCheck(container.model, ImportMappingParameterType.structureTypeName, { start: "7.2.0" });
            return internal.instancehelpers.createElement(container, ImportMappingParameterType, "parameterType", false);
        };
        /**
         * Creates and returns a new ImportMappingParameterType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImportMappingParameterType.create = function (model) {
            return internal.instancehelpers.createElement(model, ImportMappingParameterType);
        };
        /** @internal */
        ImportMappingParameterType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ImportMappingParameterType.structureTypeName = "JavaActions$ImportMappingParameterType";
        ImportMappingParameterType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.2.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ImportMappingParameterType;
    }(ParameterType));
    javaactions.ImportMappingParameterType = ImportMappingParameterType;
    /**
     * In version 6.6.0: introduced
     */
    var IntegerType = /** @class */ (function (_super) {
        __extends(IntegerType, _super);
        function IntegerType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new IntegerType() cannot be invoked directly, please use 'model.javaactions.createIntegerType()'");
            }
            return _this;
        }
        Object.defineProperty(IntegerType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        IntegerType.createInBasicParameterTypeUnderType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "type", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        IntegerType.createInJavaActionUnderJavaReturnType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "javaReturnType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 to 6.6.0
         */
        IntegerType.createInJavaActionParameterUnderJavaType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "6.6.0", end: "6.6.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "javaType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        IntegerType.create = function (model) {
            return internal.instancehelpers.createElement(model, IntegerType);
        };
        /** @internal */
        IntegerType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        IntegerType.structureTypeName = "JavaActions$IntegerType";
        IntegerType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return IntegerType;
    }(PrimitiveType));
    javaactions.IntegerType = IntegerType;
    /**
     * See: {@link https://docs.mendix.com/refguide7/java-actions relevant section in reference guide}
     */
    var JavaAction = /** @class */ (function (_super) {
        __extends(JavaAction, _super);
        function JavaAction(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__typeParameters = new internal.PartListProperty(JavaAction, _this, "typeParameters", []);
            /** @internal */
            _this.__parameters = new internal.PartListProperty(JavaAction, _this, "parameters", []);
            /** @internal */
            _this.__returnType = new internal.PrimitiveProperty(JavaAction, _this, "returnType", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__javaReturnType = new internal.PartProperty(JavaAction, _this, "javaReturnType", null, true);
            /** @internal */
            _this.__microflowActionInfo = new internal.PartProperty(JavaAction, _this, "microflowActionInfo", null, false);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(JavaAction.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaAction.prototype, "typeParameters", {
            /**
             * In version 6.6.0: introduced
             */
            get: function () { return this.__typeParameters.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaAction.prototype, "parameters", {
            get: function () { return this.__parameters.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaAction.prototype, "returnType", {
            /**
             * The value of this property is conceptually of type dataTypes.LegacyDataType.
             *
             * In version 6.6.0: deleted
             */
            get: function () { return this.__returnType.get(); },
            set: function (newValue) { this.__returnType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaAction.prototype, "javaReturnType", {
            /**
             * In version 6.6.0: introduced
             */
            get: function () { return this.__javaReturnType.get(); },
            set: function (newValue) { this.__javaReturnType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaAction.prototype, "microflowActionInfo", {
            /**
             * In version 6.6.0: introduced
             */
            get: function () { return this.__microflowActionInfo.get(); },
            set: function (newValue) { this.__microflowActionInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new JavaAction unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        JavaAction.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, JavaAction);
        };
        /** @internal */
        JavaAction.prototype._isByNameReferrable = function () { return true; };
        /** @internal */
        JavaAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__javaReturnType.isAvailable) {
                this.javaReturnType = BooleanType.create(this.model);
            }
            if (this.__returnType.isAvailable) {
                this.returnType = "Boolean";
            }
        };
        JavaAction.structureTypeName = "JavaActions$JavaAction";
        JavaAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "typeParameters": {
                    "introduced": "6.6.0",
                    "public": {
                        "currentValue": true
                    }
                },
                "parameters": {
                    "public": {
                        "currentValue": true
                    }
                },
                "returnType": {
                    "deleted": "6.6.0",
                    "deletionMessage": null,
                    "public": {
                        "currentValue": true
                    }
                },
                "javaReturnType": {
                    "introduced": "6.6.0",
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                },
                "microflowActionInfo": {
                    "introduced": "6.6.0",
                    "public": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return JavaAction;
    }(projects_1.projects.Document));
    javaactions.JavaAction = JavaAction;
    var JavaActionParameter = /** @class */ (function (_super) {
        __extends(JavaActionParameter, _super);
        function JavaActionParameter(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(JavaActionParameter, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__type = new internal.PrimitiveProperty(JavaActionParameter, _this, "type", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__javaType = new internal.PartProperty(JavaActionParameter, _this, "javaType", null, true);
            /** @internal */
            _this.__parameterType = new internal.PartProperty(JavaActionParameter, _this, "parameterType", null, true);
            /** @internal */
            _this.__description = new internal.PrimitiveProperty(JavaActionParameter, _this, "description", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new JavaActionParameter() cannot be invoked directly, please use 'model.javaactions.createJavaActionParameter()'");
            }
            return _this;
        }
        Object.defineProperty(JavaActionParameter.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameter.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameter.prototype, "type", {
            /**
             * The value of this property is conceptually of type dataTypes.LegacyDataType.
             *
             * In version 6.6.0: deleted
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameter.prototype, "javaType", {
            /**
             * In version 6.7.0: deleted
             * In version 6.6.0: introduced
             */
            get: function () { return this.__javaType.get(); },
            set: function (newValue) { this.__javaType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameter.prototype, "parameterType", {
            /**
             * In version 6.7.0: introduced
             */
            get: function () { return this.__parameterType.get(); },
            set: function (newValue) { this.__parameterType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameter.prototype, "description", {
            /**
             * In version 6.10.0: introduced
             */
            get: function () { return this.__description.get(); },
            set: function (newValue) { this.__description.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new JavaActionParameter instance in the SDK and on the server.
         * The new JavaActionParameter will be automatically stored in the 'parameters' property
         * of the parent JavaAction element passed as argument.
         */
        JavaActionParameter.createIn = function (container) {
            return internal.instancehelpers.createElement(container, JavaActionParameter, "parameters", true);
        };
        /**
         * Creates and returns a new JavaActionParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        JavaActionParameter.create = function (model) {
            return internal.instancehelpers.createElement(model, JavaActionParameter);
        };
        /** @internal */
        JavaActionParameter.prototype._isByNameReferrable = function () { return true; };
        Object.defineProperty(JavaActionParameter.prototype, "qualifiedName", {
            get: function () {
                return this._getQualifiedName();
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        JavaActionParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__javaType.isAvailable) {
                this.javaType = StringType.create(this.model);
            }
            if (this.__parameterType.isAvailable) {
                this.parameterType = BasicParameterType.create(this.model);
            }
            if (this.__type.isAvailable) {
                this.type = "Unknown";
            }
        };
        JavaActionParameter.structureTypeName = "JavaActions$JavaActionParameter";
        JavaActionParameter.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "type": {
                    "deleted": "6.6.0",
                    "deletionMessage": null,
                    "public": {
                        "currentValue": true
                    }
                },
                "javaType": {
                    "introduced": "6.6.0",
                    "deleted": "6.7.0",
                    "deletionMessage": null,
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                },
                "parameterType": {
                    "introduced": "6.7.0",
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                },
                "description": {
                    "introduced": "6.10.0",
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return JavaActionParameter;
    }(internal.Element));
    javaactions.JavaActionParameter = JavaActionParameter;
    /**
     * In version 6.6.0: introduced
     */
    var ListType = /** @class */ (function (_super) {
        __extends(ListType, _super);
        function ListType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__parameter = new internal.PartProperty(ListType, _this, "parameter", null, true);
            if (arguments.length < 4) {
                throw new Error("new ListType() cannot be invoked directly, please use 'model.javaactions.createListType()'");
            }
            return _this;
        }
        Object.defineProperty(ListType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        ListType.createInBasicParameterTypeUnderType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, ListType, "type", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        ListType.createInJavaActionUnderJavaReturnType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, ListType, "javaReturnType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 to 6.6.0
         */
        ListType.createInJavaActionParameterUnderJavaType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "6.6.0", end: "6.6.0" });
            return internal.instancehelpers.createElement(container, ListType, "javaType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListType.create = function (model) {
            return internal.instancehelpers.createElement(model, ListType);
        };
        /** @internal */
        ListType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.parameter = ParameterizedEntityType.create(this.model);
        };
        ListType.structureTypeName = "JavaActions$ListType";
        ListType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "properties": {
                "parameter": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ListType;
    }(Type));
    javaactions.ListType = ListType;
    /**
     * In version 6.10.0: removed experimental
     * In version 6.6.0: introduced
     */
    var MicroflowActionInfo = /** @class */ (function (_super) {
        __extends(MicroflowActionInfo, _super);
        function MicroflowActionInfo(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__caption = new internal.PrimitiveProperty(MicroflowActionInfo, _this, "caption", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__category = new internal.PrimitiveProperty(MicroflowActionInfo, _this, "category", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__icon = new internal.ByNameReferenceProperty(MicroflowActionInfo, _this, "icon", null, "Images$Image");
            if (arguments.length < 4) {
                throw new Error("new MicroflowActionInfo() cannot be invoked directly, please use 'model.javaactions.createMicroflowActionInfo()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowActionInfo.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowActionInfo.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowActionInfo.prototype, "category", {
            get: function () { return this.__category.get(); },
            set: function (newValue) { this.__category.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowActionInfo.prototype, "icon", {
            get: function () { return this.__icon.get(); },
            set: function (newValue) { this.__icon.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowActionInfo.prototype, "iconQualifiedName", {
            get: function () { return this.__icon.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MicroflowActionInfo instance in the SDK and on the server.
         * The new MicroflowActionInfo will be automatically stored in the 'microflowActionInfo' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        MicroflowActionInfo.createIn = function (container) {
            internal.createInVersionCheck(container.model, MicroflowActionInfo.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, MicroflowActionInfo, "microflowActionInfo", false);
        };
        /**
         * Creates and returns a new MicroflowActionInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowActionInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowActionInfo);
        };
        /** @internal */
        MicroflowActionInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MicroflowActionInfo.structureTypeName = "JavaActions$MicroflowActionInfo";
        MicroflowActionInfo.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "properties": {
                "caption": {
                    "public": {
                        "currentValue": true
                    }
                },
                "category": {
                    "public": {
                        "currentValue": true
                    }
                },
                "icon": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            },
            "experimental": {
                "currentValue": false,
                "changedIn": [
                    "6.10.0"
                ]
            }
        }, internal.StructureType.Element);
        return MicroflowActionInfo;
    }(internal.Element));
    javaactions.MicroflowActionInfo = MicroflowActionInfo;
    /**
     * In version 6.9.0: introduced
     */
    var MicroflowParameterType = /** @class */ (function (_super) {
        __extends(MicroflowParameterType, _super);
        function MicroflowParameterType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new MicroflowParameterType() cannot be invoked directly, please use 'model.javaactions.createMicroflowParameterType()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowParameterType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MicroflowParameterType instance in the SDK and on the server.
         * The new MicroflowParameterType will be automatically stored in the 'parameterType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.9.0 and higher
         */
        MicroflowParameterType.createIn = function (container) {
            internal.createInVersionCheck(container.model, MicroflowParameterType.structureTypeName, { start: "6.9.0" });
            return internal.instancehelpers.createElement(container, MicroflowParameterType, "parameterType", false);
        };
        /**
         * Creates and returns a new MicroflowParameterType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowParameterType.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowParameterType);
        };
        /** @internal */
        MicroflowParameterType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MicroflowParameterType.structureTypeName = "JavaActions$MicroflowParameterType";
        MicroflowParameterType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return MicroflowParameterType;
    }(ParameterType));
    javaactions.MicroflowParameterType = MicroflowParameterType;
    /**
     * In version 6.6.0: introduced
     */
    var ParameterizedEntityType = /** @class */ (function (_super) {
        __extends(ParameterizedEntityType, _super);
        function ParameterizedEntityType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__typeParameter = new internal.ByIdReferenceProperty(ParameterizedEntityType, _this, "typeParameter", null);
            if (arguments.length < 4) {
                throw new Error("new ParameterizedEntityType() cannot be invoked directly, please use 'model.javaactions.createParameterizedEntityType()'");
            }
            return _this;
        }
        Object.defineProperty(ParameterizedEntityType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParameterizedEntityType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParameterizedEntityType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParameterizedEntityType.prototype, "containerAsListType", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParameterizedEntityType.prototype, "typeParameter", {
            get: function () { return this.__typeParameter.get(); },
            set: function (newValue) { this.__typeParameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
         * The new ParameterizedEntityType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        ParameterizedEntityType.createInBasicParameterTypeUnderType = function (container) {
            internal.createInVersionCheck(container.model, ParameterizedEntityType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, ParameterizedEntityType, "type", false);
        };
        /**
         * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
         * The new ParameterizedEntityType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        ParameterizedEntityType.createInJavaActionUnderJavaReturnType = function (container) {
            internal.createInVersionCheck(container.model, ParameterizedEntityType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, ParameterizedEntityType, "javaReturnType", false);
        };
        /**
         * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
         * The new ParameterizedEntityType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 to 6.6.0
         */
        ParameterizedEntityType.createInJavaActionParameterUnderJavaType = function (container) {
            internal.createInVersionCheck(container.model, ParameterizedEntityType.structureTypeName, { start: "6.6.0", end: "6.6.0" });
            return internal.instancehelpers.createElement(container, ParameterizedEntityType, "javaType", false);
        };
        /**
         * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
         * The new ParameterizedEntityType will be automatically stored in the 'parameter' property
         * of the parent ListType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        ParameterizedEntityType.createInListTypeUnderParameter = function (container) {
            internal.createInVersionCheck(container.model, ParameterizedEntityType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, ParameterizedEntityType, "parameter", false);
        };
        /**
         * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ParameterizedEntityType.create = function (model) {
            return internal.instancehelpers.createElement(model, ParameterizedEntityType);
        };
        /** @internal */
        ParameterizedEntityType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ParameterizedEntityType.structureTypeName = "JavaActions$ParameterizedEntityType";
        ParameterizedEntityType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "properties": {
                "typeParameter": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ParameterizedEntityType;
    }(EntityType));
    javaactions.ParameterizedEntityType = ParameterizedEntityType;
    /**
     * In version 6.6.0: introduced
     */
    var StringType = /** @class */ (function (_super) {
        __extends(StringType, _super);
        function StringType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new StringType() cannot be invoked directly, please use 'model.javaactions.createStringType()'");
            }
            return _this;
        }
        Object.defineProperty(StringType.prototype, "containerAsBasicParameterType", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicParameterType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsJavaActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        StringType.createInBasicParameterTypeUnderType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, StringType, "type", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        StringType.createInJavaActionUnderJavaReturnType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, StringType, "javaReturnType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 to 6.6.0
         */
        StringType.createInJavaActionParameterUnderJavaType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "6.6.0", end: "6.6.0" });
            return internal.instancehelpers.createElement(container, StringType, "javaType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StringType.create = function (model) {
            return internal.instancehelpers.createElement(model, StringType);
        };
        /** @internal */
        StringType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        StringType.structureTypeName = "JavaActions$StringType";
        StringType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return StringType;
    }(PrimitiveType));
    javaactions.StringType = StringType;
    /**
     * In version 6.6.0: introduced
     */
    var TypeParameter = /** @class */ (function (_super) {
        __extends(TypeParameter, _super);
        function TypeParameter(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(TypeParameter, _this, "name", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new TypeParameter() cannot be invoked directly, please use 'model.javaactions.createTypeParameter()'");
            }
            return _this;
        }
        Object.defineProperty(TypeParameter.prototype, "containerAsJavaAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TypeParameter.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TypeParameter instance in the SDK and on the server.
         * The new TypeParameter will be automatically stored in the 'typeParameters' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0 and higher
         */
        TypeParameter.createIn = function (container) {
            internal.createInVersionCheck(container.model, TypeParameter.structureTypeName, { start: "6.6.0" });
            return internal.instancehelpers.createElement(container, TypeParameter, "typeParameters", true);
        };
        /**
         * Creates and returns a new TypeParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TypeParameter.create = function (model) {
            return internal.instancehelpers.createElement(model, TypeParameter);
        };
        Object.defineProperty(TypeParameter.prototype, "qualifiedName", {
            get: function () {
                return this._getQualifiedName();
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        TypeParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        TypeParameter.structureTypeName = "JavaActions$TypeParameter";
        TypeParameter.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.6.0",
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return TypeParameter;
    }(internal.Element));
    javaactions.TypeParameter = TypeParameter;
})(javaactions = exports.javaactions || (exports.javaactions = {}));
//# sourceMappingURL=javaactions.js.map