import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { pages } from "./pages";
export declare namespace pluginwidgets {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `PluginWidgets`.
     */
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    abstract class PropertyValue extends internal.Element {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.6.0: introduced
     */
    class ActionValue extends PropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        value: pages.ClientAction | null;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ActionValue instance in the SDK and on the server.
         * The new ActionValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createIn(container: PluginWidgetProperty): ActionValue;
        /**
         * Creates and returns a new ActionValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ActionValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.4.0: introduced
     */
    class AttributeValue extends PropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        /**
         * In version 7.11.0: introduced
         */
        value: domainmodels.AttributeRef | null;
        /**
         * In version 7.6.0: introduced
         */
        readOnly: boolean;
        /**
         * In version 7.7.0: introduced
         */
        readonly validations: internal.IList<pages.WidgetValidation>;
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.7.0: introduced
         */
        numberFormat: NumberFormat | null;
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.11.0: introduced
         */
        dateTimeFormat: DateTimeFormat | null;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new AttributeValue instance in the SDK and on the server.
         * The new AttributeValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.4.0 and higher
         */
        static createIn(container: PluginWidgetProperty): AttributeValue;
        /**
         * Creates and returns a new AttributeValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): AttributeValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    abstract class PrimitiveValue extends PropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class BooleanValue extends PrimitiveValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        value: boolean;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new BooleanValue instance in the SDK and on the server.
         * The new BooleanValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container: PluginWidgetProperty): BooleanValue;
        /**
         * Creates and returns a new BooleanValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): BooleanValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class CompositeValue extends PropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         */
        readonly properties: internal.IList<PluginWidgetProperty>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CompositeValue instance in the SDK and on the server.
         * The new CompositeValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container: PluginWidgetProperty): CompositeValue;
        /**
         * Creates and returns a new CompositeValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CompositeValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    class DateTimeFormat extends internal.Element {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsAttributeValue: AttributeValue;
        type: pages.DateFormat;
        pattern: string;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DateTimeFormat instance in the SDK and on the server.
         * The new DateTimeFormat will be automatically stored in the 'dateTimeFormat' property
         * of the parent AttributeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        static createIn(container: AttributeValue): DateTimeFormat;
        /**
         * Creates and returns a new DateTimeFormat instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DateTimeFormat;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.7.0: introduced
     */
    abstract class NumberFormat extends internal.Element {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsAttributeValue: AttributeValue;
        groupDigits: boolean;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.7.0: introduced
     */
    class DecimalNumberFormat extends NumberFormat {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsAttributeValue: AttributeValue;
        decimalPrecision: number;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DecimalNumberFormat instance in the SDK and on the server.
         * The new DecimalNumberFormat will be automatically stored in the 'numberFormat' property
         * of the parent AttributeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createIn(container: AttributeValue): DecimalNumberFormat;
        /**
         * Creates and returns a new DecimalNumberFormat instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DecimalNumberFormat;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class DynamicTextValue extends PrimitiveValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        value: pages.ClientTemplate;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DynamicTextValue instance in the SDK and on the server.
         * The new DynamicTextValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container: PluginWidgetProperty): DynamicTextValue;
        /**
         * Creates and returns a new DynamicTextValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DynamicTextValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    class EnumValue extends PrimitiveValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        value: string;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new EnumValue instance in the SDK and on the server.
         * The new EnumValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        static createIn(container: PluginWidgetProperty): EnumValue;
        /**
         * Creates and returns a new EnumValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): EnumValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.6.0: introduced
     */
    class ExpressionValue extends PropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         */
        value: string;
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.9.0: introduced
         */
        valueModel: expressions.Expression;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ExpressionValue instance in the SDK and on the server.
         * The new ExpressionValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createIn(container: PluginWidgetProperty): ExpressionValue;
        /**
         * Creates and returns a new ExpressionValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ExpressionValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    class ImageValue extends PropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        value: images.Image;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ImageValue instance in the SDK and on the server.
         * The new ImageValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        static createIn(container: PluginWidgetProperty): ImageValue;
        /**
         * Creates and returns a new ImageValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ImageValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.7.0: introduced
     */
    class IntegerNumberFormat extends NumberFormat {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsAttributeValue: AttributeValue;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new IntegerNumberFormat instance in the SDK and on the server.
         * The new IntegerNumberFormat will be automatically stored in the 'numberFormat' property
         * of the parent AttributeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createIn(container: AttributeValue): IntegerNumberFormat;
        /**
         * Creates and returns a new IntegerNumberFormat instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): IntegerNumberFormat;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    class NativeClassValue extends PropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        value: string;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NativeClassValue instance in the SDK and on the server.
         * The new NativeClassValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        static createIn(container: PluginWidgetProperty): NativeClassValue;
        /**
         * Creates and returns a new NativeClassValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NativeClassValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    class NestedWidgetValue extends PropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        /**
         * In version 7.11.0: deleted
         */
        entity: domainmodels.IEntity;
        readonly entityQualifiedName: string;
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         */
        readonly widgets: internal.IList<PluginWidget>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NestedWidgetValue instance in the SDK and on the server.
         * The new NestedWidgetValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        static createIn(container: PluginWidgetProperty): NestedWidgetValue;
        /**
         * Creates and returns a new NestedWidgetValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NestedWidgetValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class NumericValue extends PrimitiveValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        value: number;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NumericValue instance in the SDK and on the server.
         * The new NumericValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container: PluginWidgetProperty): NumericValue;
        /**
         * Creates and returns a new NumericValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NumericValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    class OfflineObjectListValue extends PropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        entity: domainmodels.IEntity;
        readonly entityQualifiedName: string;
        pageSize: number;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OfflineObjectListValue instance in the SDK and on the server.
         * The new OfflineObjectListValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        static createIn(container: PluginWidgetProperty): OfflineObjectListValue;
        /**
         * Creates and returns a new OfflineObjectListValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OfflineObjectListValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.0.1: introduced
     */
    class PluginWidget extends pages.ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBuildingBlock: pages.BuildingBlock;
        readonly containerAsDataView: pages.DataView;
        readonly containerAsDivContainer: pages.DivContainer;
        readonly containerAsGroupBox: pages.GroupBox;
        readonly containerAsHeader: pages.Header;
        readonly containerAsLayout: pages.Layout;
        readonly containerAsLayoutCallArgument: pages.LayoutCallArgument;
        readonly containerAsLayoutGridColumn: pages.LayoutGridColumn;
        readonly containerAsListView: pages.ListView;
        readonly containerAsListViewTemplate: pages.ListViewTemplate;
        readonly containerAsMasterDetailRegion: pages.MasterDetailRegion;
        readonly containerAsNavigationListItem: pages.NavigationListItem;
        readonly containerAsScrollContainerRegion: pages.ScrollContainerRegion;
        readonly containerAsSnippet: pages.Snippet;
        readonly containerAsSplitPane: pages.SplitPane;
        readonly containerAsTabPage: pages.TabPage;
        readonly containerAsTableCell: pages.TableCell;
        readonly containerAsTemplateGridContents: pages.TemplateGridContents;
        readonly containerAsVerticalFlow: pages.VerticalFlow;
        readonly containerAsNestedWidgetValue: NestedWidgetValue;
        readonly containerAsPluginWidget: PluginWidget;
        readonly containerAsTemplatedWidgetValue: TemplatedWidgetValue;
        pluginWidgetName: string;
        pluginWidgetVersion: string;
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.1.0: introduced
         */
        readonly properties: internal.IList<PluginWidgetProperty>;
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.8.0: introduced
         */
        readonly widgets: internal.IList<PluginWidget>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container: pages.BuildingBlock): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInDataViewUnderFooterWidget(container: pages.DataView): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInDataViewUnderWidget(container: pages.DataView): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInDivContainerUnderWidget(container: pages.DivContainer): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInGroupBoxUnderWidget(container: pages.GroupBox): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInHeaderUnderLeftWidget(container: pages.Header): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInHeaderUnderRightWidget(container: pages.Header): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInLayoutUnderWidget(container: pages.Layout): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInLayoutCallArgumentUnderWidget(container: pages.LayoutCallArgument): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInLayoutGridColumnUnderWidget(container: pages.LayoutGridColumn): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInListViewUnderWidget(container: pages.ListView): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInListViewTemplateUnderWidget(container: pages.ListViewTemplate): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container: pages.MasterDetailRegion): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInNavigationListItemUnderWidget(container: pages.NavigationListItem): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInScrollContainerRegionUnderWidget(container: pages.ScrollContainerRegion): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInSnippetUnderWidget(container: pages.Snippet): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInSplitPaneUnderFirstWidget(container: pages.SplitPane): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInSplitPaneUnderSecondWidget(container: pages.SplitPane): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInTabPageUnderWidget(container: pages.TabPage): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInTableCellUnderWidget(container: pages.TableCell): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInTemplateGridContentsUnderWidget(container: pages.TemplateGridContents): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInVerticalFlowUnderWidgets(container: pages.VerticalFlow): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent NestedWidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        static createInNestedWidgetValueUnderWidgets(container: NestedWidgetValue): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent PluginWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInPluginWidgetUnderWidgets(container: PluginWidget): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent TemplatedWidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        static createInTemplatedWidgetValueUnderWidgets(container: TemplatedWidgetValue): PluginWidget;
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PluginWidget;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class PluginWidgetProperty extends internal.Element {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsCompositeValue: CompositeValue;
        readonly containerAsPluginWidget: PluginWidget;
        key: string;
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         */
        value: PropertyValue | null;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PluginWidgetProperty instance in the SDK and on the server.
         * The new PluginWidgetProperty will be automatically stored in the 'properties' property
         * of the parent CompositeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInCompositeValueUnderProperties(container: CompositeValue): PluginWidgetProperty;
        /**
         * Creates and returns a new PluginWidgetProperty instance in the SDK and on the server.
         * The new PluginWidgetProperty will be automatically stored in the 'properties' property
         * of the parent PluginWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInPluginWidgetUnderProperties(container: PluginWidget): PluginWidgetProperty;
        /**
         * Creates and returns a new PluginWidgetProperty instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PluginWidgetProperty;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class StringValue extends PrimitiveValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        value: string;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new StringValue instance in the SDK and on the server.
         * The new StringValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container: PluginWidgetProperty): StringValue;
        /**
         * Creates and returns a new StringValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): StringValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    class TemplatedWidgetValue extends PropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         */
        readonly widgets: internal.IList<PluginWidget>;
        entity: domainmodels.IEntity;
        readonly entityQualifiedName: string;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TemplatedWidgetValue instance in the SDK and on the server.
         * The new TemplatedWidgetValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        static createIn(container: PluginWidgetProperty): TemplatedWidgetValue;
        /**
         * Creates and returns a new TemplatedWidgetValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TemplatedWidgetValue;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.6.0: introduced
     */
    class ValidationEventValue extends PropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPluginWidgetProperty: PluginWidgetProperty;
        sourceWidget: string;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ValidationEventValue instance in the SDK and on the server.
         * The new ValidationEventValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createIn(container: PluginWidgetProperty): ValidationEventValue;
        /**
         * Creates and returns a new ValidationEventValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ValidationEventValue;
    }
}
import { domainmodels } from "./domainmodels";
import { expressions } from "./expressions";
import { images } from "./images";
import { IModel } from "./base-model";
