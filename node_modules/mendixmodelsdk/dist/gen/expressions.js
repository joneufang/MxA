"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var expressions;
(function (expressions) {
    var BinaryOperator = /** @class */ (function (_super) {
        __extends(BinaryOperator, _super);
        function BinaryOperator() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "expressions.BinaryOperator";
            return _this;
        }
        BinaryOperator.None = new BinaryOperator("None", {});
        BinaryOperator.And = new BinaryOperator("And", {});
        BinaryOperator.Or = new BinaryOperator("Or", {});
        BinaryOperator.Equals = new BinaryOperator("Equals", {});
        BinaryOperator.NotEquals = new BinaryOperator("NotEquals", {});
        BinaryOperator.GreaterThan = new BinaryOperator("GreaterThan", {});
        BinaryOperator.LessThan = new BinaryOperator("LessThan", {});
        BinaryOperator.GreaterThanOrEqual = new BinaryOperator("GreaterThanOrEqual", {});
        BinaryOperator.LessThanOrEqual = new BinaryOperator("LessThanOrEqual", {});
        BinaryOperator.Minus = new BinaryOperator("Minus", {});
        BinaryOperator.Plus = new BinaryOperator("Plus", {});
        BinaryOperator.Multiply = new BinaryOperator("Multiply", {});
        BinaryOperator.Divide = new BinaryOperator("Divide", {});
        BinaryOperator.Div = new BinaryOperator("Div", {});
        BinaryOperator.Mod = new BinaryOperator("Mod", {});
        return BinaryOperator;
    }(internal.AbstractEnum));
    expressions.BinaryOperator = BinaryOperator;
    var UnaryOperator = /** @class */ (function (_super) {
        __extends(UnaryOperator, _super);
        function UnaryOperator() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "expressions.UnaryOperator";
            return _this;
        }
        UnaryOperator.None = new UnaryOperator("None", {});
        UnaryOperator.UnaryMinus = new UnaryOperator("UnaryMinus", {});
        return UnaryOperator;
    }(internal.AbstractEnum));
    expressions.UnaryOperator = UnaryOperator;
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Expressions`.
     */
    /**
     * See: {@link https://docs.mendix.com/refguide7/microflow-expressions relevant section in reference guide}
     *
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var Expression = /** @class */ (function (_super) {
        __extends(Expression, _super);
        function Expression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Expression() cannot be invoked directly, please use 'model.expressions.createExpression()'");
            }
            return _this;
        }
        Object.defineProperty(Expression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        Expression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Expression.structureTypeName = "Expressions$Expression";
        Expression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return Expression;
    }(internal.Element));
    expressions.Expression = Expression;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var BinaryExpression = /** @class */ (function (_super) {
        __extends(BinaryExpression, _super);
        function BinaryExpression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__operator = new internal.EnumProperty(BinaryExpression, _this, "operator", BinaryOperator.None, BinaryOperator);
            /** @internal */
            _this.__left = new internal.PartProperty(BinaryExpression, _this, "left", null, true);
            /** @internal */
            _this.__right = new internal.PartProperty(BinaryExpression, _this, "right", null, true);
            if (arguments.length < 4) {
                throw new Error("new BinaryExpression() cannot be invoked directly, please use 'model.expressions.createBinaryExpression()'");
            }
            return _this;
        }
        Object.defineProperty(BinaryExpression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "operator", {
            get: function () { return this.__operator.get(); },
            set: function (newValue) { this.__operator.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "left", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__left.get(); },
            set: function (newValue) { this.__left.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryExpression.prototype, "right", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__right.get(); },
            set: function (newValue) { this.__right.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "left", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "right", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "arguments", true);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "condition", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "ifFalse", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "ifTrue", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "expression", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "expression", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "initialValueModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "returnValueModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "customLocationModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "password", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "username", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "nodeModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * The new BinaryExpression will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryExpression.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, BinaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new BinaryExpression instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BinaryExpression.create = function (model) {
            return internal.instancehelpers.createElement(model, BinaryExpression);
        };
        /** @internal */
        BinaryExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.left = NoExpression.create(this.model);
            this.operator = BinaryOperator.None;
            this.right = NoExpression.create(this.model);
        };
        BinaryExpression.structureTypeName = "Expressions$BinaryExpression";
        BinaryExpression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "properties": {
                "left": {
                    "required": {
                        "currentValue": true
                    }
                },
                "right": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BinaryExpression;
    }(Expression));
    expressions.BinaryExpression = BinaryExpression;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var LiteralExpression = /** @class */ (function (_super) {
        __extends(LiteralExpression, _super);
        function LiteralExpression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new LiteralExpression() cannot be invoked directly, please use 'model.expressions.createLiteralExpression()'");
            }
            return _this;
        }
        Object.defineProperty(LiteralExpression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiteralExpression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        LiteralExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        LiteralExpression.structureTypeName = "Expressions$LiteralExpression";
        LiteralExpression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return LiteralExpression;
    }(Expression));
    expressions.LiteralExpression = LiteralExpression;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var BooleanLiteral = /** @class */ (function (_super) {
        __extends(BooleanLiteral, _super);
        function BooleanLiteral(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(BooleanLiteral, _this, "value", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new BooleanLiteral() cannot be invoked directly, please use 'model.expressions.createBooleanLiteral()'");
            }
            return _this;
        }
        Object.defineProperty(BooleanLiteral.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanLiteral.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "left", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "right", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "arguments", true);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "condition", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "ifFalse", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "ifTrue", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "expression", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "expression", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "initialValueModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "returnValueModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "customLocationModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "password", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "username", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "nodeModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * The new BooleanLiteral will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanLiteral.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, BooleanLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new BooleanLiteral instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BooleanLiteral.create = function (model) {
            return internal.instancehelpers.createElement(model, BooleanLiteral);
        };
        /** @internal */
        BooleanLiteral.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        BooleanLiteral.structureTypeName = "Expressions$BooleanLiteral";
        BooleanLiteral.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BooleanLiteral;
    }(LiteralExpression));
    expressions.BooleanLiteral = BooleanLiteral;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var ConstantRefExpression = /** @class */ (function (_super) {
        __extends(ConstantRefExpression, _super);
        function ConstantRefExpression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__constant = new internal.ByNameReferenceProperty(ConstantRefExpression, _this, "constant", null, "Constants$Constant");
            if (arguments.length < 4) {
                throw new Error("new ConstantRefExpression() cannot be invoked directly, please use 'model.expressions.createConstantRefExpression()'");
            }
            return _this;
        }
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "constant", {
            get: function () { return this.__constant.get(); },
            set: function (newValue) { this.__constant.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRefExpression.prototype, "constantQualifiedName", {
            get: function () { return this.__constant.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "left", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "right", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "arguments", true);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "condition", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "ifFalse", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "ifTrue", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "expression", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "expression", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "initialValueModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "returnValueModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "customLocationModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "password", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "username", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "nodeModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * The new ConstantRefExpression will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ConstantRefExpression.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, ConstantRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ConstantRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new ConstantRefExpression instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConstantRefExpression.create = function (model) {
            return internal.instancehelpers.createElement(model, ConstantRefExpression);
        };
        /** @internal */
        ConstantRefExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ConstantRefExpression.structureTypeName = "Expressions$ConstantRefExpression";
        ConstantRefExpression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "properties": {
                "constant": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ConstantRefExpression;
    }(Expression));
    expressions.ConstantRefExpression = ConstantRefExpression;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var EmptyLiteral = /** @class */ (function (_super) {
        __extends(EmptyLiteral, _super);
        function EmptyLiteral(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new EmptyLiteral() cannot be invoked directly, please use 'model.expressions.createEmptyLiteral()'");
            }
            return _this;
        }
        Object.defineProperty(EmptyLiteral.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyLiteral.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "left", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "right", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "arguments", true);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "condition", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "ifFalse", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "ifTrue", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "expression", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "expression", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "initialValueModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "returnValueModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "customLocationModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "password", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "username", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "nodeModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * The new EmptyLiteral will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyLiteral.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, EmptyLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new EmptyLiteral instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EmptyLiteral.create = function (model) {
            return internal.instancehelpers.createElement(model, EmptyLiteral);
        };
        /** @internal */
        EmptyLiteral.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EmptyLiteral.structureTypeName = "Expressions$EmptyLiteral";
        EmptyLiteral.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EmptyLiteral;
    }(LiteralExpression));
    expressions.EmptyLiteral = EmptyLiteral;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var EnumerationValueRefExpression = /** @class */ (function (_super) {
        __extends(EnumerationValueRefExpression, _super);
        function EnumerationValueRefExpression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.ByNameReferenceProperty(EnumerationValueRefExpression, _this, "value", null, "Enumerations$EnumerationValue");
            if (arguments.length < 4) {
                throw new Error("new EnumerationValueRefExpression() cannot be invoked directly, please use 'model.expressions.createEnumerationValueRefExpression()'");
            }
            return _this;
        }
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValueRefExpression.prototype, "valueQualifiedName", {
            get: function () { return this.__value.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "left", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "right", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "arguments", true);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "condition", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "ifFalse", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "ifTrue", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "expression", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "expression", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "initialValueModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "returnValueModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "customLocationModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "password", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "username", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "nodeModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * The new EnumerationValueRefExpression will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationValueRefExpression.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, EnumerationValueRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationValueRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new EnumerationValueRefExpression instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EnumerationValueRefExpression.create = function (model) {
            return internal.instancehelpers.createElement(model, EnumerationValueRefExpression);
        };
        /** @internal */
        EnumerationValueRefExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EnumerationValueRefExpression.structureTypeName = "Expressions$EnumerationValueRefExpression";
        EnumerationValueRefExpression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "properties": {
                "value": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EnumerationValueRefExpression;
    }(Expression));
    expressions.EnumerationValueRefExpression = EnumerationValueRefExpression;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var FloatLiteral = /** @class */ (function (_super) {
        __extends(FloatLiteral, _super);
        function FloatLiteral(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(FloatLiteral, _this, "value", 0, internal.PrimitiveTypeEnum.Double);
            if (arguments.length < 4) {
                throw new Error("new FloatLiteral() cannot be invoked directly, please use 'model.expressions.createFloatLiteral()'");
            }
            return _this;
        }
        Object.defineProperty(FloatLiteral.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatLiteral.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "left", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "right", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "arguments", true);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "condition", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "ifFalse", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "ifTrue", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "expression", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "expression", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "initialValueModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "returnValueModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "customLocationModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "password", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "username", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "nodeModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * The new FloatLiteral will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatLiteral.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, FloatLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new FloatLiteral instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FloatLiteral.create = function (model) {
            return internal.instancehelpers.createElement(model, FloatLiteral);
        };
        /** @internal */
        FloatLiteral.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        FloatLiteral.structureTypeName = "Expressions$FloatLiteral";
        FloatLiteral.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return FloatLiteral;
    }(LiteralExpression));
    expressions.FloatLiteral = FloatLiteral;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var FunctionCallExpression = /** @class */ (function (_super) {
        __extends(FunctionCallExpression, _super);
        function FunctionCallExpression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__functionName = new internal.PrimitiveProperty(FunctionCallExpression, _this, "functionName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__arguments = new internal.PartListProperty(FunctionCallExpression, _this, "arguments", []);
            if (arguments.length < 4) {
                throw new Error("new FunctionCallExpression() cannot be invoked directly, please use 'model.expressions.createFunctionCallExpression()'");
            }
            return _this;
        }
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "functionName", {
            get: function () { return this.__functionName.get(); },
            set: function (newValue) { this.__functionName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionCallExpression.prototype, "arguments", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__arguments.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "left", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "right", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "arguments", true);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "condition", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "ifFalse", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "ifTrue", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "expression", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "expression", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "initialValueModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "returnValueModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "customLocationModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "password", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "username", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "nodeModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * The new FunctionCallExpression will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FunctionCallExpression.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, FunctionCallExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FunctionCallExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new FunctionCallExpression instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FunctionCallExpression.create = function (model) {
            return internal.instancehelpers.createElement(model, FunctionCallExpression);
        };
        /** @internal */
        FunctionCallExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        FunctionCallExpression.structureTypeName = "Expressions$FunctionCallExpression";
        FunctionCallExpression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return FunctionCallExpression;
    }(Expression));
    expressions.FunctionCallExpression = FunctionCallExpression;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var VariableRef = /** @class */ (function (_super) {
        __extends(VariableRef, _super);
        function VariableRef(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new VariableRef() cannot be invoked directly, please use 'model.expressions.createVariableRef()'");
            }
            return _this;
        }
        Object.defineProperty(VariableRef.prototype, "containerAsVariableRefExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, VariableRefExpression); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        VariableRef.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        VariableRef.structureTypeName = "Expressions$VariableRef";
        VariableRef.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return VariableRef;
    }(internal.Element));
    expressions.VariableRef = VariableRef;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var GlobalVariableRef = /** @class */ (function (_super) {
        __extends(GlobalVariableRef, _super);
        function GlobalVariableRef(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__referredName = new internal.PrimitiveProperty(GlobalVariableRef, _this, "referredName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new GlobalVariableRef() cannot be invoked directly, please use 'model.expressions.createGlobalVariableRef()'");
            }
            return _this;
        }
        Object.defineProperty(GlobalVariableRef.prototype, "containerAsVariableRefExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, VariableRefExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GlobalVariableRef.prototype, "referredName", {
            get: function () { return this.__referredName.get(); },
            set: function (newValue) { this.__referredName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GlobalVariableRef instance in the SDK and on the server.
         * The new GlobalVariableRef will be automatically stored in the 'variable' property
         * of the parent VariableRefExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        GlobalVariableRef.createIn = function (container) {
            internal.createInVersionCheck(container.model, GlobalVariableRef.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, GlobalVariableRef, "variable", false);
        };
        /**
         * Creates and returns a new GlobalVariableRef instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GlobalVariableRef.create = function (model) {
            return internal.instancehelpers.createElement(model, GlobalVariableRef);
        };
        /** @internal */
        GlobalVariableRef.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        GlobalVariableRef.structureTypeName = "Expressions$GlobalVariableRef";
        GlobalVariableRef.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return GlobalVariableRef;
    }(VariableRef));
    expressions.GlobalVariableRef = GlobalVariableRef;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var IfExpression = /** @class */ (function (_super) {
        __extends(IfExpression, _super);
        function IfExpression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__condition = new internal.PartProperty(IfExpression, _this, "condition", null, true);
            /** @internal */
            _this.__ifTrue = new internal.PartProperty(IfExpression, _this, "ifTrue", null, true);
            /** @internal */
            _this.__ifFalse = new internal.PartProperty(IfExpression, _this, "ifFalse", null, true);
            if (arguments.length < 4) {
                throw new Error("new IfExpression() cannot be invoked directly, please use 'model.expressions.createIfExpression()'");
            }
            return _this;
        }
        Object.defineProperty(IfExpression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "condition", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__condition.get(); },
            set: function (newValue) { this.__condition.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "ifTrue", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__ifTrue.get(); },
            set: function (newValue) { this.__ifTrue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IfExpression.prototype, "ifFalse", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__ifFalse.get(); },
            set: function (newValue) { this.__ifFalse.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "left", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "right", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "arguments", true);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "condition", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "ifFalse", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "ifTrue", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "expression", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "expression", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "initialValueModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "returnValueModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "customLocationModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "password", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "username", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "nodeModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * The new IfExpression will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IfExpression.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, IfExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IfExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new IfExpression instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        IfExpression.create = function (model) {
            return internal.instancehelpers.createElement(model, IfExpression);
        };
        /** @internal */
        IfExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.condition = NoExpression.create(this.model);
            this.ifFalse = NoExpression.create(this.model);
            this.ifTrue = NoExpression.create(this.model);
        };
        IfExpression.structureTypeName = "Expressions$IfExpression";
        IfExpression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "properties": {
                "condition": {
                    "required": {
                        "currentValue": true
                    }
                },
                "ifTrue": {
                    "required": {
                        "currentValue": true
                    }
                },
                "ifFalse": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return IfExpression;
    }(Expression));
    expressions.IfExpression = IfExpression;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var IntegerLiteral = /** @class */ (function (_super) {
        __extends(IntegerLiteral, _super);
        function IntegerLiteral(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(IntegerLiteral, _this, "value", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new IntegerLiteral() cannot be invoked directly, please use 'model.expressions.createIntegerLiteral()'");
            }
            return _this;
        }
        Object.defineProperty(IntegerLiteral.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerLiteral.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "left", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "right", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "arguments", true);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "condition", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "ifFalse", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "ifTrue", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "expression", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "expression", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "initialValueModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "returnValueModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "customLocationModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "password", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "username", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "nodeModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * The new IntegerLiteral will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerLiteral.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, IntegerLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new IntegerLiteral instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        IntegerLiteral.create = function (model) {
            return internal.instancehelpers.createElement(model, IntegerLiteral);
        };
        /** @internal */
        IntegerLiteral.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        IntegerLiteral.structureTypeName = "Expressions$IntegerLiteral";
        IntegerLiteral.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return IntegerLiteral;
    }(LiteralExpression));
    expressions.IntegerLiteral = IntegerLiteral;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var NoExpression = /** @class */ (function (_super) {
        __extends(NoExpression, _super);
        function NoExpression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new NoExpression() cannot be invoked directly, please use 'model.expressions.createNoExpression()'");
            }
            return _this;
        }
        Object.defineProperty(NoExpression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoExpression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "left", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "right", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "arguments", true);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "condition", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "ifFalse", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "ifTrue", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "expression", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "expression", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "initialValueModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "returnValueModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "customLocationModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "password", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "username", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "nodeModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * The new NoExpression will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoExpression.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, NoExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new NoExpression instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NoExpression.create = function (model) {
            return internal.instancehelpers.createElement(model, NoExpression);
        };
        /** @internal */
        NoExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NoExpression.structureTypeName = "Expressions$NoExpression";
        NoExpression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return NoExpression;
    }(Expression));
    expressions.NoExpression = NoExpression;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var NoVariableRef = /** @class */ (function (_super) {
        __extends(NoVariableRef, _super);
        function NoVariableRef(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new NoVariableRef() cannot be invoked directly, please use 'model.expressions.createNoVariableRef()'");
            }
            return _this;
        }
        Object.defineProperty(NoVariableRef.prototype, "containerAsVariableRefExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, VariableRefExpression); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NoVariableRef instance in the SDK and on the server.
         * The new NoVariableRef will be automatically stored in the 'variable' property
         * of the parent VariableRefExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NoVariableRef.createIn = function (container) {
            internal.createInVersionCheck(container.model, NoVariableRef.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NoVariableRef, "variable", false);
        };
        /**
         * Creates and returns a new NoVariableRef instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NoVariableRef.create = function (model) {
            return internal.instancehelpers.createElement(model, NoVariableRef);
        };
        /** @internal */
        NoVariableRef.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NoVariableRef.structureTypeName = "Expressions$NoVariableRef";
        NoVariableRef.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return NoVariableRef;
    }(VariableRef));
    expressions.NoVariableRef = NoVariableRef;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var ParenthesisExpression = /** @class */ (function (_super) {
        __extends(ParenthesisExpression, _super);
        function ParenthesisExpression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__expression = new internal.PartProperty(ParenthesisExpression, _this, "expression", null, true);
            if (arguments.length < 4) {
                throw new Error("new ParenthesisExpression() cannot be invoked directly, please use 'model.expressions.createParenthesisExpression()'");
            }
            return _this;
        }
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParenthesisExpression.prototype, "expression", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__expression.get(); },
            set: function (newValue) { this.__expression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "left", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "right", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "arguments", true);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "condition", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "ifFalse", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "ifTrue", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "expression", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "expression", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "initialValueModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "returnValueModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "customLocationModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "password", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "username", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "nodeModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * The new ParenthesisExpression will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ParenthesisExpression.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, ParenthesisExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ParenthesisExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new ParenthesisExpression instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ParenthesisExpression.create = function (model) {
            return internal.instancehelpers.createElement(model, ParenthesisExpression);
        };
        /** @internal */
        ParenthesisExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.expression = NoExpression.create(this.model);
        };
        ParenthesisExpression.structureTypeName = "Expressions$ParenthesisExpression";
        ParenthesisExpression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "properties": {
                "expression": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ParenthesisExpression;
    }(Expression));
    expressions.ParenthesisExpression = ParenthesisExpression;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var StringLiteral = /** @class */ (function (_super) {
        __extends(StringLiteral, _super);
        function StringLiteral(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(StringLiteral, _this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new StringLiteral() cannot be invoked directly, please use 'model.expressions.createStringLiteral()'");
            }
            return _this;
        }
        Object.defineProperty(StringLiteral.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringLiteral.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "left", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "right", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "arguments", true);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "condition", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "ifFalse", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "ifTrue", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "expression", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "expression", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "initialValueModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "returnValueModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "customLocationModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "password", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "username", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "nodeModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "argumentModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "expressionModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * The new StringLiteral will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringLiteral.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, StringLiteral.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringLiteral, "valueModel", false);
        };
        /**
         * Creates and returns a new StringLiteral instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StringLiteral.create = function (model) {
            return internal.instancehelpers.createElement(model, StringLiteral);
        };
        /** @internal */
        StringLiteral.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        StringLiteral.structureTypeName = "Expressions$StringLiteral";
        StringLiteral.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return StringLiteral;
    }(LiteralExpression));
    expressions.StringLiteral = StringLiteral;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var UnaryExpression = /** @class */ (function (_super) {
        __extends(UnaryExpression, _super);
        function UnaryExpression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__operator = new internal.EnumProperty(UnaryExpression, _this, "operator", UnaryOperator.None, UnaryOperator);
            /** @internal */
            _this.__expression = new internal.PartProperty(UnaryExpression, _this, "expression", null, true);
            if (arguments.length < 4) {
                throw new Error("new UnaryExpression() cannot be invoked directly, please use 'model.expressions.createUnaryExpression()'");
            }
            return _this;
        }
        Object.defineProperty(UnaryExpression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "operator", {
            get: function () { return this.__operator.get(); },
            set: function (newValue) { this.__operator.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnaryExpression.prototype, "expression", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__expression.get(); },
            set: function (newValue) { this.__expression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "left", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "right", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "arguments", true);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "condition", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "ifFalse", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "ifTrue", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "expression", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "expression", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "initialValueModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "returnValueModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "customLocationModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "password", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "username", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "nodeModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * The new UnaryExpression will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnaryExpression.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnaryExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnaryExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new UnaryExpression instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        UnaryExpression.create = function (model) {
            return internal.instancehelpers.createElement(model, UnaryExpression);
        };
        /** @internal */
        UnaryExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.expression = NoExpression.create(this.model);
            this.operator = UnaryOperator.None;
        };
        UnaryExpression.structureTypeName = "Expressions$UnaryExpression";
        UnaryExpression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "properties": {
                "expression": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return UnaryExpression;
    }(Expression));
    expressions.UnaryExpression = UnaryExpression;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var UnparsableExpression = /** @class */ (function (_super) {
        __extends(UnparsableExpression, _super);
        function UnparsableExpression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__expression = new internal.PrimitiveProperty(UnparsableExpression, _this, "expression", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new UnparsableExpression() cannot be invoked directly, please use 'model.expressions.createUnparsableExpression()'");
            }
            return _this;
        }
        Object.defineProperty(UnparsableExpression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnparsableExpression.prototype, "expression", {
            get: function () { return this.__expression.get(); },
            set: function (newValue) { this.__expression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "left", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "right", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "arguments", true);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "condition", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "ifFalse", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "ifTrue", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "expression", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "expression", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "initialValueModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "returnValueModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "customLocationModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "password", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "username", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "nodeModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * The new UnparsableExpression will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnparsableExpression.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, UnparsableExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnparsableExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new UnparsableExpression instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        UnparsableExpression.create = function (model) {
            return internal.instancehelpers.createElement(model, UnparsableExpression);
        };
        /** @internal */
        UnparsableExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        UnparsableExpression.structureTypeName = "Expressions$UnparsableExpression";
        UnparsableExpression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return UnparsableExpression;
    }(Expression));
    expressions.UnparsableExpression = UnparsableExpression;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var VariableRefExpression = /** @class */ (function (_super) {
        __extends(VariableRefExpression, _super);
        function VariableRefExpression(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__variable = new internal.PartProperty(VariableRefExpression, _this, "variable", null, true);
            /** @internal */
            _this.__member = new internal.PartProperty(VariableRefExpression, _this, "member", null, false);
            if (arguments.length < 4) {
                throw new Error("new VariableRefExpression() cannot be invoked directly, please use 'model.expressions.createVariableRefExpression()'");
            }
            return _this;
        }
        Object.defineProperty(VariableRefExpression.prototype, "containerAsBinaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, BinaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsFunctionCallExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, FunctionCallExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsIfExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, IfExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsParenthesisExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, ParenthesisExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsUnaryExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, UnaryExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsAppServiceCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.AppServiceCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsBasicJavaActionParameterValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BasicJavaActionParameterValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsBinaryRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.BinaryRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsChangeListAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeListAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsChangeVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ChangeVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsCustomRange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CustomRange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsDocumentTemplateParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.DocumentTemplateParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsEndEvent", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.EndEvent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsExpressionSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ExpressionSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsHttpHeaderEntry", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.HttpHeaderEntry); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsInspectAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.InspectAttribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsMemberChange", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MemberChange); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsMicroflowCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsRuleCallParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.RuleCallParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsTemplateArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TemplateArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsWebServiceOperationParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.WebServiceOperationParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsConditionalSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConditionalSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsWidgetValidation", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.WidgetValidation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "containerAsExpressionValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.ExpressionValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "variable", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__variable.get(); },
            set: function (newValue) { this.__variable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableRefExpression.prototype, "member", {
            /**
             * In version 7.11.0: introduced
             */
            get: function () { return this.__member.get(); },
            set: function (newValue) { this.__member.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'left' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInBinaryExpressionUnderLeft = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "left", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'right' property
         * of the parent BinaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInBinaryExpressionUnderRight = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "right", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'arguments' property
         * of the parent FunctionCallExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInFunctionCallExpressionUnderArguments = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "arguments", true);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'condition' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInIfExpressionUnderCondition = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "condition", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'ifFalse' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInIfExpressionUnderIfFalse = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "ifFalse", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'ifTrue' property
         * of the parent IfExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInIfExpressionUnderIfTrue = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "ifTrue", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'expression' property
         * of the parent ParenthesisExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInParenthesisExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "expression", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'expression' property
         * of the parent UnaryExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInUnaryExpressionUnderExpression = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "expression", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.AppServiceCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInAppServiceCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.BasicJavaActionParameterValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInBasicJavaActionParameterValueUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.BinaryRequestHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInBinaryRequestHandlingUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeListAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInChangeListActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.ChangeVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInChangeVariableActionUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'initialValueModel' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInCreateVariableActionUnderInitialValueModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "initialValueModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'limitExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInCustomRangeUnderLimitExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "limitExpressionModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'offsetExpressionModel' property
         * of the parent microflows.CustomRange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInCustomRangeUnderOffsetExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "offsetExpressionModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.DocumentTemplateParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInDocumentTemplateParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'returnValueModel' property
         * of the parent microflows.EndEvent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInEndEventUnderReturnValueModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "returnValueModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.ExpressionSplitCondition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInExpressionSplitConditionUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'marginBottomInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInGenerateDocumentActionUnderMarginBottomInInchModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "marginBottomInInchModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'marginLeftInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInGenerateDocumentActionUnderMarginLeftInInchModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "marginLeftInInchModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'marginRightInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInGenerateDocumentActionUnderMarginRightInInchModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "marginRightInInchModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'marginTopInInchModel' property
         * of the parent microflows.GenerateDocumentAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInGenerateDocumentActionUnderMarginTopInInchModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "marginTopInInchModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'customLocationModel' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInHttpConfigurationUnderCustomLocationModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "customLocationModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'password' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInHttpConfigurationUnderPassword = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "password", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'username' property
         * of the parent microflows.HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInHttpConfigurationUnderUsername = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "username", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.HttpHeaderEntry element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInHttpHeaderEntryUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.InspectAttribute element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInInspectAttributeUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'nodeModel' property
         * of the parent microflows.LogMessageAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInLogMessageActionUnderNodeModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "nodeModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'valueModel' property
         * of the parent microflows.MemberChange element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInMemberChangeUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.MicroflowCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInMicroflowCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.RuleCallParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInRuleCallParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent microflows.TemplateArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInTemplateArgumentUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'argumentModel' property
         * of the parent microflows.WebServiceOperationParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInWebServiceOperationParameterMappingUnderArgumentModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "argumentModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInConditionalSettingsUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'expressionModel' property
         * of the parent pages.WidgetValidation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInWidgetValidationUnderExpressionModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "expressionModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * The new VariableRefExpression will be automatically stored in the 'valueModel' property
         * of the parent pluginwidgets.ExpressionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VariableRefExpression.createInExpressionValueUnderValueModel = function (container) {
            internal.createInVersionCheck(container.model, VariableRefExpression.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VariableRefExpression, "valueModel", false);
        };
        /**
         * Creates and returns a new VariableRefExpression instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        VariableRefExpression.create = function (model) {
            return internal.instancehelpers.createElement(model, VariableRefExpression);
        };
        /** @internal */
        VariableRefExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.variable = NoVariableRef.create(this.model);
        };
        VariableRefExpression.structureTypeName = "Expressions$VariableRefExpression";
        VariableRefExpression.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "properties": {
                "variable": {
                    "required": {
                        "currentValue": true
                    }
                },
                "member": {
                    "introduced": "7.11.0"
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return VariableRefExpression;
    }(Expression));
    expressions.VariableRefExpression = VariableRefExpression;
})(expressions = exports.expressions || (exports.expressions = {}));
var microflows_1 = require("./microflows");
var pages_1 = require("./pages");
var pluginwidgets_1 = require("./pluginwidgets");
//# sourceMappingURL=expressions.js.map