"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var mappings_1 = require("./mappings");
var projects_1 = require("./projects");
var messagedefinitions;
(function (messagedefinitions) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `MessageDefinitions`.
     */
    /**
     * In version 7.10.0: introduced
     */
    var AssociationElement = /** @class */ (function (_super) {
        __extends(AssociationElement, _super);
        function AssociationElement(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new AssociationElement() cannot be invoked directly, please use 'model.messagedefinitions.createAssociationElement()'");
            }
            return _this;
        }
        Object.defineProperty(AssociationElement.prototype, "containerAsJsonStructure", {
            get: function () { return _super.prototype.getContainerAs.call(this, jsonstructures_1.jsonstructures.JsonStructure); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationElement.prototype, "containerAsElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.Element); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AssociationElement instance in the SDK and on the server.
         * The new AssociationElement will be automatically stored in the 'elements' property
         * of the parent jsonstructures.JsonStructure element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.10.0 and higher
         */
        AssociationElement.createInJsonStructureUnderElements = function (container) {
            internal.createInVersionCheck(container.model, AssociationElement.structureTypeName, { start: "7.10.0" });
            return internal.instancehelpers.createElement(container, AssociationElement, "elements", true);
        };
        /**
         * Creates and returns a new AssociationElement instance in the SDK and on the server.
         * The new AssociationElement will be automatically stored in the 'children' property
         * of the parent mappings.Element element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.10.0 and higher
         */
        AssociationElement.createInElementUnderChildren = function (container) {
            internal.createInVersionCheck(container.model, AssociationElement.structureTypeName, { start: "7.10.0" });
            return internal.instancehelpers.createElement(container, AssociationElement, "children", true);
        };
        /**
         * Creates and returns a new AssociationElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AssociationElement.create = function (model) {
            return internal.instancehelpers.createElement(model, AssociationElement);
        };
        /** @internal */
        AssociationElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AssociationElement.structureTypeName = "MessageDefinitions$AssociationElement";
        AssociationElement.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.10.0"
        }, internal.StructureType.Element);
        return AssociationElement;
    }(mappings_1.mappings.Element));
    messagedefinitions.AssociationElement = AssociationElement;
    /**
     * In version 7.6.0: introduced
     */
    var AttributeElement = /** @class */ (function (_super) {
        __extends(AttributeElement, _super);
        function AttributeElement(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new AttributeElement() cannot be invoked directly, please use 'model.messagedefinitions.createAttributeElement()'");
            }
            return _this;
        }
        Object.defineProperty(AttributeElement.prototype, "containerAsJsonStructure", {
            get: function () { return _super.prototype.getContainerAs.call(this, jsonstructures_1.jsonstructures.JsonStructure); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeElement.prototype, "containerAsElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.Element); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AttributeElement instance in the SDK and on the server.
         * The new AttributeElement will be automatically stored in the 'elements' property
         * of the parent jsonstructures.JsonStructure element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        AttributeElement.createInJsonStructureUnderElements = function (container) {
            internal.createInVersionCheck(container.model, AttributeElement.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, AttributeElement, "elements", true);
        };
        /**
         * Creates and returns a new AttributeElement instance in the SDK and on the server.
         * The new AttributeElement will be automatically stored in the 'children' property
         * of the parent mappings.Element element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        AttributeElement.createInElementUnderChildren = function (container) {
            internal.createInVersionCheck(container.model, AttributeElement.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, AttributeElement, "children", true);
        };
        /**
         * Creates and returns a new AttributeElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AttributeElement.create = function (model) {
            return internal.instancehelpers.createElement(model, AttributeElement);
        };
        /** @internal */
        AttributeElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AttributeElement.structureTypeName = "MessageDefinitions$AttributeElement";
        AttributeElement.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0"
        }, internal.StructureType.Element);
        return AttributeElement;
    }(mappings_1.mappings.Element));
    messagedefinitions.AttributeElement = AttributeElement;
    /**
     * In version 7.6.0: introduced
     */
    var EntityElement = /** @class */ (function (_super) {
        __extends(EntityElement, _super);
        function EntityElement(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new EntityElement() cannot be invoked directly, please use 'model.messagedefinitions.createEntityElement()'");
            }
            return _this;
        }
        Object.defineProperty(EntityElement.prototype, "containerAsJsonStructure", {
            get: function () { return _super.prototype.getContainerAs.call(this, jsonstructures_1.jsonstructures.JsonStructure); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityElement.prototype, "containerAsElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.Element); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EntityElement instance in the SDK and on the server.
         * The new EntityElement will be automatically stored in the 'elements' property
         * of the parent jsonstructures.JsonStructure element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        EntityElement.createInJsonStructureUnderElements = function (container) {
            internal.createInVersionCheck(container.model, EntityElement.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, EntityElement, "elements", true);
        };
        /**
         * Creates and returns a new EntityElement instance in the SDK and on the server.
         * The new EntityElement will be automatically stored in the 'children' property
         * of the parent mappings.Element element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        EntityElement.createInElementUnderChildren = function (container) {
            internal.createInVersionCheck(container.model, EntityElement.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, EntityElement, "children", true);
        };
        /**
         * Creates and returns a new EntityElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EntityElement.create = function (model) {
            return internal.instancehelpers.createElement(model, EntityElement);
        };
        /** @internal */
        EntityElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EntityElement.structureTypeName = "MessageDefinitions$EntityElement";
        EntityElement.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0"
        }, internal.StructureType.Element);
        return EntityElement;
    }(mappings_1.mappings.Element));
    messagedefinitions.EntityElement = EntityElement;
    /**
     * In version 7.6.0: introduced
     */
    var MessageDefinition = /** @class */ (function (_super) {
        __extends(MessageDefinition, _super);
        function MessageDefinition(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(MessageDefinition, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__documentation = new internal.PrimitiveProperty(MessageDefinition, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new MessageDefinition() cannot be invoked directly, please use 'model.messagedefinitions.createMessageDefinition()'");
            }
            return _this;
        }
        Object.defineProperty(MessageDefinition.prototype, "containerAsMessageDefinitionCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MessageDefinitionCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MessageDefinition.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MessageDefinition.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        MessageDefinition.prototype._isByNameReferrable = function () { return true; };
        Object.defineProperty(MessageDefinition.prototype, "qualifiedName", {
            get: function () {
                return this._getQualifiedName();
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        MessageDefinition.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MessageDefinition.structureTypeName = "MessageDefinitions$MessageDefinition";
        MessageDefinition.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0",
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return MessageDefinition;
    }(internal.Element));
    messagedefinitions.MessageDefinition = MessageDefinition;
    /**
     * In version 7.6.0: introduced
     */
    var EntityMessageDefinition = /** @class */ (function (_super) {
        __extends(EntityMessageDefinition, _super);
        function EntityMessageDefinition(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__exposedEntity = new internal.PartProperty(EntityMessageDefinition, _this, "exposedEntity", null, false);
            if (arguments.length < 4) {
                throw new Error("new EntityMessageDefinition() cannot be invoked directly, please use 'model.messagedefinitions.createEntityMessageDefinition()'");
            }
            return _this;
        }
        Object.defineProperty(EntityMessageDefinition.prototype, "containerAsMessageDefinitionCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MessageDefinitionCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityMessageDefinition.prototype, "exposedEntity", {
            get: function () { return this.__exposedEntity.get(); },
            set: function (newValue) { this.__exposedEntity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EntityMessageDefinition instance in the SDK and on the server.
         * The new EntityMessageDefinition will be automatically stored in the 'messageDefinitions' property
         * of the parent MessageDefinitionCollection element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        EntityMessageDefinition.createIn = function (container) {
            internal.createInVersionCheck(container.model, EntityMessageDefinition.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, EntityMessageDefinition, "messageDefinitions", true);
        };
        /**
         * Creates and returns a new EntityMessageDefinition instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EntityMessageDefinition.create = function (model) {
            return internal.instancehelpers.createElement(model, EntityMessageDefinition);
        };
        /** @internal */
        EntityMessageDefinition.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EntityMessageDefinition.structureTypeName = "MessageDefinitions$EntityMessageDefinition";
        EntityMessageDefinition.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EntityMessageDefinition;
    }(MessageDefinition));
    messagedefinitions.EntityMessageDefinition = EntityMessageDefinition;
    /**
     * In version 7.6.0: introduced
     */
    var ExposedMember = /** @class */ (function (_super) {
        __extends(ExposedMember, _super);
        function ExposedMember(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__originalName = new internal.PrimitiveProperty(ExposedMember, _this, "originalName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ExposedMember() cannot be invoked directly, please use 'model.messagedefinitions.createExposedMember()'");
            }
            return _this;
        }
        Object.defineProperty(ExposedMember.prototype, "containerAsJsonStructure", {
            get: function () { return _super.prototype.getContainerAs.call(this, jsonstructures_1.jsonstructures.JsonStructure); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedMember.prototype, "containerAsElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.Element); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedMember.prototype, "containerAsEntityMessageDefinition", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityMessageDefinition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedMember.prototype, "originalName", {
            get: function () { return this.__originalName.get(); },
            set: function (newValue) { this.__originalName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        ExposedMember.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ExposedMember.structureTypeName = "MessageDefinitions$ExposedMember";
        ExposedMember.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0"
        }, internal.StructureType.Element);
        return ExposedMember;
    }(mappings_1.mappings.Element));
    messagedefinitions.ExposedMember = ExposedMember;
    /**
     * In version 7.6.0: introduced
     */
    var ExposedEntityBase = /** @class */ (function (_super) {
        __extends(ExposedEntityBase, _super);
        function ExposedEntityBase(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__entity = new internal.ByNameReferenceProperty(ExposedEntityBase, _this, "entity", null, "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new ExposedEntityBase() cannot be invoked directly, please use 'model.messagedefinitions.createExposedEntityBase()'");
            }
            return _this;
        }
        Object.defineProperty(ExposedEntityBase.prototype, "containerAsJsonStructure", {
            get: function () { return _super.prototype.getContainerAs.call(this, jsonstructures_1.jsonstructures.JsonStructure); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedEntityBase.prototype, "containerAsElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.Element); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedEntityBase.prototype, "containerAsEntityMessageDefinition", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityMessageDefinition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedEntityBase.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedEntityBase.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        ExposedEntityBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ExposedEntityBase.structureTypeName = "MessageDefinitions$ExposedEntityBase";
        ExposedEntityBase.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0",
            "properties": {
                "entity": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ExposedEntityBase;
    }(ExposedMember));
    messagedefinitions.ExposedEntityBase = ExposedEntityBase;
    /**
     * In version 7.6.0: introduced
     */
    var ExposedAssociation = /** @class */ (function (_super) {
        __extends(ExposedAssociation, _super);
        function ExposedAssociation(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__association = new internal.ByNameReferenceProperty(ExposedAssociation, _this, "association", null, "DomainModels$AssociationBase");
            if (arguments.length < 4) {
                throw new Error("new ExposedAssociation() cannot be invoked directly, please use 'model.messagedefinitions.createExposedAssociation()'");
            }
            return _this;
        }
        Object.defineProperty(ExposedAssociation.prototype, "containerAsJsonStructure", {
            get: function () { return _super.prototype.getContainerAs.call(this, jsonstructures_1.jsonstructures.JsonStructure); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedAssociation.prototype, "containerAsElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.Element); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedAssociation.prototype, "association", {
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedAssociation.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ExposedAssociation instance in the SDK and on the server.
         * The new ExposedAssociation will be automatically stored in the 'elements' property
         * of the parent jsonstructures.JsonStructure element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        ExposedAssociation.createInJsonStructureUnderElements = function (container) {
            internal.createInVersionCheck(container.model, ExposedAssociation.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ExposedAssociation, "elements", true);
        };
        /**
         * Creates and returns a new ExposedAssociation instance in the SDK and on the server.
         * The new ExposedAssociation will be automatically stored in the 'children' property
         * of the parent mappings.Element element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        ExposedAssociation.createInElementUnderChildren = function (container) {
            internal.createInVersionCheck(container.model, ExposedAssociation.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ExposedAssociation, "children", true);
        };
        /**
         * Creates and returns a new ExposedAssociation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExposedAssociation.create = function (model) {
            return internal.instancehelpers.createElement(model, ExposedAssociation);
        };
        /** @internal */
        ExposedAssociation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ExposedAssociation.structureTypeName = "MessageDefinitions$ExposedAssociation";
        ExposedAssociation.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0",
            "properties": {
                "association": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ExposedAssociation;
    }(ExposedEntityBase));
    messagedefinitions.ExposedAssociation = ExposedAssociation;
    /**
     * In version 7.6.0: introduced
     */
    var ExposedAttribute = /** @class */ (function (_super) {
        __extends(ExposedAttribute, _super);
        function ExposedAttribute(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__attribute = new internal.ByNameReferenceProperty(ExposedAttribute, _this, "attribute", null, "DomainModels$Attribute");
            if (arguments.length < 4) {
                throw new Error("new ExposedAttribute() cannot be invoked directly, please use 'model.messagedefinitions.createExposedAttribute()'");
            }
            return _this;
        }
        Object.defineProperty(ExposedAttribute.prototype, "containerAsJsonStructure", {
            get: function () { return _super.prototype.getContainerAs.call(this, jsonstructures_1.jsonstructures.JsonStructure); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedAttribute.prototype, "containerAsElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.Element); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedAttribute.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedAttribute.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ExposedAttribute instance in the SDK and on the server.
         * The new ExposedAttribute will be automatically stored in the 'elements' property
         * of the parent jsonstructures.JsonStructure element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        ExposedAttribute.createInJsonStructureUnderElements = function (container) {
            internal.createInVersionCheck(container.model, ExposedAttribute.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ExposedAttribute, "elements", true);
        };
        /**
         * Creates and returns a new ExposedAttribute instance in the SDK and on the server.
         * The new ExposedAttribute will be automatically stored in the 'children' property
         * of the parent mappings.Element element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        ExposedAttribute.createInElementUnderChildren = function (container) {
            internal.createInVersionCheck(container.model, ExposedAttribute.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ExposedAttribute, "children", true);
        };
        /**
         * Creates and returns a new ExposedAttribute instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExposedAttribute.create = function (model) {
            return internal.instancehelpers.createElement(model, ExposedAttribute);
        };
        /** @internal */
        ExposedAttribute.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ExposedAttribute.structureTypeName = "MessageDefinitions$ExposedAttribute";
        ExposedAttribute.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0",
            "properties": {
                "attribute": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ExposedAttribute;
    }(ExposedMember));
    messagedefinitions.ExposedAttribute = ExposedAttribute;
    /**
     * In version 7.6.0: introduced
     */
    var ExposedEntity = /** @class */ (function (_super) {
        __extends(ExposedEntity, _super);
        function ExposedEntity(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ExposedEntity() cannot be invoked directly, please use 'model.messagedefinitions.createExposedEntity()'");
            }
            return _this;
        }
        Object.defineProperty(ExposedEntity.prototype, "containerAsJsonStructure", {
            get: function () { return _super.prototype.getContainerAs.call(this, jsonstructures_1.jsonstructures.JsonStructure); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedEntity.prototype, "containerAsElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.Element); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExposedEntity.prototype, "containerAsEntityMessageDefinition", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityMessageDefinition); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ExposedEntity instance in the SDK and on the server.
         * The new ExposedEntity will be automatically stored in the 'elements' property
         * of the parent jsonstructures.JsonStructure element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        ExposedEntity.createInJsonStructureUnderElements = function (container) {
            internal.createInVersionCheck(container.model, ExposedEntity.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ExposedEntity, "elements", true);
        };
        /**
         * Creates and returns a new ExposedEntity instance in the SDK and on the server.
         * The new ExposedEntity will be automatically stored in the 'children' property
         * of the parent mappings.Element element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        ExposedEntity.createInElementUnderChildren = function (container) {
            internal.createInVersionCheck(container.model, ExposedEntity.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ExposedEntity, "children", true);
        };
        /**
         * Creates and returns a new ExposedEntity instance in the SDK and on the server.
         * The new ExposedEntity will be automatically stored in the 'exposedEntity' property
         * of the parent EntityMessageDefinition element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        ExposedEntity.createInEntityMessageDefinitionUnderExposedEntity = function (container) {
            internal.createInVersionCheck(container.model, ExposedEntity.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ExposedEntity, "exposedEntity", false);
        };
        /**
         * Creates and returns a new ExposedEntity instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExposedEntity.create = function (model) {
            return internal.instancehelpers.createElement(model, ExposedEntity);
        };
        /** @internal */
        ExposedEntity.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ExposedEntity.structureTypeName = "MessageDefinitions$ExposedEntity";
        ExposedEntity.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0"
        }, internal.StructureType.Element);
        return ExposedEntity;
    }(ExposedEntityBase));
    messagedefinitions.ExposedEntity = ExposedEntity;
    /**
     * See: {@link https://docs.mendix.com/refguide7/message-definitions relevant section in reference guide}
     *
     * In version 7.6.0: introduced
     */
    var MessageDefinitionCollection = /** @class */ (function (_super) {
        __extends(MessageDefinitionCollection, _super);
        function MessageDefinitionCollection(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__messageDefinitions = new internal.PartListProperty(MessageDefinitionCollection, _this, "messageDefinitions", []);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(MessageDefinitionCollection.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MessageDefinitionCollection.prototype, "messageDefinitions", {
            get: function () { return this.__messageDefinitions.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new MessageDefinitionCollection unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        MessageDefinitionCollection.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, MessageDefinitionCollection);
        };
        /** @internal */
        MessageDefinitionCollection.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MessageDefinitionCollection.structureTypeName = "MessageDefinitions$MessageDefinitionCollection";
        MessageDefinitionCollection.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0",
            "properties": {
                "messageDefinitions": {
                    "public": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return MessageDefinitionCollection;
    }(projects_1.projects.Document));
    messagedefinitions.MessageDefinitionCollection = MessageDefinitionCollection;
})(messagedefinitions = exports.messagedefinitions || (exports.messagedefinitions = {}));
var jsonstructures_1 = require("./jsonstructures");
//# sourceMappingURL=messagedefinitions.js.map