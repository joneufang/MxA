"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require("./projects");
var images;
(function (images) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Images`.
     */
    var Image = /** @class */ (function (_super) {
        __extends(Image, _super);
        function Image(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(Image, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__imageData = new internal.PrimitiveProperty(Image, _this, "imageData", null, internal.PrimitiveTypeEnum.Blob);
            if (arguments.length < 4) {
                throw new Error("new Image() cannot be invoked directly, please use 'model.images.createImage()'");
            }
            return _this;
        }
        Object.defineProperty(Image.prototype, "containerAsImageCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, ImageCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "imageData", {
            get: function () { return this.__imageData.get(); },
            set: function (newValue) { this.__imageData.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Image instance in the SDK and on the server.
         * The new Image will be automatically stored in the 'images' property
         * of the parent ImageCollection element passed as argument.
         */
        Image.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Image, "images", true);
        };
        /**
         * Creates and returns a new Image instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Image.create = function (model) {
            return internal.instancehelpers.createElement(model, Image);
        };
        /** @internal */
        Image.prototype._isByNameReferrable = function () { return true; };
        Object.defineProperty(Image.prototype, "qualifiedName", {
            get: function () {
                return this._getQualifiedName();
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        Image.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Image.structureTypeName = "Images$Image";
        Image.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return Image;
    }(internal.Element));
    images.Image = Image;
    /**
     * See: {@link https://docs.mendix.com/refguide7/images relevant section in reference guide}
     */
    var ImageCollection = /** @class */ (function (_super) {
        __extends(ImageCollection, _super);
        function ImageCollection(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__images = new internal.PartListProperty(ImageCollection, _this, "images", []);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(ImageCollection.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageCollection.prototype, "images", {
            get: function () { return this.__images.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new ImageCollection unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        ImageCollection.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, ImageCollection);
        };
        /** @internal */
        ImageCollection.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ImageCollection.structureTypeName = "Images$ImageCollection";
        ImageCollection.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "images": {
                    "public": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return ImageCollection;
    }(projects_1.projects.Document));
    images.ImageCollection = ImageCollection;
})(images = exports.images || (exports.images = {}));
//# sourceMappingURL=images.js.map