"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects;
(function (projects) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Projects`.
     */
    var ModuleDocument = /** @class */ (function (_super) {
        __extends(ModuleDocument, _super);
        function ModuleDocument(model, structureTypeName, id, isPartial, container) {
            return _super.call(this, model, structureTypeName, id, isPartial, container) || this;
        }
        Object.defineProperty(ModuleDocument.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ModuleDocument.prototype, "containerAsModule", {
            get: function () { return _super.prototype.getContainerAs.call(this, Module); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        ModuleDocument.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ModuleDocument.structureTypeName = "Projects$ModuleDocument";
        ModuleDocument.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return ModuleDocument;
    }(internal.ModelUnit));
    projects.ModuleDocument = ModuleDocument;
    var Document = /** @class */ (function (_super) {
        __extends(Document, _super);
        function Document(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(Document, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__documentation = new internal.PrimitiveProperty(Document, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__excluded = new internal.PrimitiveProperty(Document, _this, "excluded", false, internal.PrimitiveTypeEnum.Boolean);
            _this._declaredAsNamespace = true;
            return _this;
        }
        Object.defineProperty(Document.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "excluded", {
            get: function () { return this.__excluded.get(); },
            set: function (newValue) { this.__excluded.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "qualifiedName", {
            get: function () {
                return this._getQualifiedName();
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        Document.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Document.structureTypeName = "Projects$Document";
        Document.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return Document;
    }(ModuleDocument));
    projects.Document = Document;
    var FolderBase = /** @class */ (function (_super) {
        __extends(FolderBase, _super);
        function FolderBase(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__folders = new internal.StructuralChildListProperty(FolderBase, _this, "folders", []);
            /** @internal */
            _this.__documents = new internal.StructuralChildListProperty(FolderBase, _this, "documents", []);
            return _this;
        }
        Object.defineProperty(FolderBase.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FolderBase.prototype, "containerAsProject", {
            get: function () { return _super.prototype.getContainerAs.call(this, Project); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FolderBase.prototype, "folders", {
            get: function () { return this.__folders.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FolderBase.prototype, "documents", {
            get: function () { return this.__documents.get(); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        FolderBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        FolderBase.structureTypeName = "Projects$FolderBase";
        FolderBase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.StructuralUnit);
        return FolderBase;
    }(internal.StructuralUnit));
    projects.FolderBase = FolderBase;
    /**
     * See: {@link https://world.mendix.com/display/howto50/Add+documents+to+a+module relevant section in reference guide}
     */
    var Folder = /** @class */ (function (_super) {
        __extends(Folder, _super);
        function Folder(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(Folder, _this, "name", "", internal.PrimitiveTypeEnum.String);
            _this._containmentName = "folders";
            return _this;
        }
        Object.defineProperty(Folder.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Folder.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Folder unit in the SDK and on the server.
         * Expects one argument, the IFolderBase in which this unit is contained.
         */
        Folder.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Folder);
        };
        /** @internal */
        Folder.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Folder.structureTypeName = "Projects$Folder";
        Folder.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.StructuralUnit);
        return Folder;
    }(FolderBase));
    projects.Folder = Folder;
    /**
     * See: {@link https://docs.mendix.com/refguide7/modules relevant section in reference guide}
     */
    var Module = /** @class */ (function (_super) {
        __extends(Module, _super);
        function Module(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__sortIndex = new internal.PrimitiveProperty(Module, _this, "sortIndex", 0, internal.PrimitiveTypeEnum.Double);
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(Module, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__domainModel = new internal.StructuralChildProperty(Module, _this, "domainModel", null);
            /** @internal */
            _this.__moduleSecurity = new internal.StructuralChildProperty(Module, _this, "moduleSecurity", null);
            /** @internal */
            _this.__fromAppStore = new internal.PrimitiveProperty(Module, _this, "fromAppStore", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__appStoreGuid = new internal.PrimitiveProperty(Module, _this, "appStoreGuid", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__appStoreVersionGuid = new internal.PrimitiveProperty(Module, _this, "appStoreVersionGuid", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__appStoreVersion = new internal.PrimitiveProperty(Module, _this, "appStoreVersion", "", internal.PrimitiveTypeEnum.String);
            _this._declaredAsNamespace = true;
            _this._containmentName = "modules";
            return _this;
        }
        Object.defineProperty(Module.prototype, "containerAsProject", {
            get: function () { return _super.prototype.getContainerAs.call(this, Project); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "sortIndex", {
            /**
             * The index of where this Module appears in the project.
             * This property is <em>required</em>, and of type double.
             * Also, its value needs to be unique among its siblings (meaning, in code: <tt>containerAsProject.modules</tt>) in the project.
             * In other words: <tt>containerAsProject.modules.map(m => m.sortedIndex)</tt> (TS syntax) needs to be a list with unique values.
             */
            get: function () { return this.__sortIndex.get(); },
            set: function (newValue) { this.__sortIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "domainModel", {
            get: function () { return this.__domainModel.get(); },
            set: function (newValue) { this.__domainModel.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "moduleSecurity", {
            get: function () { return this.__moduleSecurity.get(); },
            set: function (newValue) { this.__moduleSecurity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "fromAppStore", {
            get: function () { return this.__fromAppStore.get(); },
            set: function (newValue) { this.__fromAppStore.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "appStoreGuid", {
            get: function () { return this.__appStoreGuid.get(); },
            set: function (newValue) { this.__appStoreGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "appStoreVersionGuid", {
            get: function () { return this.__appStoreVersionGuid.get(); },
            set: function (newValue) { this.__appStoreVersionGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "appStoreVersion", {
            get: function () { return this.__appStoreVersion.get(); },
            set: function (newValue) { this.__appStoreVersion.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Module unit in the SDK and on the server.
         * Expects one argument, the IProject in which this unit is contained.
         */
        Module.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Module);
        };
        /** @internal */
        Module.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Module.structureTypeName = "Projects$Module";
        Module.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "domainModel": {
                    "required": {
                        "currentValue": true
                    }
                },
                "moduleSecurity": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.StructuralUnit);
        return Module;
    }(FolderBase));
    projects.Module = Module;
    var OneTimeConversionMarker = /** @class */ (function (_super) {
        __extends(OneTimeConversionMarker, _super);
        function OneTimeConversionMarker(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(OneTimeConversionMarker, _this, "name", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new OneTimeConversionMarker() cannot be invoked directly, please use 'model.projects.createOneTimeConversionMarker()'");
            }
            return _this;
        }
        Object.defineProperty(OneTimeConversionMarker.prototype, "containerAsProjectConversion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ProjectConversion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OneTimeConversionMarker.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new OneTimeConversionMarker instance in the SDK and on the server.
         * The new OneTimeConversionMarker will be automatically stored in the 'markers' property
         * of the parent ProjectConversion element passed as argument.
         */
        OneTimeConversionMarker.createIn = function (container) {
            return internal.instancehelpers.createElement(container, OneTimeConversionMarker, "markers", true);
        };
        /**
         * Creates and returns a new OneTimeConversionMarker instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OneTimeConversionMarker.create = function (model) {
            return internal.instancehelpers.createElement(model, OneTimeConversionMarker);
        };
        /** @internal */
        OneTimeConversionMarker.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        OneTimeConversionMarker.structureTypeName = "Projects$OneTimeConversionMarker";
        OneTimeConversionMarker.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return OneTimeConversionMarker;
    }(internal.Element));
    projects.OneTimeConversionMarker = OneTimeConversionMarker;
    /**
     * See: {@link https://docs.mendix.com/refguide7/project relevant section in reference guide}
     */
    var Project = /** @class */ (function (_super) {
        __extends(Project, _super);
        function Project(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__projectDocuments = new internal.StructuralChildListProperty(Project, _this, "projectDocuments", []);
            /** @internal */
            _this.__modules = new internal.StructuralChildListProperty(Project, _this, "modules", []);
            /** @internal */
            _this.__projectConversion = new internal.StructuralChildProperty(Project, _this, "projectConversion", null);
            /** @internal */
            _this.__isSystemProject = new internal.PrimitiveProperty(Project, _this, "isSystemProject", false, internal.PrimitiveTypeEnum.Boolean);
            _this._containmentName = "";
            return _this;
        }
        Object.defineProperty(Project.prototype, "projectDocuments", {
            get: function () { return this.__projectDocuments.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Project.prototype, "modules", {
            get: function () { return this.__modules.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Project.prototype, "projectConversion", {
            get: function () { return this.__projectConversion.get(); },
            set: function (newValue) { this.__projectConversion.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Project.prototype, "isSystemProject", {
            get: function () { return this.__isSystemProject.get(); },
            set: function (newValue) { this.__isSystemProject.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        Project.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Project.structureTypeName = "Projects$Project";
        Project.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "projectConversion": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.StructuralUnit);
        return Project;
    }(internal.StructuralUnit));
    projects.Project = Project;
    var ProjectConversion = /** @class */ (function (_super) {
        __extends(ProjectConversion, _super);
        function ProjectConversion(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__markers = new internal.PartListProperty(ProjectConversion, _this, "markers", []);
            _this._containmentName = "projectConversion";
            return _this;
        }
        Object.defineProperty(ProjectConversion.prototype, "containerAsProject", {
            get: function () { return _super.prototype.getContainerAs.call(this, Project); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProjectConversion.prototype, "markers", {
            get: function () { return this.__markers.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new ProjectConversion unit in the SDK and on the server.
         * Expects one argument, the IProject in which this unit is contained.
         */
        ProjectConversion.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, ProjectConversion);
        };
        /** @internal */
        ProjectConversion.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ProjectConversion.structureTypeName = "Projects$ProjectConversion";
        ProjectConversion.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return ProjectConversion;
    }(internal.ModelUnit));
    projects.ProjectConversion = ProjectConversion;
    /**
     * See: {@link https://docs.mendix.com/refguide7/project relevant section in reference guide}
     */
    var ProjectDocument = /** @class */ (function (_super) {
        __extends(ProjectDocument, _super);
        function ProjectDocument(model, structureTypeName, id, isPartial, container) {
            return _super.call(this, model, structureTypeName, id, isPartial, container) || this;
        }
        Object.defineProperty(ProjectDocument.prototype, "containerAsProject", {
            get: function () { return _super.prototype.getContainerAs.call(this, Project); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        ProjectDocument.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ProjectDocument.structureTypeName = "Projects$ProjectDocument";
        ProjectDocument.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return ProjectDocument;
    }(internal.ModelUnit));
    projects.ProjectDocument = ProjectDocument;
})(projects = exports.projects || (exports.projects = {}));
//# sourceMappingURL=projects.js.map