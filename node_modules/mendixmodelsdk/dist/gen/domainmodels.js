"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var utils_1 = require("../sdk/utils");
var projects_1 = require("./projects");
var domainmodels;
(function (domainmodels) {
    var ActionMoment = /** @class */ (function (_super) {
        __extends(ActionMoment, _super);
        function ActionMoment() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "domainmodels.ActionMoment";
            return _this;
        }
        ActionMoment.Before = new ActionMoment("Before", {});
        ActionMoment.After = new ActionMoment("After", {});
        return ActionMoment;
    }(internal.AbstractEnum));
    domainmodels.ActionMoment = ActionMoment;
    var AssociationOwner = /** @class */ (function (_super) {
        __extends(AssociationOwner, _super);
        function AssociationOwner() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "domainmodels.AssociationOwner";
            return _this;
        }
        AssociationOwner.Default = new AssociationOwner("Default", {});
        AssociationOwner.Both = new AssociationOwner("Both", {});
        return AssociationOwner;
    }(internal.AbstractEnum));
    domainmodels.AssociationOwner = AssociationOwner;
    var AssociationType = /** @class */ (function (_super) {
        __extends(AssociationType, _super);
        function AssociationType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "domainmodels.AssociationType";
            return _this;
        }
        AssociationType.Reference = new AssociationType("Reference", {});
        AssociationType.ReferenceSet = new AssociationType("ReferenceSet", {});
        return AssociationType;
    }(internal.AbstractEnum));
    domainmodels.AssociationType = AssociationType;
    var DeletingBehavior = /** @class */ (function (_super) {
        __extends(DeletingBehavior, _super);
        function DeletingBehavior() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "domainmodels.DeletingBehavior";
            return _this;
        }
        DeletingBehavior.DeleteMeAndReferences = new DeletingBehavior("DeleteMeAndReferences", {});
        DeletingBehavior.DeleteMeButKeepReferences = new DeletingBehavior("DeleteMeButKeepReferences", {});
        DeletingBehavior.DeleteMeIfNoReferences = new DeletingBehavior("DeleteMeIfNoReferences", {});
        return DeletingBehavior;
    }(internal.AbstractEnum));
    domainmodels.DeletingBehavior = DeletingBehavior;
    var EventType = /** @class */ (function (_super) {
        __extends(EventType, _super);
        function EventType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "domainmodels.EventType";
            return _this;
        }
        EventType.Create = new EventType("Create", {});
        EventType.Commit = new EventType("Commit", {});
        EventType.Delete = new EventType("Delete", {});
        EventType.RollBack = new EventType("RollBack", {});
        return EventType;
    }(internal.AbstractEnum));
    domainmodels.EventType = EventType;
    var IndexedAttributeType = /** @class */ (function (_super) {
        __extends(IndexedAttributeType, _super);
        function IndexedAttributeType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "domainmodels.IndexedAttributeType";
            return _this;
        }
        IndexedAttributeType.Normal = new IndexedAttributeType("Normal", {});
        IndexedAttributeType.CreatedDate = new IndexedAttributeType("CreatedDate", {});
        IndexedAttributeType.ChangedDate = new IndexedAttributeType("ChangedDate", {});
        return IndexedAttributeType;
    }(internal.AbstractEnum));
    domainmodels.IndexedAttributeType = IndexedAttributeType;
    var MemberAccessRights = /** @class */ (function (_super) {
        __extends(MemberAccessRights, _super);
        function MemberAccessRights() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "domainmodels.MemberAccessRights";
            return _this;
        }
        MemberAccessRights.None = new MemberAccessRights("None", {});
        MemberAccessRights.ReadOnly = new MemberAccessRights("ReadOnly", {});
        MemberAccessRights.ReadWrite = new MemberAccessRights("ReadWrite", {});
        return MemberAccessRights;
    }(internal.AbstractEnum));
    domainmodels.MemberAccessRights = MemberAccessRights;
    var RangeType = /** @class */ (function (_super) {
        __extends(RangeType, _super);
        function RangeType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "domainmodels.RangeType";
            return _this;
        }
        RangeType.GreaterThanOrEqualTo = new RangeType("GreaterThanOrEqualTo", {});
        RangeType.SmallerThanOrEqualTo = new RangeType("SmallerThanOrEqualTo", {});
        RangeType.Between = new RangeType("Between", {});
        return RangeType;
    }(internal.AbstractEnum));
    domainmodels.RangeType = RangeType;
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `DomainModels`.
     */
    /**
     * See: {@link https://docs.mendix.com/refguide7/access-rules relevant section in reference guide}
     */
    var AccessRule = /** @class */ (function (_super) {
        __extends(AccessRule, _super);
        function AccessRule(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__memberAccesses = new internal.PartListProperty(AccessRule, _this, "memberAccesses", []);
            /** @internal */
            _this.__moduleRoles = new internal.ByNameReferenceListProperty(AccessRule, _this, "moduleRoles", [], "Security$ModuleRole");
            /** @internal */
            _this.__documentation = new internal.PrimitiveProperty(AccessRule, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__allowCreate = new internal.PrimitiveProperty(AccessRule, _this, "allowCreate", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__allowDelete = new internal.PrimitiveProperty(AccessRule, _this, "allowDelete", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__defaultMemberAccessRights = new internal.EnumProperty(AccessRule, _this, "defaultMemberAccessRights", MemberAccessRights.None, MemberAccessRights);
            /** @internal */
            _this.__xPathConstraint = new internal.PrimitiveProperty(AccessRule, _this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new AccessRule() cannot be invoked directly, please use 'model.domainmodels.createAccessRule()'");
            }
            return _this;
        }
        Object.defineProperty(AccessRule.prototype, "containerAsEntity", {
            get: function () { return _super.prototype.getContainerAs.call(this, Entity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccessRule.prototype, "containerAsAccessRuleContainerBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, security_1.security.AccessRuleContainerBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccessRule.prototype, "memberAccesses", {
            get: function () { return this.__memberAccesses.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccessRule.prototype, "moduleRoles", {
            get: function () { return this.__moduleRoles.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccessRule.prototype, "moduleRolesQualifiedNames", {
            get: function () { return this.__moduleRoles.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccessRule.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccessRule.prototype, "allowCreate", {
            get: function () { return this.__allowCreate.get(); },
            set: function (newValue) { this.__allowCreate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccessRule.prototype, "allowDelete", {
            get: function () { return this.__allowDelete.get(); },
            set: function (newValue) { this.__allowDelete.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccessRule.prototype, "defaultMemberAccessRights", {
            get: function () { return this.__defaultMemberAccessRights.get(); },
            set: function (newValue) { this.__defaultMemberAccessRights.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccessRule.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AccessRule instance in the SDK and on the server.
         * The new AccessRule will be automatically stored in the 'accessRules' property
         * of the parent Entity element passed as argument.
         */
        AccessRule.createInEntityUnderAccessRules = function (container) {
            return internal.instancehelpers.createElement(container, AccessRule, "accessRules", true);
        };
        /**
         * Creates and returns a new AccessRule instance in the SDK and on the server.
         * The new AccessRule will be automatically stored in the 'accessRules' property
         * of the parent security.AccessRuleContainerBase element passed as argument.
         */
        AccessRule.createInAccessRuleContainerBaseUnderAccessRules = function (container) {
            return internal.instancehelpers.createElement(container, AccessRule, "accessRules", true);
        };
        /**
         * Creates and returns a new AccessRule instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AccessRule.create = function (model) {
            return internal.instancehelpers.createElement(model, AccessRule);
        };
        /** @internal */
        AccessRule.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.defaultMemberAccessRights = MemberAccessRights.None;
        };
        AccessRule.structureTypeName = "DomainModels$AccessRule";
        AccessRule.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return AccessRule;
    }(internal.Element));
    domainmodels.AccessRule = AccessRule;
    /**
     * See: {@link https://docs.mendix.com/refguide7/annotations relevant section in reference guide}
     */
    var Annotation = /** @class */ (function (_super) {
        __extends(Annotation, _super);
        function Annotation(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__caption = new internal.PrimitiveProperty(Annotation, _this, "caption", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__location = new internal.PrimitiveProperty(Annotation, _this, "location", { x: 0, y: 0 }, internal.PrimitiveTypeEnum.Point);
            /** @internal */
            _this.__width = new internal.PrimitiveProperty(Annotation, _this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new Annotation() cannot be invoked directly, please use 'model.domainmodels.createAnnotation()'");
            }
            return _this;
        }
        Object.defineProperty(Annotation.prototype, "containerAsDomainModel", {
            get: function () { return _super.prototype.getContainerAs.call(this, DomainModel); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Annotation.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Annotation.prototype, "location", {
            get: function () { return this.__location.get(); },
            set: function (newValue) { this.__location.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Annotation.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Annotation instance in the SDK and on the server.
         * The new Annotation will be automatically stored in the 'annotations' property
         * of the parent DomainModel element passed as argument.
         */
        Annotation.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Annotation, "annotations", true);
        };
        /**
         * Creates and returns a new Annotation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Annotation.create = function (model) {
            return internal.instancehelpers.createElement(model, Annotation);
        };
        /** @internal */
        Annotation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.width = 250;
        };
        Annotation.structureTypeName = "DomainModels$Annotation";
        Annotation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Annotation;
    }(internal.Element));
    domainmodels.Annotation = Annotation;
    /**
     * See: {@link https://docs.mendix.com/refguide7/associations relevant section in reference guide}
     */
    var AssociationBase = /** @class */ (function (_super) {
        __extends(AssociationBase, _super);
        function AssociationBase(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(AssociationBase, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__dataStorageGuid = new internal.PrimitiveProperty(AssociationBase, _this, "dataStorageGuid", "", internal.PrimitiveTypeEnum.Guid);
            /** @internal */
            _this.__type = new internal.EnumProperty(AssociationBase, _this, "type", AssociationType.Reference, AssociationType);
            /** @internal */
            _this.__owner = new internal.EnumProperty(AssociationBase, _this, "owner", AssociationOwner.Default, AssociationOwner);
            /** @internal */
            _this.__deleteBehavior = new internal.PartProperty(AssociationBase, _this, "deleteBehavior", null, true);
            /** @internal */
            _this.__parent = new internal.ByIdReferenceProperty(AssociationBase, _this, "parent", null);
            /** @internal */
            _this.__documentation = new internal.PrimitiveProperty(AssociationBase, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new AssociationBase() cannot be invoked directly, please use 'model.domainmodels.createAssociationBase()'");
            }
            return _this;
        }
        Object.defineProperty(AssociationBase.prototype, "containerAsDomainModel", {
            get: function () { return _super.prototype.getContainerAs.call(this, DomainModel); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationBase.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationBase.prototype, "dataStorageGuid", {
            get: function () { return this.__dataStorageGuid.get(); },
            set: function (newValue) { this.__dataStorageGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationBase.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationBase.prototype, "owner", {
            get: function () { return this.__owner.get(); },
            set: function (newValue) { this.__owner.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationBase.prototype, "deleteBehavior", {
            get: function () { return this.__deleteBehavior.get(); },
            set: function (newValue) { this.__deleteBehavior.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationBase.prototype, "parent", {
            get: function () { return this.__parent.get(); },
            set: function (newValue) { this.__parent.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationBase.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        AssociationBase.prototype._isByNameReferrable = function () { return true; };
        Object.defineProperty(AssociationBase.prototype, "qualifiedName", {
            get: function () {
                return this._getQualifiedName();
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        AssociationBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataStorageGuid = utils_1.utils.randomUuid();
            this.deleteBehavior = AssociationDeleteBehavior.create(this.model);
            this.owner = AssociationOwner.Default;
            this.type = AssociationType.Reference;
        };
        AssociationBase.structureTypeName = "DomainModels$AssociationBase";
        AssociationBase.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "type": {
                    "public": {
                        "currentValue": true
                    }
                },
                "owner": {
                    "public": {
                        "currentValue": true
                    }
                },
                "deleteBehavior": {
                    "required": {
                        "currentValue": true
                    }
                },
                "parent": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return AssociationBase;
    }(internal.Element));
    domainmodels.AssociationBase = AssociationBase;
    /**
     * See: {@link https://docs.mendix.com/refguide7/associations relevant section in reference guide}
     */
    var Association = /** @class */ (function (_super) {
        __extends(Association, _super);
        function Association(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__child = new internal.ByIdReferenceProperty(Association, _this, "child", null);
            /** @internal */
            _this.__parentConnection = new internal.PrimitiveProperty(Association, _this, "parentConnection", { x: 0, y: 0 }, internal.PrimitiveTypeEnum.Point);
            /** @internal */
            _this.__childConnection = new internal.PrimitiveProperty(Association, _this, "childConnection", { x: 0, y: 0 }, internal.PrimitiveTypeEnum.Point);
            if (arguments.length < 4) {
                throw new Error("new Association() cannot be invoked directly, please use 'model.domainmodels.createAssociation()'");
            }
            return _this;
        }
        Object.defineProperty(Association.prototype, "containerAsDomainModel", {
            get: function () { return _super.prototype.getContainerAs.call(this, DomainModel); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Association.prototype, "child", {
            get: function () { return this.__child.get(); },
            set: function (newValue) { this.__child.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Association.prototype, "parentConnection", {
            get: function () { return this.__parentConnection.get(); },
            set: function (newValue) { this.__parentConnection.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Association.prototype, "childConnection", {
            get: function () { return this.__childConnection.get(); },
            set: function (newValue) { this.__childConnection.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Association instance in the SDK and on the server.
         * The new Association will be automatically stored in the 'associations' property
         * of the parent DomainModel element passed as argument.
         */
        Association.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Association, "associations", true);
        };
        /**
         * Creates and returns a new Association instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Association.create = function (model) {
            return internal.instancehelpers.createElement(model, Association);
        };
        /** @internal */
        Association.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Association.structureTypeName = "DomainModels$Association";
        Association.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "child": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return Association;
    }(AssociationBase));
    domainmodels.Association = Association;
    var AssociationDeleteBehavior = /** @class */ (function (_super) {
        __extends(AssociationDeleteBehavior, _super);
        function AssociationDeleteBehavior(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__parentDeleteBehavior = new internal.EnumProperty(AssociationDeleteBehavior, _this, "parentDeleteBehavior", DeletingBehavior.DeleteMeButKeepReferences, DeletingBehavior);
            /** @internal */
            _this.__childDeleteBehavior = new internal.EnumProperty(AssociationDeleteBehavior, _this, "childDeleteBehavior", DeletingBehavior.DeleteMeButKeepReferences, DeletingBehavior);
            /** @internal */
            _this.__parentErrorMessage = new internal.PartProperty(AssociationDeleteBehavior, _this, "parentErrorMessage", null, false);
            /** @internal */
            _this.__childErrorMessage = new internal.PartProperty(AssociationDeleteBehavior, _this, "childErrorMessage", null, false);
            if (arguments.length < 4) {
                throw new Error("new AssociationDeleteBehavior() cannot be invoked directly, please use 'model.domainmodels.createAssociationDeleteBehavior()'");
            }
            return _this;
        }
        Object.defineProperty(AssociationDeleteBehavior.prototype, "containerAsAssociationBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, AssociationBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationDeleteBehavior.prototype, "parentDeleteBehavior", {
            get: function () { return this.__parentDeleteBehavior.get(); },
            set: function (newValue) { this.__parentDeleteBehavior.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationDeleteBehavior.prototype, "childDeleteBehavior", {
            get: function () { return this.__childDeleteBehavior.get(); },
            set: function (newValue) { this.__childDeleteBehavior.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationDeleteBehavior.prototype, "parentErrorMessage", {
            get: function () { return this.__parentErrorMessage.get(); },
            set: function (newValue) { this.__parentErrorMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationDeleteBehavior.prototype, "childErrorMessage", {
            get: function () { return this.__childErrorMessage.get(); },
            set: function (newValue) { this.__childErrorMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AssociationDeleteBehavior instance in the SDK and on the server.
         * The new AssociationDeleteBehavior will be automatically stored in the 'deleteBehavior' property
         * of the parent AssociationBase element passed as argument.
         */
        AssociationDeleteBehavior.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AssociationDeleteBehavior, "deleteBehavior", false);
        };
        /**
         * Creates and returns a new AssociationDeleteBehavior instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AssociationDeleteBehavior.create = function (model) {
            return internal.instancehelpers.createElement(model, AssociationDeleteBehavior);
        };
        /** @internal */
        AssociationDeleteBehavior.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.childDeleteBehavior = DeletingBehavior.DeleteMeButKeepReferences;
            this.parentDeleteBehavior = DeletingBehavior.DeleteMeButKeepReferences;
        };
        AssociationDeleteBehavior.structureTypeName = "DomainModels$AssociationDeleteBehavior";
        AssociationDeleteBehavior.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return AssociationDeleteBehavior;
    }(internal.Element));
    domainmodels.AssociationDeleteBehavior = AssociationDeleteBehavior;
    /**
     * In version 7.11.0: introduced
     */
    var MemberRef = /** @class */ (function (_super) {
        __extends(MemberRef, _super);
        function MemberRef(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__entityRef = new internal.PartProperty(MemberRef, _this, "entityRef", null, false);
            if (arguments.length < 4) {
                throw new Error("new MemberRef() cannot be invoked directly, please use 'model.domainmodels.createMemberRef()'");
            }
            return _this;
        }
        Object.defineProperty(MemberRef.prototype, "containerAsWidgetValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, customwidgets_1.customwidgets.WidgetValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsAttributeWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.AttributeWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsDataGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DataGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsDocumentTemplatesGridSortItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.GridSortItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsVariableRefExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, expressions_1.expressions.VariableRefExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsSortItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.SortItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsClientTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ClientTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsPagesGridSortItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GridSortItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsListViewSearch", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewSearch); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsMemberWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.MemberWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsRangeSearchField", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.RangeSearchField); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsSingleSearchField", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SingleSearchField); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsStaticOrDynamicString", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.StaticOrDynamicString); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "containerAsAttributeValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.AttributeValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberRef.prototype, "entityRef", {
            get: function () { return this.__entityRef.get(); },
            set: function (newValue) { this.__entityRef.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        MemberRef.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MemberRef.structureTypeName = "DomainModels$MemberRef";
        MemberRef.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.11.0"
        }, internal.StructureType.Element);
        return MemberRef;
    }(internal.Element));
    domainmodels.MemberRef = MemberRef;
    /**
     * In version 7.11.0: introduced
     */
    var AssociationRef = /** @class */ (function (_super) {
        __extends(AssociationRef, _super);
        function AssociationRef(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__association = new internal.ByNameReferenceProperty(AssociationRef, _this, "association", null, "DomainModels$AssociationBase");
            if (arguments.length < 4) {
                throw new Error("new AssociationRef() cannot be invoked directly, please use 'model.domainmodels.createAssociationRef()'");
            }
            return _this;
        }
        Object.defineProperty(AssociationRef.prototype, "containerAsVariableRefExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, expressions_1.expressions.VariableRefExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationRef.prototype, "association", {
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationRef.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AssociationRef instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AssociationRef.create = function (model) {
            return internal.instancehelpers.createElement(model, AssociationRef);
        };
        /** @internal */
        AssociationRef.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AssociationRef.structureTypeName = "DomainModels$AssociationRef";
        AssociationRef.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.11.0",
            "properties": {
                "association": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return AssociationRef;
    }(MemberRef));
    domainmodels.AssociationRef = AssociationRef;
    /**
     * See: {@link https://docs.mendix.com/refguide7/attributes relevant section in reference guide}
     */
    var Attribute = /** @class */ (function (_super) {
        __extends(Attribute, _super);
        function Attribute(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(Attribute, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__dataStorageGuid = new internal.PrimitiveProperty(Attribute, _this, "dataStorageGuid", "", internal.PrimitiveTypeEnum.Guid);
            /** @internal */
            _this.__type = new internal.PartProperty(Attribute, _this, "type", null, true);
            /** @internal */
            _this.__documentation = new internal.PrimitiveProperty(Attribute, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__value = new internal.PartProperty(Attribute, _this, "value", null, true);
            if (arguments.length < 4) {
                throw new Error("new Attribute() cannot be invoked directly, please use 'model.domainmodels.createAttribute()'");
            }
            return _this;
        }
        Object.defineProperty(Attribute.prototype, "containerAsEntity", {
            get: function () { return _super.prototype.getContainerAs.call(this, Entity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attribute.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attribute.prototype, "dataStorageGuid", {
            get: function () { return this.__dataStorageGuid.get(); },
            set: function (newValue) { this.__dataStorageGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attribute.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attribute.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attribute.prototype, "value", {
            /**
             * In version 6.6.0: added public
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Attribute instance in the SDK and on the server.
         * The new Attribute will be automatically stored in the 'attributes' property
         * of the parent Entity element passed as argument.
         */
        Attribute.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Attribute, "attributes", true);
        };
        /**
         * Creates and returns a new Attribute instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Attribute.create = function (model) {
            return internal.instancehelpers.createElement(model, Attribute);
        };
        /** @internal */
        Attribute.prototype._isByNameReferrable = function () { return true; };
        Object.defineProperty(Attribute.prototype, "qualifiedName", {
            get: function () {
                return this._getQualifiedName();
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        Attribute.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataStorageGuid = utils_1.utils.randomUuid();
            this.type = StringAttributeType.create(this.model);
            this.value = StoredValue.create(this.model);
        };
        Attribute.structureTypeName = "DomainModels$Attribute";
        Attribute.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "type": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                },
                "value": {
                    "public": {
                        "currentValue": true,
                        "changedIn": [
                            "6.6.0"
                        ]
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return Attribute;
    }(internal.Element));
    domainmodels.Attribute = Attribute;
    /**
     * In version 7.11.0: introduced
     */
    var AttributeRef = /** @class */ (function (_super) {
        __extends(AttributeRef, _super);
        function AttributeRef(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__attribute = new internal.ByNameReferenceProperty(AttributeRef, _this, "attribute", null, "DomainModels$Attribute");
            if (arguments.length < 4) {
                throw new Error("new AttributeRef() cannot be invoked directly, please use 'model.domainmodels.createAttributeRef()'");
            }
            return _this;
        }
        Object.defineProperty(AttributeRef.prototype, "containerAsWidgetValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, customwidgets_1.customwidgets.WidgetValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsAttributeWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.AttributeWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsDataGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DataGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsDocumentTemplatesGridSortItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.GridSortItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsVariableRefExpression", {
            get: function () { return _super.prototype.getContainerAs.call(this, expressions_1.expressions.VariableRefExpression); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsSortItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.SortItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsClientTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ClientTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsPagesGridSortItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GridSortItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsListViewSearch", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewSearch); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsMemberWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.MemberWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsRangeSearchField", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.RangeSearchField); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsSingleSearchField", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SingleSearchField); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsStaticOrDynamicString", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.StaticOrDynamicString); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "containerAsAttributeValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, pluginwidgets_1.pluginwidgets.AttributeValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeRef.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'attributeRef' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInWidgetValueUnderAttributeRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "attributeRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'attributeRef' property
         * of the parent documenttemplates.AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInAttributeWidgetUnderAttributeRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "attributeRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'attributeRef' property
         * of the parent documenttemplates.DataGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInDataGridColumnUnderAttributeRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "attributeRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'attributeRef' property
         * of the parent documenttemplates.GridSortItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInDocumentTemplatesGridSortItemUnderAttributeRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "attributeRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'member' property
         * of the parent expressions.VariableRefExpression element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInVariableRefExpressionUnderMember = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "member", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'attributeRef' property
         * of the parent microflows.SortItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInSortItemUnderAttributeRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "attributeRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'attributeRef' property
         * of the parent pages.ClientTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInClientTemplateParameterUnderAttributeRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "attributeRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'attributeRef' property
         * of the parent pages.GridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInGridColumnUnderAttributeRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "attributeRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'attributeRef' property
         * of the parent pages.GridSortItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInPagesGridSortItemUnderAttributeRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "attributeRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'searchRefs' property
         * of the parent pages.ListViewSearch element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInListViewSearchUnderSearchRefs = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "searchRefs", true);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'attributeRef' property
         * of the parent pages.MemberWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInMemberWidgetUnderAttributeRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "attributeRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'lowerBoundRef' property
         * of the parent pages.RangeSearchField element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInRangeSearchFieldUnderLowerBoundRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "lowerBoundRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'upperBoundRef' property
         * of the parent pages.RangeSearchField element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInRangeSearchFieldUnderUpperBoundRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "upperBoundRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'attributeRef' property
         * of the parent pages.SingleSearchField element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInSingleSearchFieldUnderAttributeRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "attributeRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'attributeRef' property
         * of the parent pages.StaticOrDynamicString element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInStaticOrDynamicStringUnderAttributeRef = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "attributeRef", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * The new AttributeRef will be automatically stored in the 'value' property
         * of the parent pluginwidgets.AttributeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        AttributeRef.createInAttributeValueUnderValue = function (container) {
            internal.createInVersionCheck(container.model, AttributeRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, AttributeRef, "value", false);
        };
        /**
         * Creates and returns a new AttributeRef instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AttributeRef.create = function (model) {
            return internal.instancehelpers.createElement(model, AttributeRef);
        };
        /** @internal */
        AttributeRef.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AttributeRef.structureTypeName = "DomainModels$AttributeRef";
        AttributeRef.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.11.0",
            "properties": {
                "attribute": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return AttributeRef;
    }(MemberRef));
    domainmodels.AttributeRef = AttributeRef;
    var AttributeType = /** @class */ (function (_super) {
        __extends(AttributeType, _super);
        function AttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new AttributeType() cannot be invoked directly, please use 'model.domainmodels.createAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(AttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        AttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AttributeType.structureTypeName = "DomainModels$AttributeType";
        AttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return AttributeType;
    }(internal.Element));
    domainmodels.AttributeType = AttributeType;
    var NumericAttributeTypeBase = /** @class */ (function (_super) {
        __extends(NumericAttributeTypeBase, _super);
        function NumericAttributeTypeBase(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new NumericAttributeTypeBase() cannot be invoked directly, please use 'model.domainmodels.createNumericAttributeTypeBase()'");
            }
            return _this;
        }
        Object.defineProperty(NumericAttributeTypeBase.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        NumericAttributeTypeBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NumericAttributeTypeBase.structureTypeName = "DomainModels$NumericAttributeTypeBase";
        NumericAttributeTypeBase.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return NumericAttributeTypeBase;
    }(AttributeType));
    domainmodels.NumericAttributeTypeBase = NumericAttributeTypeBase;
    var IntegerAttributeTypeBase = /** @class */ (function (_super) {
        __extends(IntegerAttributeTypeBase, _super);
        function IntegerAttributeTypeBase(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new IntegerAttributeTypeBase() cannot be invoked directly, please use 'model.domainmodels.createIntegerAttributeTypeBase()'");
            }
            return _this;
        }
        Object.defineProperty(IntegerAttributeTypeBase.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        IntegerAttributeTypeBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        IntegerAttributeTypeBase.structureTypeName = "DomainModels$IntegerAttributeTypeBase";
        IntegerAttributeTypeBase.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return IntegerAttributeTypeBase;
    }(NumericAttributeTypeBase));
    domainmodels.IntegerAttributeTypeBase = IntegerAttributeTypeBase;
    var AutoNumberAttributeType = /** @class */ (function (_super) {
        __extends(AutoNumberAttributeType, _super);
        function AutoNumberAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new AutoNumberAttributeType() cannot be invoked directly, please use 'model.domainmodels.createAutoNumberAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(AutoNumberAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AutoNumberAttributeType instance in the SDK and on the server.
         * The new AutoNumberAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        AutoNumberAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AutoNumberAttributeType, "type", false);
        };
        /**
         * Creates and returns a new AutoNumberAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AutoNumberAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, AutoNumberAttributeType);
        };
        /** @internal */
        AutoNumberAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AutoNumberAttributeType.structureTypeName = "DomainModels$AutoNumberAttributeType";
        AutoNumberAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return AutoNumberAttributeType;
    }(IntegerAttributeTypeBase));
    domainmodels.AutoNumberAttributeType = AutoNumberAttributeType;
    var BinaryAttributeType = /** @class */ (function (_super) {
        __extends(BinaryAttributeType, _super);
        function BinaryAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new BinaryAttributeType() cannot be invoked directly, please use 'model.domainmodels.createBinaryAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(BinaryAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BinaryAttributeType instance in the SDK and on the server.
         * The new BinaryAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        BinaryAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, BinaryAttributeType, "type", false);
        };
        /**
         * Creates and returns a new BinaryAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BinaryAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, BinaryAttributeType);
        };
        /** @internal */
        BinaryAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        BinaryAttributeType.structureTypeName = "DomainModels$BinaryAttributeType";
        BinaryAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BinaryAttributeType;
    }(AttributeType));
    domainmodels.BinaryAttributeType = BinaryAttributeType;
    var BooleanAttributeType = /** @class */ (function (_super) {
        __extends(BooleanAttributeType, _super);
        function BooleanAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new BooleanAttributeType() cannot be invoked directly, please use 'model.domainmodels.createBooleanAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(BooleanAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BooleanAttributeType instance in the SDK and on the server.
         * The new BooleanAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        BooleanAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, BooleanAttributeType, "type", false);
        };
        /**
         * Creates and returns a new BooleanAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BooleanAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, BooleanAttributeType);
        };
        /** @internal */
        BooleanAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        BooleanAttributeType.structureTypeName = "DomainModels$BooleanAttributeType";
        BooleanAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BooleanAttributeType;
    }(AttributeType));
    domainmodels.BooleanAttributeType = BooleanAttributeType;
    /**
     * In version 6.6.0: added public
     */
    var ValueType = /** @class */ (function (_super) {
        __extends(ValueType, _super);
        function ValueType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ValueType() cannot be invoked directly, please use 'model.domainmodels.createValueType()'");
            }
            return _this;
        }
        Object.defineProperty(ValueType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        ValueType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ValueType.structureTypeName = "DomainModels$ValueType";
        ValueType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true,
                "changedIn": [
                    "6.6.0"
                ]
            }
        }, internal.StructureType.Element);
        return ValueType;
    }(internal.Element));
    domainmodels.ValueType = ValueType;
    /**
     * In version 6.6.0: added public
     */
    var CalculatedValue = /** @class */ (function (_super) {
        __extends(CalculatedValue, _super);
        function CalculatedValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__microflow = new internal.ByNameReferenceProperty(CalculatedValue, _this, "microflow", null, "Microflows$Microflow");
            /** @internal */
            _this.__passEntity = new internal.PrimitiveProperty(CalculatedValue, _this, "passEntity", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new CalculatedValue() cannot be invoked directly, please use 'model.domainmodels.createCalculatedValue()'");
            }
            return _this;
        }
        Object.defineProperty(CalculatedValue.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CalculatedValue.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CalculatedValue.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CalculatedValue.prototype, "passEntity", {
            get: function () { return this.__passEntity.get(); },
            set: function (newValue) { this.__passEntity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CalculatedValue instance in the SDK and on the server.
         * The new CalculatedValue will be automatically stored in the 'value' property
         * of the parent Attribute element passed as argument.
         */
        CalculatedValue.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CalculatedValue, "value", false);
        };
        /**
         * Creates and returns a new CalculatedValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CalculatedValue.create = function (model) {
            return internal.instancehelpers.createElement(model, CalculatedValue);
        };
        /** @internal */
        CalculatedValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.passEntity = true;
        };
        CalculatedValue.structureTypeName = "DomainModels$CalculatedValue";
        CalculatedValue.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true,
                "changedIn": [
                    "6.6.0"
                ]
            }
        }, internal.StructureType.Element);
        return CalculatedValue;
    }(ValueType));
    domainmodels.CalculatedValue = CalculatedValue;
    var CrossAssociation = /** @class */ (function (_super) {
        __extends(CrossAssociation, _super);
        function CrossAssociation(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__child = new internal.ByNameReferenceProperty(CrossAssociation, _this, "child", null, "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new CrossAssociation() cannot be invoked directly, please use 'model.domainmodels.createCrossAssociation()'");
            }
            return _this;
        }
        Object.defineProperty(CrossAssociation.prototype, "containerAsDomainModel", {
            get: function () { return _super.prototype.getContainerAs.call(this, DomainModel); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CrossAssociation.prototype, "child", {
            get: function () { return this.__child.get(); },
            set: function (newValue) { this.__child.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CrossAssociation.prototype, "childQualifiedName", {
            get: function () { return this.__child.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CrossAssociation instance in the SDK and on the server.
         * The new CrossAssociation will be automatically stored in the 'crossAssociations' property
         * of the parent DomainModel element passed as argument.
         */
        CrossAssociation.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CrossAssociation, "crossAssociations", true);
        };
        /**
         * Creates and returns a new CrossAssociation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CrossAssociation.create = function (model) {
            return internal.instancehelpers.createElement(model, CrossAssociation);
        };
        /** @internal */
        CrossAssociation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CrossAssociation.structureTypeName = "DomainModels$CrossAssociation";
        CrossAssociation.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "child": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return CrossAssociation;
    }(AssociationBase));
    domainmodels.CrossAssociation = CrossAssociation;
    var DecimalAttributeTypeBase = /** @class */ (function (_super) {
        __extends(DecimalAttributeTypeBase, _super);
        function DecimalAttributeTypeBase(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DecimalAttributeTypeBase() cannot be invoked directly, please use 'model.domainmodels.createDecimalAttributeTypeBase()'");
            }
            return _this;
        }
        Object.defineProperty(DecimalAttributeTypeBase.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        DecimalAttributeTypeBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DecimalAttributeTypeBase.structureTypeName = "DomainModels$DecimalAttributeTypeBase";
        DecimalAttributeTypeBase.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DecimalAttributeTypeBase;
    }(NumericAttributeTypeBase));
    domainmodels.DecimalAttributeTypeBase = DecimalAttributeTypeBase;
    var FloatAttributeTypeBase = /** @class */ (function (_super) {
        __extends(FloatAttributeTypeBase, _super);
        function FloatAttributeTypeBase(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new FloatAttributeTypeBase() cannot be invoked directly, please use 'model.domainmodels.createFloatAttributeTypeBase()'");
            }
            return _this;
        }
        Object.defineProperty(FloatAttributeTypeBase.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        FloatAttributeTypeBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        FloatAttributeTypeBase.structureTypeName = "DomainModels$FloatAttributeTypeBase";
        FloatAttributeTypeBase.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return FloatAttributeTypeBase;
    }(DecimalAttributeTypeBase));
    domainmodels.FloatAttributeTypeBase = FloatAttributeTypeBase;
    /**
     * In version 6.0.0: deprecated
     */
    var CurrencyAttributeType = /** @class */ (function (_super) {
        __extends(CurrencyAttributeType, _super);
        function CurrencyAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new CurrencyAttributeType() cannot be invoked directly, please use 'model.domainmodels.createCurrencyAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(CurrencyAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CurrencyAttributeType instance in the SDK and on the server.
         * The new CurrencyAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        CurrencyAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CurrencyAttributeType, "type", false);
        };
        /**
         * Creates and returns a new CurrencyAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CurrencyAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, CurrencyAttributeType);
        };
        /** @internal */
        CurrencyAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CurrencyAttributeType.structureTypeName = "DomainModels$CurrencyAttributeType";
        CurrencyAttributeType.versionInfo = new exports.StructureVersionInfo({
            "deprecated": "6.0.0",
            "deprecationMessage": "CurrencyAttributeType has been deprecated. Please use DecimalAttributeType instead.",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return CurrencyAttributeType;
    }(FloatAttributeTypeBase));
    domainmodels.CurrencyAttributeType = CurrencyAttributeType;
    var DateTimeAttributeType = /** @class */ (function (_super) {
        __extends(DateTimeAttributeType, _super);
        function DateTimeAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__localizeDate = new internal.PrimitiveProperty(DateTimeAttributeType, _this, "localizeDate", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DateTimeAttributeType() cannot be invoked directly, please use 'model.domainmodels.createDateTimeAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(DateTimeAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeAttributeType.prototype, "localizeDate", {
            get: function () { return this.__localizeDate.get(); },
            set: function (newValue) { this.__localizeDate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DateTimeAttributeType instance in the SDK and on the server.
         * The new DateTimeAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        DateTimeAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DateTimeAttributeType, "type", false);
        };
        /**
         * Creates and returns a new DateTimeAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DateTimeAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, DateTimeAttributeType);
        };
        /** @internal */
        DateTimeAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.localizeDate = true;
        };
        DateTimeAttributeType.structureTypeName = "DomainModels$DateTimeAttributeType";
        DateTimeAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DateTimeAttributeType;
    }(AttributeType));
    domainmodels.DateTimeAttributeType = DateTimeAttributeType;
    var DecimalAttributeType = /** @class */ (function (_super) {
        __extends(DecimalAttributeType, _super);
        function DecimalAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DecimalAttributeType() cannot be invoked directly, please use 'model.domainmodels.createDecimalAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(DecimalAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DecimalAttributeType instance in the SDK and on the server.
         * The new DecimalAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        DecimalAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DecimalAttributeType, "type", false);
        };
        /**
         * Creates and returns a new DecimalAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DecimalAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, DecimalAttributeType);
        };
        /** @internal */
        DecimalAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DecimalAttributeType.structureTypeName = "DomainModels$DecimalAttributeType";
        DecimalAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DecimalAttributeType;
    }(DecimalAttributeTypeBase));
    domainmodels.DecimalAttributeType = DecimalAttributeType;
    /**
     * In version 7.11.0: introduced
     */
    var EntityRef = /** @class */ (function (_super) {
        __extends(EntityRef, _super);
        function EntityRef(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new EntityRef() cannot be invoked directly, please use 'model.domainmodels.createEntityRef()'");
            }
            return _this;
        }
        Object.defineProperty(EntityRef.prototype, "containerAsWidgetValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, customwidgets_1.customwidgets.WidgetValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityRef.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityRef.prototype, "containerAsMemberRef", {
            get: function () { return _super.prototype.getContainerAs.call(this, MemberRef); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityRef.prototype, "containerAsEntityPathSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.EntityPathSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityRef.prototype, "containerAsNewButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NewButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityRef.prototype, "containerAsReferenceSetSelector", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ReferenceSetSelector); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityRef.prototype, "containerAsSelectorXPathSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SelectorXPathSource); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        EntityRef.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EntityRef.structureTypeName = "DomainModels$EntityRef";
        EntityRef.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.11.0"
        }, internal.StructureType.Element);
        return EntityRef;
    }(internal.Element));
    domainmodels.EntityRef = EntityRef;
    /**
     * In version 7.11.0: introduced
     */
    var DirectEntityRef = /** @class */ (function (_super) {
        __extends(DirectEntityRef, _super);
        function DirectEntityRef(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__entity = new internal.ByNameReferenceProperty(DirectEntityRef, _this, "entity", null, "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new DirectEntityRef() cannot be invoked directly, please use 'model.domainmodels.createDirectEntityRef()'");
            }
            return _this;
        }
        Object.defineProperty(DirectEntityRef.prototype, "containerAsWidgetValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, customwidgets_1.customwidgets.WidgetValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectEntityRef.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectEntityRef.prototype, "containerAsEntityPathSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.EntityPathSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectEntityRef.prototype, "containerAsNewButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NewButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectEntityRef.prototype, "containerAsReferenceSetSelector", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ReferenceSetSelector); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectEntityRef.prototype, "containerAsSelectorXPathSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SelectorXPathSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectEntityRef.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectEntityRef.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DirectEntityRef instance in the SDK and on the server.
         * The new DirectEntityRef will be automatically stored in the 'entityRef' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        DirectEntityRef.createInWidgetValueUnderEntityRef = function (container) {
            internal.createInVersionCheck(container.model, DirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, DirectEntityRef, "entityRef", false);
        };
        /**
         * Creates and returns a new DirectEntityRef instance in the SDK and on the server.
         * The new DirectEntityRef will be automatically stored in the 'entityRef' property
         * of the parent documenttemplates.EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        DirectEntityRef.createInEntityWidgetUnderEntityRef = function (container) {
            internal.createInVersionCheck(container.model, DirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, DirectEntityRef, "entityRef", false);
        };
        /**
         * Creates and returns a new DirectEntityRef instance in the SDK and on the server.
         * The new DirectEntityRef will be automatically stored in the 'entityRef' property
         * of the parent pages.EntityPathSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        DirectEntityRef.createInEntityPathSourceUnderEntityRef = function (container) {
            internal.createInVersionCheck(container.model, DirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, DirectEntityRef, "entityRef", false);
        };
        /**
         * Creates and returns a new DirectEntityRef instance in the SDK and on the server.
         * The new DirectEntityRef will be automatically stored in the 'entityRef' property
         * of the parent pages.NewButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        DirectEntityRef.createInNewButtonUnderEntityRef = function (container) {
            internal.createInVersionCheck(container.model, DirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, DirectEntityRef, "entityRef", false);
        };
        /**
         * Creates and returns a new DirectEntityRef instance in the SDK and on the server.
         * The new DirectEntityRef will be automatically stored in the 'constrainedByRefs' property
         * of the parent pages.ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        DirectEntityRef.createInReferenceSetSelectorUnderConstrainedByRefs = function (container) {
            internal.createInVersionCheck(container.model, DirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, DirectEntityRef, "constrainedByRefs", true);
        };
        /**
         * Creates and returns a new DirectEntityRef instance in the SDK and on the server.
         * The new DirectEntityRef will be automatically stored in the 'constrainedByRefs' property
         * of the parent pages.SelectorXPathSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        DirectEntityRef.createInSelectorXPathSourceUnderConstrainedByRefs = function (container) {
            internal.createInVersionCheck(container.model, DirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, DirectEntityRef, "constrainedByRefs", true);
        };
        /**
         * Creates and returns a new DirectEntityRef instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DirectEntityRef.create = function (model) {
            return internal.instancehelpers.createElement(model, DirectEntityRef);
        };
        /** @internal */
        DirectEntityRef.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DirectEntityRef.structureTypeName = "DomainModels$DirectEntityRef";
        DirectEntityRef.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.11.0",
            "properties": {
                "entity": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DirectEntityRef;
    }(EntityRef));
    domainmodels.DirectEntityRef = DirectEntityRef;
    /**
     * See: {@link https://docs.mendix.com/refguide7/domain-model relevant section in reference guide}
     */
    var DomainModel = /** @class */ (function (_super) {
        __extends(DomainModel, _super);
        function DomainModel(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__documentation = new internal.PrimitiveProperty(DomainModel, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__entities = new internal.PartListProperty(DomainModel, _this, "entities", []);
            /** @internal */
            _this.__annotations = new internal.PartListProperty(DomainModel, _this, "annotations", []);
            /** @internal */
            _this.__associations = new internal.PartListProperty(DomainModel, _this, "associations", []);
            /** @internal */
            _this.__crossAssociations = new internal.PartListProperty(DomainModel, _this, "crossAssociations", []);
            _this._containmentName = "domainModel";
            return _this;
        }
        Object.defineProperty(DomainModel.prototype, "containerAsModule", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.Module); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DomainModel.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DomainModel.prototype, "entities", {
            get: function () { return this.__entities.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DomainModel.prototype, "annotations", {
            get: function () { return this.__annotations.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DomainModel.prototype, "associations", {
            get: function () { return this.__associations.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DomainModel.prototype, "crossAssociations", {
            get: function () { return this.__crossAssociations.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new DomainModel unit in the SDK and on the server.
         * Expects one argument, the projects.IModule in which this unit is contained.
         */
        DomainModel.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, DomainModel);
        };
        /** @internal */
        DomainModel.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DomainModel.structureTypeName = "DomainModels$DomainModel";
        DomainModel.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "entities": {
                    "public": {
                        "currentValue": true
                    }
                },
                "associations": {
                    "public": {
                        "currentValue": true
                    }
                },
                "crossAssociations": {
                    "public": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return DomainModel;
    }(projects_1.projects.ModuleDocument));
    domainmodels.DomainModel = DomainModel;
    /**
     * See: {@link https://docs.mendix.com/refguide7/entities relevant section in reference guide}
     */
    var Entity = /** @class */ (function (_super) {
        __extends(Entity, _super);
        function Entity(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(Entity, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__dataStorageGuid = new internal.PrimitiveProperty(Entity, _this, "dataStorageGuid", "", internal.PrimitiveTypeEnum.Guid);
            /** @internal */
            _this.__location = new internal.PrimitiveProperty(Entity, _this, "location", { x: 0, y: 0 }, internal.PrimitiveTypeEnum.Point);
            /** @internal */
            _this.__documentation = new internal.PrimitiveProperty(Entity, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__generalization = new internal.PartProperty(Entity, _this, "generalization", null, true);
            /** @internal */
            _this.__attributes = new internal.PartListProperty(Entity, _this, "attributes", []);
            /** @internal */
            _this.__validationRules = new internal.PartListProperty(Entity, _this, "validationRules", []);
            /** @internal */
            _this.__eventHandlers = new internal.PartListProperty(Entity, _this, "eventHandlers", []);
            /** @internal */
            _this.__indexes = new internal.PartListProperty(Entity, _this, "indexes", []);
            /** @internal */
            _this.__accessRules = new internal.PartListProperty(Entity, _this, "accessRules", []);
            /** @internal */
            _this.__image = new internal.ByNameReferenceProperty(Entity, _this, "image", null, "Images$Image");
            if (arguments.length < 4) {
                throw new Error("new Entity() cannot be invoked directly, please use 'model.domainmodels.createEntity()'");
            }
            _this._declaredAsNamespace = true;
            return _this;
        }
        Object.defineProperty(Entity.prototype, "containerAsDomainModel", {
            get: function () { return _super.prototype.getContainerAs.call(this, DomainModel); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "dataStorageGuid", {
            get: function () { return this.__dataStorageGuid.get(); },
            set: function (newValue) { this.__dataStorageGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "location", {
            get: function () { return this.__location.get(); },
            set: function (newValue) { this.__location.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "generalization", {
            get: function () { return this.__generalization.get(); },
            set: function (newValue) { this.__generalization.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "attributes", {
            get: function () { return this.__attributes.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "validationRules", {
            get: function () { return this.__validationRules.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "eventHandlers", {
            get: function () { return this.__eventHandlers.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "indexes", {
            get: function () { return this.__indexes.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "accessRules", {
            get: function () { return this.__accessRules.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Entity instance in the SDK and on the server.
         * The new Entity will be automatically stored in the 'entities' property
         * of the parent DomainModel element passed as argument.
         */
        Entity.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Entity, "entities", true);
        };
        /**
         * Creates and returns a new Entity instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Entity.create = function (model) {
            return internal.instancehelpers.createElement(model, Entity);
        };
        /** @internal */
        Entity.prototype._isByNameReferrable = function () { return true; };
        Object.defineProperty(Entity.prototype, "qualifiedName", {
            get: function () {
                return this._getQualifiedName();
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        Entity.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataStorageGuid = utils_1.utils.randomUuid();
            this.generalization = NoGeneralization.create(this.model);
        };
        Entity.structureTypeName = "DomainModels$Entity";
        Entity.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "generalization": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                },
                "attributes": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return Entity;
    }(internal.Element));
    domainmodels.Entity = Entity;
    /**
     * In version 7.11.0: introduced
     */
    var EntityRefStep = /** @class */ (function (_super) {
        __extends(EntityRefStep, _super);
        function EntityRefStep(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__association = new internal.ByNameReferenceProperty(EntityRefStep, _this, "association", null, "DomainModels$AssociationBase");
            /** @internal */
            _this.__destinationEntity = new internal.ByNameReferenceProperty(EntityRefStep, _this, "destinationEntity", null, "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new EntityRefStep() cannot be invoked directly, please use 'model.domainmodels.createEntityRefStep()'");
            }
            return _this;
        }
        Object.defineProperty(EntityRefStep.prototype, "containerAsIndirectEntityRef", {
            get: function () { return _super.prototype.getContainerAs.call(this, IndirectEntityRef); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityRefStep.prototype, "association", {
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityRefStep.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityRefStep.prototype, "destinationEntity", {
            get: function () { return this.__destinationEntity.get(); },
            set: function (newValue) { this.__destinationEntity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityRefStep.prototype, "destinationEntityQualifiedName", {
            get: function () { return this.__destinationEntity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EntityRefStep instance in the SDK and on the server.
         * The new EntityRefStep will be automatically stored in the 'steps' property
         * of the parent IndirectEntityRef element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        EntityRefStep.createIn = function (container) {
            internal.createInVersionCheck(container.model, EntityRefStep.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, EntityRefStep, "steps", true);
        };
        /**
         * Creates and returns a new EntityRefStep instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EntityRefStep.create = function (model) {
            return internal.instancehelpers.createElement(model, EntityRefStep);
        };
        /** @internal */
        EntityRefStep.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EntityRefStep.structureTypeName = "DomainModels$EntityRefStep";
        EntityRefStep.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.11.0",
            "properties": {
                "association": {
                    "required": {
                        "currentValue": true
                    }
                },
                "destinationEntity": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return EntityRefStep;
    }(internal.Element));
    domainmodels.EntityRefStep = EntityRefStep;
    var EnumerationAttributeType = /** @class */ (function (_super) {
        __extends(EnumerationAttributeType, _super);
        function EnumerationAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__enumeration = new internal.ByNameReferenceProperty(EnumerationAttributeType, _this, "enumeration", null, "Enumerations$Enumeration");
            if (arguments.length < 4) {
                throw new Error("new EnumerationAttributeType() cannot be invoked directly, please use 'model.domainmodels.createEnumerationAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(EnumerationAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationAttributeType.prototype, "enumeration", {
            get: function () { return this.__enumeration.get(); },
            set: function (newValue) { this.__enumeration.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationAttributeType.prototype, "enumerationQualifiedName", {
            get: function () { return this.__enumeration.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EnumerationAttributeType instance in the SDK and on the server.
         * The new EnumerationAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        EnumerationAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, EnumerationAttributeType, "type", false);
        };
        /**
         * Creates and returns a new EnumerationAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EnumerationAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, EnumerationAttributeType);
        };
        /** @internal */
        EnumerationAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EnumerationAttributeType.structureTypeName = "DomainModels$EnumerationAttributeType";
        EnumerationAttributeType.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "enumeration": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EnumerationAttributeType;
    }(AttributeType));
    domainmodels.EnumerationAttributeType = EnumerationAttributeType;
    var RuleInfo = /** @class */ (function (_super) {
        __extends(RuleInfo, _super);
        function RuleInfo(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new RuleInfo() cannot be invoked directly, please use 'model.domainmodels.createRuleInfo()'");
            }
            return _this;
        }
        Object.defineProperty(RuleInfo.prototype, "containerAsValidationRule", {
            get: function () { return _super.prototype.getContainerAs.call(this, ValidationRule); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        RuleInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RuleInfo.structureTypeName = "DomainModels$RuleInfo";
        RuleInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RuleInfo;
    }(internal.Element));
    domainmodels.RuleInfo = RuleInfo;
    var EqualsToRuleInfo = /** @class */ (function (_super) {
        __extends(EqualsToRuleInfo, _super);
        function EqualsToRuleInfo(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__useValue = new internal.PrimitiveProperty(EqualsToRuleInfo, _this, "useValue", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__equalsToValue = new internal.PrimitiveProperty(EqualsToRuleInfo, _this, "equalsToValue", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__equalsToAttribute = new internal.ByNameReferenceProperty(EqualsToRuleInfo, _this, "equalsToAttribute", null, "DomainModels$Attribute");
            if (arguments.length < 4) {
                throw new Error("new EqualsToRuleInfo() cannot be invoked directly, please use 'model.domainmodels.createEqualsToRuleInfo()'");
            }
            return _this;
        }
        Object.defineProperty(EqualsToRuleInfo.prototype, "containerAsValidationRule", {
            get: function () { return _super.prototype.getContainerAs.call(this, ValidationRule); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EqualsToRuleInfo.prototype, "useValue", {
            get: function () { return this.__useValue.get(); },
            set: function (newValue) { this.__useValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EqualsToRuleInfo.prototype, "equalsToValue", {
            get: function () { return this.__equalsToValue.get(); },
            set: function (newValue) { this.__equalsToValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EqualsToRuleInfo.prototype, "equalsToAttribute", {
            get: function () { return this.__equalsToAttribute.get(); },
            set: function (newValue) { this.__equalsToAttribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EqualsToRuleInfo.prototype, "equalsToAttributeQualifiedName", {
            get: function () { return this.__equalsToAttribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EqualsToRuleInfo instance in the SDK and on the server.
         * The new EqualsToRuleInfo will be automatically stored in the 'ruleInfo' property
         * of the parent ValidationRule element passed as argument.
         */
        EqualsToRuleInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, EqualsToRuleInfo, "ruleInfo", false);
        };
        /**
         * Creates and returns a new EqualsToRuleInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EqualsToRuleInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, EqualsToRuleInfo);
        };
        /** @internal */
        EqualsToRuleInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.useValue = true;
        };
        EqualsToRuleInfo.structureTypeName = "DomainModels$EqualsToRuleInfo";
        EqualsToRuleInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return EqualsToRuleInfo;
    }(RuleInfo));
    domainmodels.EqualsToRuleInfo = EqualsToRuleInfo;
    /**
     * See: {@link https://docs.mendix.com/refguide7/event-handlers relevant section in reference guide}
     */
    var EventHandler = /** @class */ (function (_super) {
        __extends(EventHandler, _super);
        function EventHandler(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__moment = new internal.EnumProperty(EventHandler, _this, "moment", ActionMoment.After, ActionMoment);
            /** @internal */
            _this.__event = new internal.EnumProperty(EventHandler, _this, "event", EventType.Commit, EventType);
            /** @internal */
            _this.__microflow = new internal.ByNameReferenceProperty(EventHandler, _this, "microflow", null, "Microflows$Microflow");
            /** @internal */
            _this.__raiseErrorOnFalse = new internal.PrimitiveProperty(EventHandler, _this, "raiseErrorOnFalse", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__passEventObject = new internal.PrimitiveProperty(EventHandler, _this, "passEventObject", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new EventHandler() cannot be invoked directly, please use 'model.domainmodels.createEventHandler()'");
            }
            return _this;
        }
        Object.defineProperty(EventHandler.prototype, "containerAsEntity", {
            get: function () { return _super.prototype.getContainerAs.call(this, Entity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandler.prototype, "moment", {
            get: function () { return this.__moment.get(); },
            set: function (newValue) { this.__moment.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandler.prototype, "event", {
            get: function () { return this.__event.get(); },
            set: function (newValue) { this.__event.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandler.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandler.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandler.prototype, "raiseErrorOnFalse", {
            get: function () { return this.__raiseErrorOnFalse.get(); },
            set: function (newValue) { this.__raiseErrorOnFalse.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandler.prototype, "passEventObject", {
            get: function () { return this.__passEventObject.get(); },
            set: function (newValue) { this.__passEventObject.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EventHandler instance in the SDK and on the server.
         * The new EventHandler will be automatically stored in the 'eventHandlers' property
         * of the parent Entity element passed as argument.
         */
        EventHandler.createIn = function (container) {
            return internal.instancehelpers.createElement(container, EventHandler, "eventHandlers", true);
        };
        /**
         * Creates and returns a new EventHandler instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EventHandler.create = function (model) {
            return internal.instancehelpers.createElement(model, EventHandler);
        };
        /** @internal */
        EventHandler.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.event = EventType.Commit;
            this.moment = ActionMoment.After;
            this.passEventObject = true;
            this.raiseErrorOnFalse = true;
        };
        EventHandler.structureTypeName = "DomainModels$EventHandler";
        EventHandler.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return EventHandler;
    }(internal.Element));
    domainmodels.EventHandler = EventHandler;
    /**
     * In version 6.0.0: deprecated
     */
    var FloatAttributeType = /** @class */ (function (_super) {
        __extends(FloatAttributeType, _super);
        function FloatAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new FloatAttributeType() cannot be invoked directly, please use 'model.domainmodels.createFloatAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(FloatAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new FloatAttributeType instance in the SDK and on the server.
         * The new FloatAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        FloatAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, FloatAttributeType, "type", false);
        };
        /**
         * Creates and returns a new FloatAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FloatAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, FloatAttributeType);
        };
        /** @internal */
        FloatAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        FloatAttributeType.structureTypeName = "DomainModels$FloatAttributeType";
        FloatAttributeType.versionInfo = new exports.StructureVersionInfo({
            "deprecated": "6.0.0",
            "deprecationMessage": "FloatAttributeType has been deprecated. Please use DecimalAttributeType instead.",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return FloatAttributeType;
    }(FloatAttributeTypeBase));
    domainmodels.FloatAttributeType = FloatAttributeType;
    var GeneralizationBase = /** @class */ (function (_super) {
        __extends(GeneralizationBase, _super);
        function GeneralizationBase(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new GeneralizationBase() cannot be invoked directly, please use 'model.domainmodels.createGeneralizationBase()'");
            }
            return _this;
        }
        Object.defineProperty(GeneralizationBase.prototype, "containerAsEntity", {
            get: function () { return _super.prototype.getContainerAs.call(this, Entity); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        GeneralizationBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        GeneralizationBase.structureTypeName = "DomainModels$GeneralizationBase";
        GeneralizationBase.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return GeneralizationBase;
    }(internal.Element));
    domainmodels.GeneralizationBase = GeneralizationBase;
    var Generalization = /** @class */ (function (_super) {
        __extends(Generalization, _super);
        function Generalization(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__generalization = new internal.ByNameReferenceProperty(Generalization, _this, "generalization", null, "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new Generalization() cannot be invoked directly, please use 'model.domainmodels.createGeneralization()'");
            }
            return _this;
        }
        Object.defineProperty(Generalization.prototype, "containerAsEntity", {
            get: function () { return _super.prototype.getContainerAs.call(this, Entity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Generalization.prototype, "generalization", {
            get: function () { return this.__generalization.get(); },
            set: function (newValue) { this.__generalization.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Generalization.prototype, "generalizationQualifiedName", {
            get: function () { return this.__generalization.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Generalization instance in the SDK and on the server.
         * The new Generalization will be automatically stored in the 'generalization' property
         * of the parent Entity element passed as argument.
         */
        Generalization.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Generalization, "generalization", false);
        };
        /**
         * Creates and returns a new Generalization instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Generalization.create = function (model) {
            return internal.instancehelpers.createElement(model, Generalization);
        };
        /** @internal */
        Generalization.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Generalization.structureTypeName = "DomainModels$Generalization";
        Generalization.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "generalization": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return Generalization;
    }(GeneralizationBase));
    domainmodels.Generalization = Generalization;
    var HashedStringAttributeType = /** @class */ (function (_super) {
        __extends(HashedStringAttributeType, _super);
        function HashedStringAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new HashedStringAttributeType() cannot be invoked directly, please use 'model.domainmodels.createHashedStringAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(HashedStringAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new HashedStringAttributeType instance in the SDK and on the server.
         * The new HashedStringAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        HashedStringAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, HashedStringAttributeType, "type", false);
        };
        /**
         * Creates and returns a new HashedStringAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        HashedStringAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, HashedStringAttributeType);
        };
        /** @internal */
        HashedStringAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        HashedStringAttributeType.structureTypeName = "DomainModels$HashedStringAttributeType";
        HashedStringAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return HashedStringAttributeType;
    }(AttributeType));
    domainmodels.HashedStringAttributeType = HashedStringAttributeType;
    /**
     * See: {@link https://docs.mendix.com/refguide7/indexes relevant section in reference guide}
     */
    var Index = /** @class */ (function (_super) {
        __extends(Index, _super);
        function Index(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__dataStorageGuid = new internal.PrimitiveProperty(Index, _this, "dataStorageGuid", "", internal.PrimitiveTypeEnum.Guid);
            /** @internal */
            _this.__attributes = new internal.PartListProperty(Index, _this, "attributes", []);
            if (arguments.length < 4) {
                throw new Error("new Index() cannot be invoked directly, please use 'model.domainmodels.createIndex()'");
            }
            return _this;
        }
        Object.defineProperty(Index.prototype, "containerAsEntity", {
            get: function () { return _super.prototype.getContainerAs.call(this, Entity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Index.prototype, "dataStorageGuid", {
            get: function () { return this.__dataStorageGuid.get(); },
            set: function (newValue) { this.__dataStorageGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Index.prototype, "attributes", {
            get: function () { return this.__attributes.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Index instance in the SDK and on the server.
         * The new Index will be automatically stored in the 'indexes' property
         * of the parent Entity element passed as argument.
         */
        Index.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Index, "indexes", true);
        };
        /**
         * Creates and returns a new Index instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Index.create = function (model) {
            return internal.instancehelpers.createElement(model, Index);
        };
        /** @internal */
        Index.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataStorageGuid = utils_1.utils.randomUuid();
        };
        Index.structureTypeName = "DomainModels$Index";
        Index.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Index;
    }(internal.Element));
    domainmodels.Index = Index;
    var IndexedAttribute = /** @class */ (function (_super) {
        __extends(IndexedAttribute, _super);
        function IndexedAttribute(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__type = new internal.EnumProperty(IndexedAttribute, _this, "type", IndexedAttributeType.Normal, IndexedAttributeType);
            /** @internal */
            _this.__attribute = new internal.ByIdReferenceProperty(IndexedAttribute, _this, "attribute", null);
            if (arguments.length < 4) {
                throw new Error("new IndexedAttribute() cannot be invoked directly, please use 'model.domainmodels.createIndexedAttribute()'");
            }
            return _this;
        }
        Object.defineProperty(IndexedAttribute.prototype, "containerAsIndex", {
            get: function () { return _super.prototype.getContainerAs.call(this, Index); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IndexedAttribute.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IndexedAttribute.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new IndexedAttribute instance in the SDK and on the server.
         * The new IndexedAttribute will be automatically stored in the 'attributes' property
         * of the parent Index element passed as argument.
         */
        IndexedAttribute.createIn = function (container) {
            return internal.instancehelpers.createElement(container, IndexedAttribute, "attributes", true);
        };
        /**
         * Creates and returns a new IndexedAttribute instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        IndexedAttribute.create = function (model) {
            return internal.instancehelpers.createElement(model, IndexedAttribute);
        };
        /** @internal */
        IndexedAttribute.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = IndexedAttributeType.Normal;
        };
        IndexedAttribute.structureTypeName = "DomainModels$IndexedAttribute";
        IndexedAttribute.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return IndexedAttribute;
    }(internal.Element));
    domainmodels.IndexedAttribute = IndexedAttribute;
    /**
     * In version 7.11.0: introduced
     */
    var IndirectEntityRef = /** @class */ (function (_super) {
        __extends(IndirectEntityRef, _super);
        function IndirectEntityRef(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__steps = new internal.PartListProperty(IndirectEntityRef, _this, "steps", []);
            if (arguments.length < 4) {
                throw new Error("new IndirectEntityRef() cannot be invoked directly, please use 'model.domainmodels.createIndirectEntityRef()'");
            }
            return _this;
        }
        Object.defineProperty(IndirectEntityRef.prototype, "containerAsWidgetValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, customwidgets_1.customwidgets.WidgetValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IndirectEntityRef.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IndirectEntityRef.prototype, "containerAsMemberRef", {
            get: function () { return _super.prototype.getContainerAs.call(this, MemberRef); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IndirectEntityRef.prototype, "containerAsEntityPathSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.EntityPathSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IndirectEntityRef.prototype, "containerAsNewButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NewButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IndirectEntityRef.prototype, "containerAsReferenceSetSelector", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ReferenceSetSelector); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IndirectEntityRef.prototype, "containerAsSelectorXPathSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SelectorXPathSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IndirectEntityRef.prototype, "steps", {
            get: function () { return this.__steps.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new IndirectEntityRef instance in the SDK and on the server.
         * The new IndirectEntityRef will be automatically stored in the 'entityRef' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        IndirectEntityRef.createInWidgetValueUnderEntityRef = function (container) {
            internal.createInVersionCheck(container.model, IndirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, IndirectEntityRef, "entityRef", false);
        };
        /**
         * Creates and returns a new IndirectEntityRef instance in the SDK and on the server.
         * The new IndirectEntityRef will be automatically stored in the 'entityRef' property
         * of the parent documenttemplates.EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        IndirectEntityRef.createInEntityWidgetUnderEntityRef = function (container) {
            internal.createInVersionCheck(container.model, IndirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, IndirectEntityRef, "entityRef", false);
        };
        /**
         * Creates and returns a new IndirectEntityRef instance in the SDK and on the server.
         * The new IndirectEntityRef will be automatically stored in the 'entityRef' property
         * of the parent MemberRef element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        IndirectEntityRef.createInMemberRefUnderEntityRef = function (container) {
            internal.createInVersionCheck(container.model, IndirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, IndirectEntityRef, "entityRef", false);
        };
        /**
         * Creates and returns a new IndirectEntityRef instance in the SDK and on the server.
         * The new IndirectEntityRef will be automatically stored in the 'entityRef' property
         * of the parent pages.EntityPathSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        IndirectEntityRef.createInEntityPathSourceUnderEntityRef = function (container) {
            internal.createInVersionCheck(container.model, IndirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, IndirectEntityRef, "entityRef", false);
        };
        /**
         * Creates and returns a new IndirectEntityRef instance in the SDK and on the server.
         * The new IndirectEntityRef will be automatically stored in the 'entityRef' property
         * of the parent pages.NewButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        IndirectEntityRef.createInNewButtonUnderEntityRef = function (container) {
            internal.createInVersionCheck(container.model, IndirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, IndirectEntityRef, "entityRef", false);
        };
        /**
         * Creates and returns a new IndirectEntityRef instance in the SDK and on the server.
         * The new IndirectEntityRef will be automatically stored in the 'constrainedByRefs' property
         * of the parent pages.ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        IndirectEntityRef.createInReferenceSetSelectorUnderConstrainedByRefs = function (container) {
            internal.createInVersionCheck(container.model, IndirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, IndirectEntityRef, "constrainedByRefs", true);
        };
        /**
         * Creates and returns a new IndirectEntityRef instance in the SDK and on the server.
         * The new IndirectEntityRef will be automatically stored in the 'constrainedByRefs' property
         * of the parent pages.SelectorXPathSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        IndirectEntityRef.createInSelectorXPathSourceUnderConstrainedByRefs = function (container) {
            internal.createInVersionCheck(container.model, IndirectEntityRef.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, IndirectEntityRef, "constrainedByRefs", true);
        };
        /**
         * Creates and returns a new IndirectEntityRef instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        IndirectEntityRef.create = function (model) {
            return internal.instancehelpers.createElement(model, IndirectEntityRef);
        };
        /** @internal */
        IndirectEntityRef.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        IndirectEntityRef.structureTypeName = "DomainModels$IndirectEntityRef";
        IndirectEntityRef.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.11.0"
        }, internal.StructureType.Element);
        return IndirectEntityRef;
    }(EntityRef));
    domainmodels.IndirectEntityRef = IndirectEntityRef;
    var IntegerAttributeType = /** @class */ (function (_super) {
        __extends(IntegerAttributeType, _super);
        function IntegerAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new IntegerAttributeType() cannot be invoked directly, please use 'model.domainmodels.createIntegerAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(IntegerAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new IntegerAttributeType instance in the SDK and on the server.
         * The new IntegerAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        IntegerAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, IntegerAttributeType, "type", false);
        };
        /**
         * Creates and returns a new IntegerAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        IntegerAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, IntegerAttributeType);
        };
        /** @internal */
        IntegerAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        IntegerAttributeType.structureTypeName = "DomainModels$IntegerAttributeType";
        IntegerAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return IntegerAttributeType;
    }(IntegerAttributeTypeBase));
    domainmodels.IntegerAttributeType = IntegerAttributeType;
    var LongAttributeType = /** @class */ (function (_super) {
        __extends(LongAttributeType, _super);
        function LongAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new LongAttributeType() cannot be invoked directly, please use 'model.domainmodels.createLongAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(LongAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new LongAttributeType instance in the SDK and on the server.
         * The new LongAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        LongAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LongAttributeType, "type", false);
        };
        /**
         * Creates and returns a new LongAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LongAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, LongAttributeType);
        };
        /** @internal */
        LongAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        LongAttributeType.structureTypeName = "DomainModels$LongAttributeType";
        LongAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return LongAttributeType;
    }(IntegerAttributeTypeBase));
    domainmodels.LongAttributeType = LongAttributeType;
    var MaxLengthRuleInfo = /** @class */ (function (_super) {
        __extends(MaxLengthRuleInfo, _super);
        function MaxLengthRuleInfo(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__maxLength = new internal.PrimitiveProperty(MaxLengthRuleInfo, _this, "maxLength", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new MaxLengthRuleInfo() cannot be invoked directly, please use 'model.domainmodels.createMaxLengthRuleInfo()'");
            }
            return _this;
        }
        Object.defineProperty(MaxLengthRuleInfo.prototype, "containerAsValidationRule", {
            get: function () { return _super.prototype.getContainerAs.call(this, ValidationRule); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MaxLengthRuleInfo.prototype, "maxLength", {
            get: function () { return this.__maxLength.get(); },
            set: function (newValue) { this.__maxLength.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MaxLengthRuleInfo instance in the SDK and on the server.
         * The new MaxLengthRuleInfo will be automatically stored in the 'ruleInfo' property
         * of the parent ValidationRule element passed as argument.
         */
        MaxLengthRuleInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MaxLengthRuleInfo, "ruleInfo", false);
        };
        /**
         * Creates and returns a new MaxLengthRuleInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MaxLengthRuleInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, MaxLengthRuleInfo);
        };
        /** @internal */
        MaxLengthRuleInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MaxLengthRuleInfo.structureTypeName = "DomainModels$MaxLengthRuleInfo";
        MaxLengthRuleInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MaxLengthRuleInfo;
    }(RuleInfo));
    domainmodels.MaxLengthRuleInfo = MaxLengthRuleInfo;
    var MemberAccess = /** @class */ (function (_super) {
        __extends(MemberAccess, _super);
        function MemberAccess(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__attribute = new internal.ByNameReferenceProperty(MemberAccess, _this, "attribute", null, "DomainModels$Attribute");
            /** @internal */
            _this.__association = new internal.ByNameReferenceProperty(MemberAccess, _this, "association", null, "DomainModels$AssociationBase");
            /** @internal */
            _this.__accessRights = new internal.EnumProperty(MemberAccess, _this, "accessRights", MemberAccessRights.None, MemberAccessRights);
            if (arguments.length < 4) {
                throw new Error("new MemberAccess() cannot be invoked directly, please use 'model.domainmodels.createMemberAccess()'");
            }
            return _this;
        }
        Object.defineProperty(MemberAccess.prototype, "containerAsAccessRule", {
            get: function () { return _super.prototype.getContainerAs.call(this, AccessRule); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberAccess.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberAccess.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberAccess.prototype, "association", {
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberAccess.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberAccess.prototype, "accessRights", {
            get: function () { return this.__accessRights.get(); },
            set: function (newValue) { this.__accessRights.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MemberAccess instance in the SDK and on the server.
         * The new MemberAccess will be automatically stored in the 'memberAccesses' property
         * of the parent AccessRule element passed as argument.
         */
        MemberAccess.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MemberAccess, "memberAccesses", true);
        };
        /**
         * Creates and returns a new MemberAccess instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MemberAccess.create = function (model) {
            return internal.instancehelpers.createElement(model, MemberAccess);
        };
        /** @internal */
        MemberAccess.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.accessRights = MemberAccessRights.None;
        };
        MemberAccess.structureTypeName = "DomainModels$MemberAccess";
        MemberAccess.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MemberAccess;
    }(internal.Element));
    domainmodels.MemberAccess = MemberAccess;
    var NoGeneralization = /** @class */ (function (_super) {
        __extends(NoGeneralization, _super);
        function NoGeneralization(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__hasChangedDate = new internal.PrimitiveProperty(NoGeneralization, _this, "hasChangedDate", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__hasCreatedDate = new internal.PrimitiveProperty(NoGeneralization, _this, "hasCreatedDate", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__hasOwner = new internal.PrimitiveProperty(NoGeneralization, _this, "hasOwner", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__hasChangedBy = new internal.PrimitiveProperty(NoGeneralization, _this, "hasChangedBy", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__persistable = new internal.PrimitiveProperty(NoGeneralization, _this, "persistable", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new NoGeneralization() cannot be invoked directly, please use 'model.domainmodels.createNoGeneralization()'");
            }
            return _this;
        }
        Object.defineProperty(NoGeneralization.prototype, "containerAsEntity", {
            get: function () { return _super.prototype.getContainerAs.call(this, Entity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoGeneralization.prototype, "hasChangedDate", {
            get: function () { return this.__hasChangedDate.get(); },
            set: function (newValue) { this.__hasChangedDate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoGeneralization.prototype, "hasCreatedDate", {
            get: function () { return this.__hasCreatedDate.get(); },
            set: function (newValue) { this.__hasCreatedDate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoGeneralization.prototype, "hasOwner", {
            get: function () { return this.__hasOwner.get(); },
            set: function (newValue) { this.__hasOwner.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoGeneralization.prototype, "hasChangedBy", {
            get: function () { return this.__hasChangedBy.get(); },
            set: function (newValue) { this.__hasChangedBy.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoGeneralization.prototype, "persistable", {
            get: function () { return this.__persistable.get(); },
            set: function (newValue) { this.__persistable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NoGeneralization instance in the SDK and on the server.
         * The new NoGeneralization will be automatically stored in the 'generalization' property
         * of the parent Entity element passed as argument.
         */
        NoGeneralization.createIn = function (container) {
            return internal.instancehelpers.createElement(container, NoGeneralization, "generalization", false);
        };
        /**
         * Creates and returns a new NoGeneralization instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NoGeneralization.create = function (model) {
            return internal.instancehelpers.createElement(model, NoGeneralization);
        };
        /** @internal */
        NoGeneralization.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.persistable = true;
        };
        NoGeneralization.structureTypeName = "DomainModels$NoGeneralization";
        NoGeneralization.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "persistable": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return NoGeneralization;
    }(GeneralizationBase));
    domainmodels.NoGeneralization = NoGeneralization;
    var RangeRuleInfo = /** @class */ (function (_super) {
        __extends(RangeRuleInfo, _super);
        function RangeRuleInfo(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__typeOfRange = new internal.EnumProperty(RangeRuleInfo, _this, "typeOfRange", RangeType.Between, RangeType);
            /** @internal */
            _this.__useMinValue = new internal.PrimitiveProperty(RangeRuleInfo, _this, "useMinValue", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__useMaxValue = new internal.PrimitiveProperty(RangeRuleInfo, _this, "useMaxValue", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__minValue = new internal.PrimitiveProperty(RangeRuleInfo, _this, "minValue", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__maxValue = new internal.PrimitiveProperty(RangeRuleInfo, _this, "maxValue", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__minAttribute = new internal.ByNameReferenceProperty(RangeRuleInfo, _this, "minAttribute", null, "DomainModels$Attribute");
            /** @internal */
            _this.__maxAttribute = new internal.ByNameReferenceProperty(RangeRuleInfo, _this, "maxAttribute", null, "DomainModels$Attribute");
            if (arguments.length < 4) {
                throw new Error("new RangeRuleInfo() cannot be invoked directly, please use 'model.domainmodels.createRangeRuleInfo()'");
            }
            return _this;
        }
        Object.defineProperty(RangeRuleInfo.prototype, "containerAsValidationRule", {
            get: function () { return _super.prototype.getContainerAs.call(this, ValidationRule); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeRuleInfo.prototype, "typeOfRange", {
            get: function () { return this.__typeOfRange.get(); },
            set: function (newValue) { this.__typeOfRange.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeRuleInfo.prototype, "useMinValue", {
            get: function () { return this.__useMinValue.get(); },
            set: function (newValue) { this.__useMinValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeRuleInfo.prototype, "useMaxValue", {
            get: function () { return this.__useMaxValue.get(); },
            set: function (newValue) { this.__useMaxValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeRuleInfo.prototype, "minValue", {
            get: function () { return this.__minValue.get(); },
            set: function (newValue) { this.__minValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeRuleInfo.prototype, "maxValue", {
            get: function () { return this.__maxValue.get(); },
            set: function (newValue) { this.__maxValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeRuleInfo.prototype, "minAttribute", {
            get: function () { return this.__minAttribute.get(); },
            set: function (newValue) { this.__minAttribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeRuleInfo.prototype, "minAttributeQualifiedName", {
            get: function () { return this.__minAttribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeRuleInfo.prototype, "maxAttribute", {
            get: function () { return this.__maxAttribute.get(); },
            set: function (newValue) { this.__maxAttribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeRuleInfo.prototype, "maxAttributeQualifiedName", {
            get: function () { return this.__maxAttribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RangeRuleInfo instance in the SDK and on the server.
         * The new RangeRuleInfo will be automatically stored in the 'ruleInfo' property
         * of the parent ValidationRule element passed as argument.
         */
        RangeRuleInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RangeRuleInfo, "ruleInfo", false);
        };
        /**
         * Creates and returns a new RangeRuleInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RangeRuleInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, RangeRuleInfo);
        };
        /** @internal */
        RangeRuleInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.typeOfRange = RangeType.Between;
            this.useMaxValue = true;
            this.useMinValue = true;
        };
        RangeRuleInfo.structureTypeName = "DomainModels$RangeRuleInfo";
        RangeRuleInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RangeRuleInfo;
    }(RuleInfo));
    domainmodels.RangeRuleInfo = RangeRuleInfo;
    var RegExRuleInfo = /** @class */ (function (_super) {
        __extends(RegExRuleInfo, _super);
        function RegExRuleInfo(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__regularExpression = new internal.ByNameReferenceProperty(RegExRuleInfo, _this, "regularExpression", null, "RegularExpressions$RegularExpression");
            if (arguments.length < 4) {
                throw new Error("new RegExRuleInfo() cannot be invoked directly, please use 'model.domainmodels.createRegExRuleInfo()'");
            }
            return _this;
        }
        Object.defineProperty(RegExRuleInfo.prototype, "containerAsValidationRule", {
            get: function () { return _super.prototype.getContainerAs.call(this, ValidationRule); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RegExRuleInfo.prototype, "regularExpression", {
            get: function () { return this.__regularExpression.get(); },
            set: function (newValue) { this.__regularExpression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RegExRuleInfo.prototype, "regularExpressionQualifiedName", {
            get: function () { return this.__regularExpression.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RegExRuleInfo instance in the SDK and on the server.
         * The new RegExRuleInfo will be automatically stored in the 'ruleInfo' property
         * of the parent ValidationRule element passed as argument.
         */
        RegExRuleInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RegExRuleInfo, "ruleInfo", false);
        };
        /**
         * Creates and returns a new RegExRuleInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RegExRuleInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, RegExRuleInfo);
        };
        /** @internal */
        RegExRuleInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RegExRuleInfo.structureTypeName = "DomainModels$RegExRuleInfo";
        RegExRuleInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RegExRuleInfo;
    }(RuleInfo));
    domainmodels.RegExRuleInfo = RegExRuleInfo;
    var RequiredRuleInfo = /** @class */ (function (_super) {
        __extends(RequiredRuleInfo, _super);
        function RequiredRuleInfo(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new RequiredRuleInfo() cannot be invoked directly, please use 'model.domainmodels.createRequiredRuleInfo()'");
            }
            return _this;
        }
        Object.defineProperty(RequiredRuleInfo.prototype, "containerAsValidationRule", {
            get: function () { return _super.prototype.getContainerAs.call(this, ValidationRule); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RequiredRuleInfo instance in the SDK and on the server.
         * The new RequiredRuleInfo will be automatically stored in the 'ruleInfo' property
         * of the parent ValidationRule element passed as argument.
         */
        RequiredRuleInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RequiredRuleInfo, "ruleInfo", false);
        };
        /**
         * Creates and returns a new RequiredRuleInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RequiredRuleInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, RequiredRuleInfo);
        };
        /** @internal */
        RequiredRuleInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RequiredRuleInfo.structureTypeName = "DomainModels$RequiredRuleInfo";
        RequiredRuleInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RequiredRuleInfo;
    }(RuleInfo));
    domainmodels.RequiredRuleInfo = RequiredRuleInfo;
    /**
     * In version 6.6.0: added public
     */
    var StoredValue = /** @class */ (function (_super) {
        __extends(StoredValue, _super);
        function StoredValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__defaultValue = new internal.PrimitiveProperty(StoredValue, _this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new StoredValue() cannot be invoked directly, please use 'model.domainmodels.createStoredValue()'");
            }
            return _this;
        }
        Object.defineProperty(StoredValue.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StoredValue.prototype, "defaultValue", {
            get: function () { return this.__defaultValue.get(); },
            set: function (newValue) { this.__defaultValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new StoredValue instance in the SDK and on the server.
         * The new StoredValue will be automatically stored in the 'value' property
         * of the parent Attribute element passed as argument.
         */
        StoredValue.createIn = function (container) {
            return internal.instancehelpers.createElement(container, StoredValue, "value", false);
        };
        /**
         * Creates and returns a new StoredValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StoredValue.create = function (model) {
            return internal.instancehelpers.createElement(model, StoredValue);
        };
        /** @internal */
        StoredValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        StoredValue.structureTypeName = "DomainModels$StoredValue";
        StoredValue.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true,
                "changedIn": [
                    "6.6.0"
                ]
            }
        }, internal.StructureType.Element);
        return StoredValue;
    }(ValueType));
    domainmodels.StoredValue = StoredValue;
    var StringAttributeType = /** @class */ (function (_super) {
        __extends(StringAttributeType, _super);
        function StringAttributeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__length = new internal.PrimitiveProperty(StringAttributeType, _this, "length", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new StringAttributeType() cannot be invoked directly, please use 'model.domainmodels.createStringAttributeType()'");
            }
            return _this;
        }
        Object.defineProperty(StringAttributeType.prototype, "containerAsAttribute", {
            get: function () { return _super.prototype.getContainerAs.call(this, Attribute); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringAttributeType.prototype, "length", {
            get: function () { return this.__length.get(); },
            set: function (newValue) { this.__length.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new StringAttributeType instance in the SDK and on the server.
         * The new StringAttributeType will be automatically stored in the 'type' property
         * of the parent Attribute element passed as argument.
         */
        StringAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, StringAttributeType, "type", false);
        };
        /**
         * Creates and returns a new StringAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StringAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, StringAttributeType);
        };
        /** @internal */
        StringAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.length = 200;
        };
        StringAttributeType.structureTypeName = "DomainModels$StringAttributeType";
        StringAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return StringAttributeType;
    }(AttributeType));
    domainmodels.StringAttributeType = StringAttributeType;
    var UniqueRuleInfo = /** @class */ (function (_super) {
        __extends(UniqueRuleInfo, _super);
        function UniqueRuleInfo(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new UniqueRuleInfo() cannot be invoked directly, please use 'model.domainmodels.createUniqueRuleInfo()'");
            }
            return _this;
        }
        Object.defineProperty(UniqueRuleInfo.prototype, "containerAsValidationRule", {
            get: function () { return _super.prototype.getContainerAs.call(this, ValidationRule); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new UniqueRuleInfo instance in the SDK and on the server.
         * The new UniqueRuleInfo will be automatically stored in the 'ruleInfo' property
         * of the parent ValidationRule element passed as argument.
         */
        UniqueRuleInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, UniqueRuleInfo, "ruleInfo", false);
        };
        /**
         * Creates and returns a new UniqueRuleInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        UniqueRuleInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, UniqueRuleInfo);
        };
        /** @internal */
        UniqueRuleInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        UniqueRuleInfo.structureTypeName = "DomainModels$UniqueRuleInfo";
        UniqueRuleInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return UniqueRuleInfo;
    }(RuleInfo));
    domainmodels.UniqueRuleInfo = UniqueRuleInfo;
    /**
     * See: {@link https://docs.mendix.com/refguide7/validation-rules relevant section in reference guide}
     */
    var ValidationRule = /** @class */ (function (_super) {
        __extends(ValidationRule, _super);
        function ValidationRule(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__attribute = new internal.ByNameReferenceProperty(ValidationRule, _this, "attribute", null, "DomainModels$Attribute");
            /** @internal */
            _this.__errorMessage = new internal.PartProperty(ValidationRule, _this, "errorMessage", null, true);
            /** @internal */
            _this.__ruleInfo = new internal.PartProperty(ValidationRule, _this, "ruleInfo", null, true);
            if (arguments.length < 4) {
                throw new Error("new ValidationRule() cannot be invoked directly, please use 'model.domainmodels.createValidationRule()'");
            }
            return _this;
        }
        Object.defineProperty(ValidationRule.prototype, "containerAsEntity", {
            get: function () { return _super.prototype.getContainerAs.call(this, Entity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationRule.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationRule.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationRule.prototype, "errorMessage", {
            get: function () { return this.__errorMessage.get(); },
            set: function (newValue) { this.__errorMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationRule.prototype, "ruleInfo", {
            get: function () { return this.__ruleInfo.get(); },
            set: function (newValue) { this.__ruleInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ValidationRule instance in the SDK and on the server.
         * The new ValidationRule will be automatically stored in the 'validationRules' property
         * of the parent Entity element passed as argument.
         */
        ValidationRule.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ValidationRule, "validationRules", true);
        };
        /**
         * Creates and returns a new ValidationRule instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ValidationRule.create = function (model) {
            return internal.instancehelpers.createElement(model, ValidationRule);
        };
        /** @internal */
        ValidationRule.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.errorMessage = texts_1.texts.Text.create(this.model);
            this.ruleInfo = RequiredRuleInfo.create(this.model);
        };
        ValidationRule.structureTypeName = "DomainModels$ValidationRule";
        ValidationRule.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "attribute": {
                    "required": {
                        "currentValue": true
                    }
                },
                "errorMessage": {
                    "required": {
                        "currentValue": true
                    }
                },
                "ruleInfo": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ValidationRule;
    }(internal.Element));
    domainmodels.ValidationRule = ValidationRule;
})(domainmodels = exports.domainmodels || (exports.domainmodels = {}));
var customwidgets_1 = require("./customwidgets");
var documenttemplates_1 = require("./documenttemplates");
var expressions_1 = require("./expressions");
var microflows_1 = require("./microflows");
var pages_1 = require("./pages");
var pluginwidgets_1 = require("./pluginwidgets");
var security_1 = require("./security");
var texts_1 = require("./texts");
//# sourceMappingURL=domainmodels.js.map