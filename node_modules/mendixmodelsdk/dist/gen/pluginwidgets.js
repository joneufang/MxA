"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var pages_1 = require("./pages");
var pluginwidgets;
(function (pluginwidgets) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `PluginWidgets`.
     */
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    var PropertyValue = /** @class */ (function (_super) {
        __extends(PropertyValue, _super);
        function PropertyValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new PropertyValue() cannot be invoked directly, please use 'model.pluginwidgets.createPropertyValue()'");
            }
            return _this;
        }
        Object.defineProperty(PropertyValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        PropertyValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        PropertyValue.structureTypeName = "PluginWidgets$PropertyValue";
        PropertyValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.1.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return PropertyValue;
    }(internal.Element));
    pluginwidgets.PropertyValue = PropertyValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.6.0: introduced
     */
    var ActionValue = /** @class */ (function (_super) {
        __extends(ActionValue, _super);
        function ActionValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PartProperty(ActionValue, _this, "value", null, false);
            if (arguments.length < 4) {
                throw new Error("new ActionValue() cannot be invoked directly, please use 'model.pluginwidgets.createActionValue()'");
            }
            return _this;
        }
        Object.defineProperty(ActionValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionValue.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ActionValue instance in the SDK and on the server.
         * The new ActionValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        ActionValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, ActionValue.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ActionValue, "value", false);
        };
        /**
         * Creates and returns a new ActionValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ActionValue.create = function (model) {
            return internal.instancehelpers.createElement(model, ActionValue);
        };
        /** @internal */
        ActionValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ActionValue.structureTypeName = "PluginWidgets$ActionValue";
        ActionValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ActionValue;
    }(PropertyValue));
    pluginwidgets.ActionValue = ActionValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.4.0: introduced
     */
    var AttributeValue = /** @class */ (function (_super) {
        __extends(AttributeValue, _super);
        function AttributeValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PartProperty(AttributeValue, _this, "value", null, false);
            /** @internal */
            _this.__readOnly = new internal.PrimitiveProperty(AttributeValue, _this, "readOnly", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__validations = new internal.PartListProperty(AttributeValue, _this, "validations", []);
            /** @internal */
            _this.__numberFormat = new internal.PartProperty(AttributeValue, _this, "numberFormat", null, false);
            /** @internal */
            _this.__dateTimeFormat = new internal.PartProperty(AttributeValue, _this, "dateTimeFormat", null, false);
            if (arguments.length < 4) {
                throw new Error("new AttributeValue() cannot be invoked directly, please use 'model.pluginwidgets.createAttributeValue()'");
            }
            return _this;
        }
        Object.defineProperty(AttributeValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "value", {
            /**
             * In version 7.11.0: introduced
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "readOnly", {
            /**
             * In version 7.6.0: introduced
             */
            get: function () { return this.__readOnly.get(); },
            set: function (newValue) { this.__readOnly.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "validations", {
            /**
             * In version 7.7.0: introduced
             */
            get: function () { return this.__validations.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "numberFormat", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             *
             * In version 7.7.0: introduced
             */
            get: function () { return this.__numberFormat.get(); },
            set: function (newValue) { this.__numberFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "dateTimeFormat", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             *
             * In version 7.11.0: introduced
             */
            get: function () { return this.__dateTimeFormat.get(); },
            set: function (newValue) { this.__dateTimeFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AttributeValue instance in the SDK and on the server.
         * The new AttributeValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.4.0 and higher
         */
        AttributeValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, AttributeValue.structureTypeName, { start: "7.4.0" });
            return internal.instancehelpers.createElement(container, AttributeValue, "value", false);
        };
        /**
         * Creates and returns a new AttributeValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AttributeValue.create = function (model) {
            return internal.instancehelpers.createElement(model, AttributeValue);
        };
        /** @internal */
        AttributeValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AttributeValue.structureTypeName = "PluginWidgets$AttributeValue";
        AttributeValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.4.0",
            "properties": {
                "value": {
                    "introduced": "7.11.0"
                },
                "readOnly": {
                    "introduced": "7.6.0"
                },
                "validations": {
                    "introduced": "7.7.0"
                },
                "numberFormat": {
                    "introduced": "7.7.0"
                },
                "dateTimeFormat": {
                    "introduced": "7.11.0"
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return AttributeValue;
    }(PropertyValue));
    pluginwidgets.AttributeValue = AttributeValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    var PrimitiveValue = /** @class */ (function (_super) {
        __extends(PrimitiveValue, _super);
        function PrimitiveValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new PrimitiveValue() cannot be invoked directly, please use 'model.pluginwidgets.createPrimitiveValue()'");
            }
            return _this;
        }
        Object.defineProperty(PrimitiveValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        PrimitiveValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        PrimitiveValue.structureTypeName = "PluginWidgets$PrimitiveValue";
        PrimitiveValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.1.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return PrimitiveValue;
    }(PropertyValue));
    pluginwidgets.PrimitiveValue = PrimitiveValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    var BooleanValue = /** @class */ (function (_super) {
        __extends(BooleanValue, _super);
        function BooleanValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(BooleanValue, _this, "value", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new BooleanValue() cannot be invoked directly, please use 'model.pluginwidgets.createBooleanValue()'");
            }
            return _this;
        }
        Object.defineProperty(BooleanValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanValue.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BooleanValue instance in the SDK and on the server.
         * The new BooleanValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        BooleanValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, BooleanValue.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, BooleanValue, "value", false);
        };
        /**
         * Creates and returns a new BooleanValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BooleanValue.create = function (model) {
            return internal.instancehelpers.createElement(model, BooleanValue);
        };
        /** @internal */
        BooleanValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        BooleanValue.structureTypeName = "PluginWidgets$BooleanValue";
        BooleanValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.1.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BooleanValue;
    }(PrimitiveValue));
    pluginwidgets.BooleanValue = BooleanValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    var CompositeValue = /** @class */ (function (_super) {
        __extends(CompositeValue, _super);
        function CompositeValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__properties = new internal.PartListProperty(CompositeValue, _this, "properties", []);
            if (arguments.length < 4) {
                throw new Error("new CompositeValue() cannot be invoked directly, please use 'model.pluginwidgets.createCompositeValue()'");
            }
            return _this;
        }
        Object.defineProperty(CompositeValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompositeValue.prototype, "properties", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__properties.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CompositeValue instance in the SDK and on the server.
         * The new CompositeValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        CompositeValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, CompositeValue.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, CompositeValue, "value", false);
        };
        /**
         * Creates and returns a new CompositeValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CompositeValue.create = function (model) {
            return internal.instancehelpers.createElement(model, CompositeValue);
        };
        /** @internal */
        CompositeValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CompositeValue.structureTypeName = "PluginWidgets$CompositeValue";
        CompositeValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.1.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return CompositeValue;
    }(PropertyValue));
    pluginwidgets.CompositeValue = CompositeValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    var DateTimeFormat = /** @class */ (function (_super) {
        __extends(DateTimeFormat, _super);
        function DateTimeFormat(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__type = new internal.EnumProperty(DateTimeFormat, _this, "type", pages_1.pages.DateFormat.Date, pages_1.pages.DateFormat);
            /** @internal */
            _this.__pattern = new internal.PrimitiveProperty(DateTimeFormat, _this, "pattern", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new DateTimeFormat() cannot be invoked directly, please use 'model.pluginwidgets.createDateTimeFormat()'");
            }
            return _this;
        }
        Object.defineProperty(DateTimeFormat.prototype, "containerAsAttributeValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, AttributeValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeFormat.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeFormat.prototype, "pattern", {
            get: function () { return this.__pattern.get(); },
            set: function (newValue) { this.__pattern.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DateTimeFormat instance in the SDK and on the server.
         * The new DateTimeFormat will be automatically stored in the 'dateTimeFormat' property
         * of the parent AttributeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        DateTimeFormat.createIn = function (container) {
            internal.createInVersionCheck(container.model, DateTimeFormat.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, DateTimeFormat, "dateTimeFormat", false);
        };
        /**
         * Creates and returns a new DateTimeFormat instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DateTimeFormat.create = function (model) {
            return internal.instancehelpers.createElement(model, DateTimeFormat);
        };
        /** @internal */
        DateTimeFormat.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = pages_1.pages.DateFormat.Date;
        };
        DateTimeFormat.structureTypeName = "PluginWidgets$DateTimeFormat";
        DateTimeFormat.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.11.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DateTimeFormat;
    }(internal.Element));
    pluginwidgets.DateTimeFormat = DateTimeFormat;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.7.0: introduced
     */
    var NumberFormat = /** @class */ (function (_super) {
        __extends(NumberFormat, _super);
        function NumberFormat(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__groupDigits = new internal.PrimitiveProperty(NumberFormat, _this, "groupDigits", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new NumberFormat() cannot be invoked directly, please use 'model.pluginwidgets.createNumberFormat()'");
            }
            return _this;
        }
        Object.defineProperty(NumberFormat.prototype, "containerAsAttributeValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, AttributeValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NumberFormat.prototype, "groupDigits", {
            get: function () { return this.__groupDigits.get(); },
            set: function (newValue) { this.__groupDigits.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        NumberFormat.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NumberFormat.structureTypeName = "PluginWidgets$NumberFormat";
        NumberFormat.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.7.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return NumberFormat;
    }(internal.Element));
    pluginwidgets.NumberFormat = NumberFormat;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.7.0: introduced
     */
    var DecimalNumberFormat = /** @class */ (function (_super) {
        __extends(DecimalNumberFormat, _super);
        function DecimalNumberFormat(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__decimalPrecision = new internal.PrimitiveProperty(DecimalNumberFormat, _this, "decimalPrecision", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new DecimalNumberFormat() cannot be invoked directly, please use 'model.pluginwidgets.createDecimalNumberFormat()'");
            }
            return _this;
        }
        Object.defineProperty(DecimalNumberFormat.prototype, "containerAsAttributeValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, AttributeValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalNumberFormat.prototype, "decimalPrecision", {
            get: function () { return this.__decimalPrecision.get(); },
            set: function (newValue) { this.__decimalPrecision.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DecimalNumberFormat instance in the SDK and on the server.
         * The new DecimalNumberFormat will be automatically stored in the 'numberFormat' property
         * of the parent AttributeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        DecimalNumberFormat.createIn = function (container) {
            internal.createInVersionCheck(container.model, DecimalNumberFormat.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, DecimalNumberFormat, "numberFormat", false);
        };
        /**
         * Creates and returns a new DecimalNumberFormat instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DecimalNumberFormat.create = function (model) {
            return internal.instancehelpers.createElement(model, DecimalNumberFormat);
        };
        /** @internal */
        DecimalNumberFormat.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DecimalNumberFormat.structureTypeName = "PluginWidgets$DecimalNumberFormat";
        DecimalNumberFormat.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.7.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DecimalNumberFormat;
    }(NumberFormat));
    pluginwidgets.DecimalNumberFormat = DecimalNumberFormat;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    var DynamicTextValue = /** @class */ (function (_super) {
        __extends(DynamicTextValue, _super);
        function DynamicTextValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PartProperty(DynamicTextValue, _this, "value", null, true);
            if (arguments.length < 4) {
                throw new Error("new DynamicTextValue() cannot be invoked directly, please use 'model.pluginwidgets.createDynamicTextValue()'");
            }
            return _this;
        }
        Object.defineProperty(DynamicTextValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicTextValue.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DynamicTextValue instance in the SDK and on the server.
         * The new DynamicTextValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        DynamicTextValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, DynamicTextValue.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, DynamicTextValue, "value", false);
        };
        /**
         * Creates and returns a new DynamicTextValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DynamicTextValue.create = function (model) {
            return internal.instancehelpers.createElement(model, DynamicTextValue);
        };
        /** @internal */
        DynamicTextValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.value = pages_1.pages.ClientTemplate.create(this.model);
        };
        DynamicTextValue.structureTypeName = "PluginWidgets$DynamicTextValue";
        DynamicTextValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.1.0",
            "properties": {
                "value": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DynamicTextValue;
    }(PrimitiveValue));
    pluginwidgets.DynamicTextValue = DynamicTextValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var EnumValue = /** @class */ (function (_super) {
        __extends(EnumValue, _super);
        function EnumValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(EnumValue, _this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new EnumValue() cannot be invoked directly, please use 'model.pluginwidgets.createEnumValue()'");
            }
            return _this;
        }
        Object.defineProperty(EnumValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumValue.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EnumValue instance in the SDK and on the server.
         * The new EnumValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, EnumValue.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumValue, "value", false);
        };
        /**
         * Creates and returns a new EnumValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EnumValue.create = function (model) {
            return internal.instancehelpers.createElement(model, EnumValue);
        };
        /** @internal */
        EnumValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EnumValue.structureTypeName = "PluginWidgets$EnumValue";
        EnumValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EnumValue;
    }(PrimitiveValue));
    pluginwidgets.EnumValue = EnumValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.6.0: introduced
     */
    var ExpressionValue = /** @class */ (function (_super) {
        __extends(ExpressionValue, _super);
        function ExpressionValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(ExpressionValue, _this, "value", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__valueModel = new internal.PartProperty(ExpressionValue, _this, "valueModel", null, true);
            if (arguments.length < 4) {
                throw new Error("new ExpressionValue() cannot be invoked directly, please use 'model.pluginwidgets.createExpressionValue()'");
            }
            return _this;
        }
        Object.defineProperty(ExpressionValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExpressionValue.prototype, "value", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExpressionValue.prototype, "valueModel", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             *
             * In version 7.9.0: introduced
             */
            get: function () { return this.__valueModel.get(); },
            set: function (newValue) { this.__valueModel.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ExpressionValue instance in the SDK and on the server.
         * The new ExpressionValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        ExpressionValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, ExpressionValue.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ExpressionValue, "value", false);
        };
        /**
         * Creates and returns a new ExpressionValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExpressionValue.create = function (model) {
            return internal.instancehelpers.createElement(model, ExpressionValue);
        };
        /** @internal */
        ExpressionValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__valueModel.isAvailable) {
                this.valueModel = expressions_1.expressions.NoExpression.create(this.model);
            }
        };
        ExpressionValue.structureTypeName = "PluginWidgets$ExpressionValue";
        ExpressionValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0",
            "properties": {
                "valueModel": {
                    "introduced": "7.9.0",
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ExpressionValue;
    }(PropertyValue));
    pluginwidgets.ExpressionValue = ExpressionValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    var ImageValue = /** @class */ (function (_super) {
        __extends(ImageValue, _super);
        function ImageValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.ByIdReferenceProperty(ImageValue, _this, "value", null);
            if (arguments.length < 4) {
                throw new Error("new ImageValue() cannot be invoked directly, please use 'model.pluginwidgets.createImageValue()'");
            }
            return _this;
        }
        Object.defineProperty(ImageValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageValue.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ImageValue instance in the SDK and on the server.
         * The new ImageValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        ImageValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, ImageValue.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, ImageValue, "value", false);
        };
        /**
         * Creates and returns a new ImageValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImageValue.create = function (model) {
            return internal.instancehelpers.createElement(model, ImageValue);
        };
        /** @internal */
        ImageValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ImageValue.structureTypeName = "PluginWidgets$ImageValue";
        ImageValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.11.0",
            "properties": {
                "value": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ImageValue;
    }(PropertyValue));
    pluginwidgets.ImageValue = ImageValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.7.0: introduced
     */
    var IntegerNumberFormat = /** @class */ (function (_super) {
        __extends(IntegerNumberFormat, _super);
        function IntegerNumberFormat(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new IntegerNumberFormat() cannot be invoked directly, please use 'model.pluginwidgets.createIntegerNumberFormat()'");
            }
            return _this;
        }
        Object.defineProperty(IntegerNumberFormat.prototype, "containerAsAttributeValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, AttributeValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new IntegerNumberFormat instance in the SDK and on the server.
         * The new IntegerNumberFormat will be automatically stored in the 'numberFormat' property
         * of the parent AttributeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        IntegerNumberFormat.createIn = function (container) {
            internal.createInVersionCheck(container.model, IntegerNumberFormat.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, IntegerNumberFormat, "numberFormat", false);
        };
        /**
         * Creates and returns a new IntegerNumberFormat instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        IntegerNumberFormat.create = function (model) {
            return internal.instancehelpers.createElement(model, IntegerNumberFormat);
        };
        /** @internal */
        IntegerNumberFormat.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        IntegerNumberFormat.structureTypeName = "PluginWidgets$IntegerNumberFormat";
        IntegerNumberFormat.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.7.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return IntegerNumberFormat;
    }(NumberFormat));
    pluginwidgets.IntegerNumberFormat = IntegerNumberFormat;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    var NativeClassValue = /** @class */ (function (_super) {
        __extends(NativeClassValue, _super);
        function NativeClassValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(NativeClassValue, _this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new NativeClassValue() cannot be invoked directly, please use 'model.pluginwidgets.createNativeClassValue()'");
            }
            return _this;
        }
        Object.defineProperty(NativeClassValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NativeClassValue.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NativeClassValue instance in the SDK and on the server.
         * The new NativeClassValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        NativeClassValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, NativeClassValue.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, NativeClassValue, "value", false);
        };
        /**
         * Creates and returns a new NativeClassValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NativeClassValue.create = function (model) {
            return internal.instancehelpers.createElement(model, NativeClassValue);
        };
        /** @internal */
        NativeClassValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NativeClassValue.structureTypeName = "PluginWidgets$NativeClassValue";
        NativeClassValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.11.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return NativeClassValue;
    }(PropertyValue));
    pluginwidgets.NativeClassValue = NativeClassValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var NestedWidgetValue = /** @class */ (function (_super) {
        __extends(NestedWidgetValue, _super);
        function NestedWidgetValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__entity = new internal.ByNameReferenceProperty(NestedWidgetValue, _this, "entity", null, "DomainModels$Entity");
            /** @internal */
            _this.__widgets = new internal.PartListProperty(NestedWidgetValue, _this, "widgets", []);
            if (arguments.length < 4) {
                throw new Error("new NestedWidgetValue() cannot be invoked directly, please use 'model.pluginwidgets.createNestedWidgetValue()'");
            }
            return _this;
        }
        Object.defineProperty(NestedWidgetValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NestedWidgetValue.prototype, "entity", {
            /**
             * In version 7.11.0: deleted
             */
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NestedWidgetValue.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NestedWidgetValue.prototype, "widgets", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__widgets.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NestedWidgetValue instance in the SDK and on the server.
         * The new NestedWidgetValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        NestedWidgetValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, NestedWidgetValue.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NestedWidgetValue, "value", false);
        };
        /**
         * Creates and returns a new NestedWidgetValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NestedWidgetValue.create = function (model) {
            return internal.instancehelpers.createElement(model, NestedWidgetValue);
        };
        /** @internal */
        NestedWidgetValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NestedWidgetValue.structureTypeName = "PluginWidgets$NestedWidgetValue";
        NestedWidgetValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "properties": {
                "entity": {
                    "deleted": "7.11.0",
                    "deletionMessage": null,
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return NestedWidgetValue;
    }(PropertyValue));
    pluginwidgets.NestedWidgetValue = NestedWidgetValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    var NumericValue = /** @class */ (function (_super) {
        __extends(NumericValue, _super);
        function NumericValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(NumericValue, _this, "value", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new NumericValue() cannot be invoked directly, please use 'model.pluginwidgets.createNumericValue()'");
            }
            return _this;
        }
        Object.defineProperty(NumericValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NumericValue.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NumericValue instance in the SDK and on the server.
         * The new NumericValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        NumericValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, NumericValue.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, NumericValue, "value", false);
        };
        /**
         * Creates and returns a new NumericValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NumericValue.create = function (model) {
            return internal.instancehelpers.createElement(model, NumericValue);
        };
        /** @internal */
        NumericValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NumericValue.structureTypeName = "PluginWidgets$NumericValue";
        NumericValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.1.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return NumericValue;
    }(PrimitiveValue));
    pluginwidgets.NumericValue = NumericValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    var OfflineObjectListValue = /** @class */ (function (_super) {
        __extends(OfflineObjectListValue, _super);
        function OfflineObjectListValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__entity = new internal.ByNameReferenceProperty(OfflineObjectListValue, _this, "entity", null, "DomainModels$Entity");
            /** @internal */
            _this.__pageSize = new internal.PrimitiveProperty(OfflineObjectListValue, _this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new OfflineObjectListValue() cannot be invoked directly, please use 'model.pluginwidgets.createOfflineObjectListValue()'");
            }
            return _this;
        }
        Object.defineProperty(OfflineObjectListValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OfflineObjectListValue.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OfflineObjectListValue.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OfflineObjectListValue.prototype, "pageSize", {
            get: function () { return this.__pageSize.get(); },
            set: function (newValue) { this.__pageSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new OfflineObjectListValue instance in the SDK and on the server.
         * The new OfflineObjectListValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        OfflineObjectListValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, OfflineObjectListValue.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, OfflineObjectListValue, "value", false);
        };
        /**
         * Creates and returns a new OfflineObjectListValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OfflineObjectListValue.create = function (model) {
            return internal.instancehelpers.createElement(model, OfflineObjectListValue);
        };
        /** @internal */
        OfflineObjectListValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        OfflineObjectListValue.structureTypeName = "PluginWidgets$OfflineObjectListValue";
        OfflineObjectListValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "properties": {
                "entity": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return OfflineObjectListValue;
    }(PropertyValue));
    pluginwidgets.OfflineObjectListValue = OfflineObjectListValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.0.1: introduced
     */
    var PluginWidget = /** @class */ (function (_super) {
        __extends(PluginWidget, _super);
        function PluginWidget(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__pluginWidgetName = new internal.PrimitiveProperty(PluginWidget, _this, "pluginWidgetName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__pluginWidgetVersion = new internal.PrimitiveProperty(PluginWidget, _this, "pluginWidgetVersion", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__properties = new internal.PartListProperty(PluginWidget, _this, "properties", []);
            /** @internal */
            _this.__widgets = new internal.PartListProperty(PluginWidget, _this, "widgets", []);
            if (arguments.length < 4) {
                throw new Error("new PluginWidget() cannot be invoked directly, please use 'model.pluginwidgets.createPluginWidget()'");
            }
            return _this;
        }
        Object.defineProperty(PluginWidget.prototype, "containerAsBuildingBlock", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.BuildingBlock); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsMasterDetailRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.MasterDetailRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsNestedWidgetValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, NestedWidgetValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsPluginWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsTemplatedWidgetValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplatedWidgetValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "pluginWidgetName", {
            get: function () { return this.__pluginWidgetName.get(); },
            set: function (newValue) { this.__pluginWidgetName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "pluginWidgetVersion", {
            get: function () { return this.__pluginWidgetVersion.get(); },
            set: function (newValue) { this.__pluginWidgetVersion.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "properties", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             *
             * In version 7.1.0: introduced
             */
            get: function () { return this.__properties.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "widgets", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             *
             * In version 7.8.0: introduced
             */
            get: function () { return this.__widgets.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        PluginWidget.createInBuildingBlockUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "footerWidget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInDataViewUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInDivContainerUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInGroupBoxUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInHeaderUnderLeftWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "leftWidget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInHeaderUnderRightWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "rightWidget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInLayoutUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInLayoutCallArgumentUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInLayoutGridColumnUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInListViewUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInListViewTemplateUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        PluginWidget.createInMasterDetailRegionUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInNavigationListItemUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInScrollContainerRegionUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInSnippetUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInSplitPaneUnderFirstWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "firstWidget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInSplitPaneUnderSecondWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "secondWidget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInTabPageUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInTableCellUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInTemplateGridContentsUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        PluginWidget.createInVerticalFlowUnderWidgets = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widgets", true);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent NestedWidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        PluginWidget.createInNestedWidgetValueUnderWidgets = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widgets", true);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent PluginWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        PluginWidget.createInPluginWidgetUnderWidgets = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.8.0" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widgets", true);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent TemplatedWidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        PluginWidget.createInTemplatedWidgetValueUnderWidgets = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widgets", true);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PluginWidget.create = function (model) {
            return internal.instancehelpers.createElement(model, PluginWidget);
        };
        /** @internal */
        PluginWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        PluginWidget.structureTypeName = "PluginWidgets$PluginWidget";
        PluginWidget.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.0.1",
            "properties": {
                "properties": {
                    "introduced": "7.1.0"
                },
                "widgets": {
                    "introduced": "7.8.0"
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return PluginWidget;
    }(pages_1.pages.ConditionallyVisibleWidget));
    pluginwidgets.PluginWidget = PluginWidget;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    var PluginWidgetProperty = /** @class */ (function (_super) {
        __extends(PluginWidgetProperty, _super);
        function PluginWidgetProperty(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__key = new internal.PrimitiveProperty(PluginWidgetProperty, _this, "key", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__value = new internal.PartProperty(PluginWidgetProperty, _this, "value", null, false);
            if (arguments.length < 4) {
                throw new Error("new PluginWidgetProperty() cannot be invoked directly, please use 'model.pluginwidgets.createPluginWidgetProperty()'");
            }
            return _this;
        }
        Object.defineProperty(PluginWidgetProperty.prototype, "containerAsCompositeValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, CompositeValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidgetProperty.prototype, "containerAsPluginWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidgetProperty.prototype, "key", {
            get: function () { return this.__key.get(); },
            set: function (newValue) { this.__key.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidgetProperty.prototype, "value", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new PluginWidgetProperty instance in the SDK and on the server.
         * The new PluginWidgetProperty will be automatically stored in the 'properties' property
         * of the parent CompositeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        PluginWidgetProperty.createInCompositeValueUnderProperties = function (container) {
            internal.createInVersionCheck(container.model, PluginWidgetProperty.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, PluginWidgetProperty, "properties", true);
        };
        /**
         * Creates and returns a new PluginWidgetProperty instance in the SDK and on the server.
         * The new PluginWidgetProperty will be automatically stored in the 'properties' property
         * of the parent PluginWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        PluginWidgetProperty.createInPluginWidgetUnderProperties = function (container) {
            internal.createInVersionCheck(container.model, PluginWidgetProperty.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, PluginWidgetProperty, "properties", true);
        };
        /**
         * Creates and returns a new PluginWidgetProperty instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PluginWidgetProperty.create = function (model) {
            return internal.instancehelpers.createElement(model, PluginWidgetProperty);
        };
        /** @internal */
        PluginWidgetProperty.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        PluginWidgetProperty.structureTypeName = "PluginWidgets$PluginWidgetProperty";
        PluginWidgetProperty.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.1.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return PluginWidgetProperty;
    }(internal.Element));
    pluginwidgets.PluginWidgetProperty = PluginWidgetProperty;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    var StringValue = /** @class */ (function (_super) {
        __extends(StringValue, _super);
        function StringValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(StringValue, _this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new StringValue() cannot be invoked directly, please use 'model.pluginwidgets.createStringValue()'");
            }
            return _this;
        }
        Object.defineProperty(StringValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringValue.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new StringValue instance in the SDK and on the server.
         * The new StringValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        StringValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, StringValue.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, StringValue, "value", false);
        };
        /**
         * Creates and returns a new StringValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StringValue.create = function (model) {
            return internal.instancehelpers.createElement(model, StringValue);
        };
        /** @internal */
        StringValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        StringValue.structureTypeName = "PluginWidgets$StringValue";
        StringValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.1.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return StringValue;
    }(PrimitiveValue));
    pluginwidgets.StringValue = StringValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    var TemplatedWidgetValue = /** @class */ (function (_super) {
        __extends(TemplatedWidgetValue, _super);
        function TemplatedWidgetValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__widgets = new internal.PartListProperty(TemplatedWidgetValue, _this, "widgets", []);
            /** @internal */
            _this.__entity = new internal.ByNameReferenceProperty(TemplatedWidgetValue, _this, "entity", null, "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new TemplatedWidgetValue() cannot be invoked directly, please use 'model.pluginwidgets.createTemplatedWidgetValue()'");
            }
            return _this;
        }
        Object.defineProperty(TemplatedWidgetValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplatedWidgetValue.prototype, "widgets", {
            /**
             * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
             */
            get: function () { return this.__widgets.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplatedWidgetValue.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplatedWidgetValue.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TemplatedWidgetValue instance in the SDK and on the server.
         * The new TemplatedWidgetValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        TemplatedWidgetValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, TemplatedWidgetValue.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, TemplatedWidgetValue, "value", false);
        };
        /**
         * Creates and returns a new TemplatedWidgetValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TemplatedWidgetValue.create = function (model) {
            return internal.instancehelpers.createElement(model, TemplatedWidgetValue);
        };
        /** @internal */
        TemplatedWidgetValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        TemplatedWidgetValue.structureTypeName = "PluginWidgets$TemplatedWidgetValue";
        TemplatedWidgetValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.11.0",
            "properties": {
                "entity": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return TemplatedWidgetValue;
    }(PropertyValue));
    pluginwidgets.TemplatedWidgetValue = TemplatedWidgetValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.6.0: introduced
     */
    var ValidationEventValue = /** @class */ (function (_super) {
        __extends(ValidationEventValue, _super);
        function ValidationEventValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__sourceWidget = new internal.PrimitiveProperty(ValidationEventValue, _this, "sourceWidget", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ValidationEventValue() cannot be invoked directly, please use 'model.pluginwidgets.createValidationEventValue()'");
            }
            return _this;
        }
        Object.defineProperty(ValidationEventValue.prototype, "containerAsPluginWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, PluginWidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationEventValue.prototype, "sourceWidget", {
            get: function () { return this.__sourceWidget.get(); },
            set: function (newValue) { this.__sourceWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ValidationEventValue instance in the SDK and on the server.
         * The new ValidationEventValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        ValidationEventValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, ValidationEventValue.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ValidationEventValue, "value", false);
        };
        /**
         * Creates and returns a new ValidationEventValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ValidationEventValue.create = function (model) {
            return internal.instancehelpers.createElement(model, ValidationEventValue);
        };
        /** @internal */
        ValidationEventValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ValidationEventValue.structureTypeName = "PluginWidgets$ValidationEventValue";
        ValidationEventValue.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ValidationEventValue;
    }(PropertyValue));
    pluginwidgets.ValidationEventValue = ValidationEventValue;
})(pluginwidgets = exports.pluginwidgets || (exports.pluginwidgets = {}));
var expressions_1 = require("./expressions");
//# sourceMappingURL=pluginwidgets.js.map