"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var mappings_1 = require("./mappings");
var importmappings;
(function (importmappings) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `ImportMappings`.
     */
    /**
     * See: {@link https://docs.mendix.com/refguide7/import-mappings relevant section in reference guide}
     */
    var ImportMapping = /** @class */ (function (_super) {
        __extends(ImportMapping, _super);
        function ImportMapping(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__parameter = new internal.ByNameReferenceProperty(ImportMapping, _this, "parameter", null, "DomainModels$Entity");
            /** @internal */
            _this.__useSubtransactionsForMicroflows = new internal.PrimitiveProperty(ImportMapping, _this, "useSubtransactionsForMicroflows", false, internal.PrimitiveTypeEnum.Boolean);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(ImportMapping.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportMapping.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportMapping.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportMapping.prototype, "useSubtransactionsForMicroflows", {
            get: function () { return this.__useSubtransactionsForMicroflows.get(); },
            set: function (newValue) { this.__useSubtransactionsForMicroflows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new ImportMapping unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        ImportMapping.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, ImportMapping);
        };
        /** @internal */
        ImportMapping.prototype._isByNameReferrable = function () { return true; };
        /** @internal */
        ImportMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ImportMapping.structureTypeName = "ImportMappings$ImportMapping";
        ImportMapping.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return ImportMapping;
    }(mappings_1.mappings.MappingDocument));
    importmappings.ImportMapping = ImportMapping;
    /**
     * See: {@link https://docs.mendix.com/refguide7/import-mappings relevant section in reference guide}
     */
    var ImportObjectMappingElement = /** @class */ (function (_super) {
        __extends(ImportObjectMappingElement, _super);
        function ImportObjectMappingElement(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ImportObjectMappingElement() cannot be invoked directly, please use 'model.importmappings.createImportObjectMappingElement()'");
            }
            return _this;
        }
        Object.defineProperty(ImportObjectMappingElement.prototype, "containerAsMappingDocument", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.MappingDocument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportObjectMappingElement.prototype, "containerAsObjectMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ObjectMappingElement); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ImportObjectMappingElement instance in the SDK and on the server.
         * The new ImportObjectMappingElement will be automatically stored in the 'rootMappingElements' property
         * of the parent mappings.MappingDocument element passed as argument.
         */
        ImportObjectMappingElement.createInMappingDocumentUnderRootMappingElements = function (container) {
            return internal.instancehelpers.createElement(container, ImportObjectMappingElement, "rootMappingElements", true);
        };
        /**
         * Creates and returns a new ImportObjectMappingElement instance in the SDK and on the server.
         * The new ImportObjectMappingElement will be automatically stored in the 'children' property
         * of the parent mappings.ObjectMappingElement element passed as argument.
         */
        ImportObjectMappingElement.createInObjectMappingElementUnderChildren = function (container) {
            return internal.instancehelpers.createElement(container, ImportObjectMappingElement, "children", true);
        };
        /**
         * Creates and returns a new ImportObjectMappingElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImportObjectMappingElement.create = function (model) {
            return internal.instancehelpers.createElement(model, ImportObjectMappingElement);
        };
        /** @internal */
        ImportObjectMappingElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ImportObjectMappingElement.structureTypeName = "ImportMappings$ImportObjectMappingElement";
        ImportObjectMappingElement.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ImportObjectMappingElement;
    }(mappings_1.mappings.ObjectMappingElement));
    importmappings.ImportObjectMappingElement = ImportObjectMappingElement;
    /**
     * See: {@link https://docs.mendix.com/refguide7/import-mappings relevant section in reference guide}
     */
    var ImportValueMappingElement = /** @class */ (function (_super) {
        __extends(ImportValueMappingElement, _super);
        function ImportValueMappingElement(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ImportValueMappingElement() cannot be invoked directly, please use 'model.importmappings.createImportValueMappingElement()'");
            }
            return _this;
        }
        Object.defineProperty(ImportValueMappingElement.prototype, "containerAsObjectMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ObjectMappingElement); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ImportValueMappingElement instance in the SDK and on the server.
         * The new ImportValueMappingElement will be automatically stored in the 'children' property
         * of the parent mappings.ObjectMappingElement element passed as argument.
         */
        ImportValueMappingElement.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ImportValueMappingElement, "children", true);
        };
        /**
         * Creates and returns a new ImportValueMappingElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImportValueMappingElement.create = function (model) {
            return internal.instancehelpers.createElement(model, ImportValueMappingElement);
        };
        /** @internal */
        ImportValueMappingElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ImportValueMappingElement.structureTypeName = "ImportMappings$ImportValueMappingElement";
        ImportValueMappingElement.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ImportValueMappingElement;
    }(mappings_1.mappings.ValueMappingElement));
    importmappings.ImportValueMappingElement = ImportValueMappingElement;
})(importmappings = exports.importmappings || (exports.importmappings = {}));
var projects_1 = require("./projects");
//# sourceMappingURL=importmappings.js.map