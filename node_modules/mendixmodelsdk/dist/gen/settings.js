"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require("./projects");
var settings;
(function (settings) {
    var CertificateType = /** @class */ (function (_super) {
        __extends(CertificateType, _super);
        function CertificateType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "settings.CertificateType";
            return _this;
        }
        CertificateType.Authority = new CertificateType("Authority", {});
        CertificateType.Client = new CertificateType("Client", {});
        return CertificateType;
    }(internal.AbstractEnum));
    settings.CertificateType = CertificateType;
    var DatabaseType = /** @class */ (function (_super) {
        __extends(DatabaseType, _super);
        function DatabaseType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "settings.DatabaseType";
            return _this;
        }
        DatabaseType.Hsqldb = new DatabaseType("Hsqldb", {});
        DatabaseType.Db2 = new DatabaseType("Db2", {
            "introduced": "6.7.0"
        });
        DatabaseType.SqlServer = new DatabaseType("SqlServer", {});
        DatabaseType.MySql = new DatabaseType("MySql", {});
        DatabaseType.Oracle = new DatabaseType("Oracle", {});
        DatabaseType.PostgreSql = new DatabaseType("PostgreSql", {});
        return DatabaseType;
    }(internal.AbstractEnum));
    settings.DatabaseType = DatabaseType;
    var FirstDayOfWeekEnum = /** @class */ (function (_super) {
        __extends(FirstDayOfWeekEnum, _super);
        function FirstDayOfWeekEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "settings.FirstDayOfWeekEnum";
            return _this;
        }
        FirstDayOfWeekEnum.Default = new FirstDayOfWeekEnum("Default", {});
        FirstDayOfWeekEnum.Sunday = new FirstDayOfWeekEnum("Sunday", {});
        FirstDayOfWeekEnum.Monday = new FirstDayOfWeekEnum("Monday", {});
        FirstDayOfWeekEnum.Tuesday = new FirstDayOfWeekEnum("Tuesday", {});
        FirstDayOfWeekEnum.Wednesday = new FirstDayOfWeekEnum("Wednesday", {});
        FirstDayOfWeekEnum.Thursday = new FirstDayOfWeekEnum("Thursday", {});
        FirstDayOfWeekEnum.Friday = new FirstDayOfWeekEnum("Friday", {});
        FirstDayOfWeekEnum.Saturday = new FirstDayOfWeekEnum("Saturday", {});
        return FirstDayOfWeekEnum;
    }(internal.AbstractEnum));
    settings.FirstDayOfWeekEnum = FirstDayOfWeekEnum;
    var HashAlgorithmType = /** @class */ (function (_super) {
        __extends(HashAlgorithmType, _super);
        function HashAlgorithmType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "settings.HashAlgorithmType";
            return _this;
        }
        HashAlgorithmType.BCrypt = new HashAlgorithmType("BCrypt", {});
        HashAlgorithmType.SSHA256 = new HashAlgorithmType("SSHA256", {});
        HashAlgorithmType.SHA256 = new HashAlgorithmType("SHA256", {});
        HashAlgorithmType.MD5 = new HashAlgorithmType("MD5", {});
        return HashAlgorithmType;
    }(internal.AbstractEnum));
    settings.HashAlgorithmType = HashAlgorithmType;
    var RoundingMode = /** @class */ (function (_super) {
        __extends(RoundingMode, _super);
        function RoundingMode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "settings.RoundingMode";
            return _this;
        }
        RoundingMode.HalfUp = new RoundingMode("HalfUp", {});
        RoundingMode.HalfEven = new RoundingMode("HalfEven", {});
        return RoundingMode;
    }(internal.AbstractEnum));
    settings.RoundingMode = RoundingMode;
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Settings`.
     */
    var Certificate = /** @class */ (function (_super) {
        __extends(Certificate, _super);
        function Certificate(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__type = new internal.EnumProperty(Certificate, _this, "type", CertificateType.Authority, CertificateType);
            /** @internal */
            _this.__data = new internal.PrimitiveProperty(Certificate, _this, "data", null, internal.PrimitiveTypeEnum.Blob);
            if (arguments.length < 4) {
                throw new Error("new Certificate() cannot be invoked directly, please use 'model.settings.createCertificate()'");
            }
            return _this;
        }
        Object.defineProperty(Certificate.prototype, "containerAsCertificateSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, CertificateSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Certificate.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Certificate.prototype, "data", {
            get: function () { return this.__data.get(); },
            set: function (newValue) { this.__data.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Certificate instance in the SDK and on the server.
         * The new Certificate will be automatically stored in the 'certificates' property
         * of the parent CertificateSettings element passed as argument.
         */
        Certificate.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Certificate, "certificates", true);
        };
        /**
         * Creates and returns a new Certificate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Certificate.create = function (model) {
            return internal.instancehelpers.createElement(model, Certificate);
        };
        /** @internal */
        Certificate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = CertificateType.Authority;
        };
        Certificate.structureTypeName = "Settings$Certificate";
        Certificate.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Certificate;
    }(internal.Element));
    settings.Certificate = Certificate;
    var ProjectSettingsPart = /** @class */ (function (_super) {
        __extends(ProjectSettingsPart, _super);
        function ProjectSettingsPart(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ProjectSettingsPart() cannot be invoked directly, please use 'model.settings.createProjectSettingsPart()'");
            }
            return _this;
        }
        Object.defineProperty(ProjectSettingsPart.prototype, "containerAsProjectSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, ProjectSettings); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        ProjectSettingsPart.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ProjectSettingsPart.structureTypeName = "Settings$ProjectSettingsPart";
        ProjectSettingsPart.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ProjectSettingsPart;
    }(internal.Element));
    settings.ProjectSettingsPart = ProjectSettingsPart;
    var CertificateSettings = /** @class */ (function (_super) {
        __extends(CertificateSettings, _super);
        function CertificateSettings(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__certificates = new internal.PartListProperty(CertificateSettings, _this, "certificates", []);
            if (arguments.length < 4) {
                throw new Error("new CertificateSettings() cannot be invoked directly, please use 'model.settings.createCertificateSettings()'");
            }
            return _this;
        }
        Object.defineProperty(CertificateSettings.prototype, "containerAsProjectSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, ProjectSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CertificateSettings.prototype, "certificates", {
            get: function () { return this.__certificates.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CertificateSettings instance in the SDK and on the server.
         * The new CertificateSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        CertificateSettings.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CertificateSettings, "settingsParts", true);
        };
        /**
         * Creates and returns a new CertificateSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CertificateSettings.create = function (model) {
            return internal.instancehelpers.createElement(model, CertificateSettings);
        };
        /** @internal */
        CertificateSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CertificateSettings.structureTypeName = "Settings$CertificateSettings";
        CertificateSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CertificateSettings;
    }(ProjectSettingsPart));
    settings.CertificateSettings = CertificateSettings;
    /**
     * See: {@link https://docs.mendix.com/refguide7/configuration relevant section in reference guide}
     */
    var Configuration = /** @class */ (function (_super) {
        __extends(Configuration, _super);
        function Configuration(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(Configuration, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__applicationRootUrl = new internal.PrimitiveProperty(Configuration, _this, "applicationRootUrl", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__runtimePortNumber = new internal.PrimitiveProperty(Configuration, _this, "runtimePortNumber", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            _this.__adminPortNumber = new internal.PrimitiveProperty(Configuration, _this, "adminPortNumber", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            _this.__runtimePortOnlyLocal = new internal.PrimitiveProperty(Configuration, _this, "runtimePortOnlyLocal", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__adminPortOnlyLocal = new internal.PrimitiveProperty(Configuration, _this, "adminPortOnlyLocal", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__maxJavaHeapSize = new internal.PrimitiveProperty(Configuration, _this, "maxJavaHeapSize", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            _this.__emulateCloudSecurity = new internal.PrimitiveProperty(Configuration, _this, "emulateCloudSecurity", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__extraJvmParameters = new internal.PrimitiveProperty(Configuration, _this, "extraJvmParameters", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__databaseType = new internal.EnumProperty(Configuration, _this, "databaseType", DatabaseType.Hsqldb, DatabaseType);
            /** @internal */
            _this.__databaseUrl = new internal.PrimitiveProperty(Configuration, _this, "databaseUrl", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__databaseName = new internal.PrimitiveProperty(Configuration, _this, "databaseName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__databaseUseIntegratedSecurity = new internal.PrimitiveProperty(Configuration, _this, "databaseUseIntegratedSecurity", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__databaseUserName = new internal.PrimitiveProperty(Configuration, _this, "databaseUserName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__databasePassword = new internal.PrimitiveProperty(Configuration, _this, "databasePassword", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__customSettings = new internal.PartListProperty(Configuration, _this, "customSettings", []);
            /** @internal */
            _this.__constantValues = new internal.PartListProperty(Configuration, _this, "constantValues", []);
            if (arguments.length < 4) {
                throw new Error("new Configuration() cannot be invoked directly, please use 'model.settings.createConfiguration()'");
            }
            return _this;
        }
        Object.defineProperty(Configuration.prototype, "containerAsConfigurationSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, ConfigurationSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "applicationRootUrl", {
            get: function () { return this.__applicationRootUrl.get(); },
            set: function (newValue) { this.__applicationRootUrl.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "runtimePortNumber", {
            get: function () { return this.__runtimePortNumber.get(); },
            set: function (newValue) { this.__runtimePortNumber.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "adminPortNumber", {
            get: function () { return this.__adminPortNumber.get(); },
            set: function (newValue) { this.__adminPortNumber.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "runtimePortOnlyLocal", {
            get: function () { return this.__runtimePortOnlyLocal.get(); },
            set: function (newValue) { this.__runtimePortOnlyLocal.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "adminPortOnlyLocal", {
            get: function () { return this.__adminPortOnlyLocal.get(); },
            set: function (newValue) { this.__adminPortOnlyLocal.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "maxJavaHeapSize", {
            get: function () { return this.__maxJavaHeapSize.get(); },
            set: function (newValue) { this.__maxJavaHeapSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "emulateCloudSecurity", {
            get: function () { return this.__emulateCloudSecurity.get(); },
            set: function (newValue) { this.__emulateCloudSecurity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "extraJvmParameters", {
            get: function () { return this.__extraJvmParameters.get(); },
            set: function (newValue) { this.__extraJvmParameters.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "databaseType", {
            get: function () { return this.__databaseType.get(); },
            set: function (newValue) { this.__databaseType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "databaseUrl", {
            get: function () { return this.__databaseUrl.get(); },
            set: function (newValue) { this.__databaseUrl.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "databaseName", {
            get: function () { return this.__databaseName.get(); },
            set: function (newValue) { this.__databaseName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "databaseUseIntegratedSecurity", {
            get: function () { return this.__databaseUseIntegratedSecurity.get(); },
            set: function (newValue) { this.__databaseUseIntegratedSecurity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "databaseUserName", {
            get: function () { return this.__databaseUserName.get(); },
            set: function (newValue) { this.__databaseUserName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "databasePassword", {
            get: function () { return this.__databasePassword.get(); },
            set: function (newValue) { this.__databasePassword.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "customSettings", {
            get: function () { return this.__customSettings.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration.prototype, "constantValues", {
            get: function () { return this.__constantValues.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Configuration instance in the SDK and on the server.
         * The new Configuration will be automatically stored in the 'configurations' property
         * of the parent ConfigurationSettings element passed as argument.
         */
        Configuration.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Configuration, "configurations", true);
        };
        /**
         * Creates and returns a new Configuration instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Configuration.create = function (model) {
            return internal.instancehelpers.createElement(model, Configuration);
        };
        /** @internal */
        Configuration.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.adminPortNumber = 8090;
            this.adminPortOnlyLocal = true;
            this.applicationRootUrl = "http://localhost:8080/";
            this.databaseName = "default";
            this.databaseType = DatabaseType.Hsqldb;
            this.emulateCloudSecurity = true;
            this.runtimePortNumber = 8080;
            this.runtimePortOnlyLocal = false;
        };
        Configuration.structureTypeName = "Settings$Configuration";
        Configuration.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Configuration;
    }(internal.Element));
    settings.Configuration = Configuration;
    var ConfigurationSettings = /** @class */ (function (_super) {
        __extends(ConfigurationSettings, _super);
        function ConfigurationSettings(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__configurations = new internal.PartListProperty(ConfigurationSettings, _this, "configurations", []);
            if (arguments.length < 4) {
                throw new Error("new ConfigurationSettings() cannot be invoked directly, please use 'model.settings.createConfigurationSettings()'");
            }
            return _this;
        }
        Object.defineProperty(ConfigurationSettings.prototype, "containerAsProjectSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, ProjectSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConfigurationSettings.prototype, "configurations", {
            get: function () { return this.__configurations.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ConfigurationSettings instance in the SDK and on the server.
         * The new ConfigurationSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        ConfigurationSettings.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ConfigurationSettings, "settingsParts", true);
        };
        /**
         * Creates and returns a new ConfigurationSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConfigurationSettings.create = function (model) {
            return internal.instancehelpers.createElement(model, ConfigurationSettings);
        };
        /** @internal */
        ConfigurationSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.configurations.replace([(function (configuration) {
                    configuration.name = "Default";
                    return configuration;
                })(Configuration.create(this.model))]);
        };
        ConfigurationSettings.structureTypeName = "Settings$ConfigurationSettings";
        ConfigurationSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ConfigurationSettings;
    }(ProjectSettingsPart));
    settings.ConfigurationSettings = ConfigurationSettings;
    var ConstantValue = /** @class */ (function (_super) {
        __extends(ConstantValue, _super);
        function ConstantValue(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__constant = new internal.ByNameReferenceProperty(ConstantValue, _this, "constant", null, "Constants$Constant");
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(ConstantValue, _this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ConstantValue() cannot be invoked directly, please use 'model.settings.createConstantValue()'");
            }
            return _this;
        }
        Object.defineProperty(ConstantValue.prototype, "containerAsConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, Configuration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantValue.prototype, "constant", {
            get: function () { return this.__constant.get(); },
            set: function (newValue) { this.__constant.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantValue.prototype, "constantQualifiedName", {
            get: function () { return this.__constant.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantValue.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ConstantValue instance in the SDK and on the server.
         * The new ConstantValue will be automatically stored in the 'constantValues' property
         * of the parent Configuration element passed as argument.
         */
        ConstantValue.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ConstantValue, "constantValues", true);
        };
        /**
         * Creates and returns a new ConstantValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConstantValue.create = function (model) {
            return internal.instancehelpers.createElement(model, ConstantValue);
        };
        /** @internal */
        ConstantValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ConstantValue.structureTypeName = "Settings$ConstantValue";
        ConstantValue.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "constant": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ConstantValue;
    }(internal.Element));
    settings.ConstantValue = ConstantValue;
    var CustomSetting = /** @class */ (function (_super) {
        __extends(CustomSetting, _super);
        function CustomSetting(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(CustomSetting, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__value = new internal.PrimitiveProperty(CustomSetting, _this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new CustomSetting() cannot be invoked directly, please use 'model.settings.createCustomSetting()'");
            }
            return _this;
        }
        Object.defineProperty(CustomSetting.prototype, "containerAsConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, Configuration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomSetting.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomSetting.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CustomSetting instance in the SDK and on the server.
         * The new CustomSetting will be automatically stored in the 'customSettings' property
         * of the parent Configuration element passed as argument.
         */
        CustomSetting.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CustomSetting, "customSettings", true);
        };
        /**
         * Creates and returns a new CustomSetting instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CustomSetting.create = function (model) {
            return internal.instancehelpers.createElement(model, CustomSetting);
        };
        /** @internal */
        CustomSetting.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CustomSetting.structureTypeName = "Settings$CustomSetting";
        CustomSetting.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CustomSetting;
    }(internal.Element));
    settings.CustomSetting = CustomSetting;
    var IntegrationProjectSettingsPart = /** @class */ (function (_super) {
        __extends(IntegrationProjectSettingsPart, _super);
        function IntegrationProjectSettingsPart(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new IntegrationProjectSettingsPart() cannot be invoked directly, please use 'model.settings.createIntegrationProjectSettingsPart()'");
            }
            return _this;
        }
        Object.defineProperty(IntegrationProjectSettingsPart.prototype, "containerAsProjectSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, ProjectSettings); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new IntegrationProjectSettingsPart instance in the SDK and on the server.
         * The new IntegrationProjectSettingsPart will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        IntegrationProjectSettingsPart.createIn = function (container) {
            return internal.instancehelpers.createElement(container, IntegrationProjectSettingsPart, "settingsParts", true);
        };
        /**
         * Creates and returns a new IntegrationProjectSettingsPart instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        IntegrationProjectSettingsPart.create = function (model) {
            return internal.instancehelpers.createElement(model, IntegrationProjectSettingsPart);
        };
        /** @internal */
        IntegrationProjectSettingsPart.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        IntegrationProjectSettingsPart.structureTypeName = "Settings$IntegrationProjectSettingsPart";
        IntegrationProjectSettingsPart.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return IntegrationProjectSettingsPart;
    }(ProjectSettingsPart));
    settings.IntegrationProjectSettingsPart = IntegrationProjectSettingsPart;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 6.9.0: introduced
     */
    var JavaActionsSettings = /** @class */ (function (_super) {
        __extends(JavaActionsSettings, _super);
        function JavaActionsSettings(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__generatePostfixesForParameters = new internal.PrimitiveProperty(JavaActionsSettings, _this, "generatePostfixesForParameters", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new JavaActionsSettings() cannot be invoked directly, please use 'model.settings.createJavaActionsSettings()'");
            }
            return _this;
        }
        Object.defineProperty(JavaActionsSettings.prototype, "containerAsProjectSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, ProjectSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionsSettings.prototype, "generatePostfixesForParameters", {
            get: function () { return this.__generatePostfixesForParameters.get(); },
            set: function (newValue) { this.__generatePostfixesForParameters.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new JavaActionsSettings instance in the SDK and on the server.
         * The new JavaActionsSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.9.0 and higher
         */
        JavaActionsSettings.createIn = function (container) {
            internal.createInVersionCheck(container.model, JavaActionsSettings.structureTypeName, { start: "6.9.0" });
            return internal.instancehelpers.createElement(container, JavaActionsSettings, "settingsParts", true);
        };
        /**
         * Creates and returns a new JavaActionsSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        JavaActionsSettings.create = function (model) {
            return internal.instancehelpers.createElement(model, JavaActionsSettings);
        };
        /** @internal */
        JavaActionsSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        JavaActionsSettings.structureTypeName = "Settings$JavaActionsSettings";
        JavaActionsSettings.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.9.0",
            "experimental": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return JavaActionsSettings;
    }(ProjectSettingsPart));
    settings.JavaActionsSettings = JavaActionsSettings;
    var Language = /** @class */ (function (_super) {
        __extends(Language, _super);
        function Language(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__code = new internal.PrimitiveProperty(Language, _this, "code", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__checkCompleteness = new internal.PrimitiveProperty(Language, _this, "checkCompleteness", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__customDateFormat = new internal.PrimitiveProperty(Language, _this, "customDateFormat", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__customTimeFormat = new internal.PrimitiveProperty(Language, _this, "customTimeFormat", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__customDateTimeFormat = new internal.PrimitiveProperty(Language, _this, "customDateTimeFormat", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new Language() cannot be invoked directly, please use 'model.settings.createLanguage()'");
            }
            return _this;
        }
        Object.defineProperty(Language.prototype, "containerAsLanguageSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, LanguageSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Language.prototype, "code", {
            get: function () { return this.__code.get(); },
            set: function (newValue) { this.__code.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Language.prototype, "checkCompleteness", {
            get: function () { return this.__checkCompleteness.get(); },
            set: function (newValue) { this.__checkCompleteness.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Language.prototype, "customDateFormat", {
            get: function () { return this.__customDateFormat.get(); },
            set: function (newValue) { this.__customDateFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Language.prototype, "customTimeFormat", {
            get: function () { return this.__customTimeFormat.get(); },
            set: function (newValue) { this.__customTimeFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Language.prototype, "customDateTimeFormat", {
            get: function () { return this.__customDateTimeFormat.get(); },
            set: function (newValue) { this.__customDateTimeFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Language instance in the SDK and on the server.
         * The new Language will be automatically stored in the 'languages' property
         * of the parent LanguageSettings element passed as argument.
         */
        Language.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Language, "languages", true);
        };
        /**
         * Creates and returns a new Language instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Language.create = function (model) {
            return internal.instancehelpers.createElement(model, Language);
        };
        /** @internal */
        Language.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Language.structureTypeName = "Settings$Language";
        Language.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Language;
    }(internal.Element));
    settings.Language = Language;
    var LanguageSettings = /** @class */ (function (_super) {
        __extends(LanguageSettings, _super);
        function LanguageSettings(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__defaultLanguageCode = new internal.PrimitiveProperty(LanguageSettings, _this, "defaultLanguageCode", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__languages = new internal.PartListProperty(LanguageSettings, _this, "languages", []);
            if (arguments.length < 4) {
                throw new Error("new LanguageSettings() cannot be invoked directly, please use 'model.settings.createLanguageSettings()'");
            }
            return _this;
        }
        Object.defineProperty(LanguageSettings.prototype, "containerAsProjectSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, ProjectSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LanguageSettings.prototype, "defaultLanguageCode", {
            get: function () { return this.__defaultLanguageCode.get(); },
            set: function (newValue) { this.__defaultLanguageCode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LanguageSettings.prototype, "languages", {
            get: function () { return this.__languages.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new LanguageSettings instance in the SDK and on the server.
         * The new LanguageSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        LanguageSettings.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LanguageSettings, "settingsParts", true);
        };
        /**
         * Creates and returns a new LanguageSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LanguageSettings.create = function (model) {
            return internal.instancehelpers.createElement(model, LanguageSettings);
        };
        /** @internal */
        LanguageSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.defaultLanguageCode = "en_US";
            this.languages.replace([(function (language) {
                    language.code = "en_US";
                    return language;
                })(Language.create(this.model))]);
        };
        LanguageSettings.structureTypeName = "Settings$LanguageSettings";
        LanguageSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return LanguageSettings;
    }(ProjectSettingsPart));
    settings.LanguageSettings = LanguageSettings;
    var ModelerSettings = /** @class */ (function (_super) {
        __extends(ModelerSettings, _super);
        function ModelerSettings(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__lowerCaseMicroflowVariables = new internal.PrimitiveProperty(ModelerSettings, _this, "lowerCaseMicroflowVariables", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new ModelerSettings() cannot be invoked directly, please use 'model.settings.createModelerSettings()'");
            }
            return _this;
        }
        Object.defineProperty(ModelerSettings.prototype, "containerAsProjectSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, ProjectSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ModelerSettings.prototype, "lowerCaseMicroflowVariables", {
            get: function () { return this.__lowerCaseMicroflowVariables.get(); },
            set: function (newValue) { this.__lowerCaseMicroflowVariables.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ModelerSettings instance in the SDK and on the server.
         * The new ModelerSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        ModelerSettings.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ModelerSettings, "settingsParts", true);
        };
        /**
         * Creates and returns a new ModelerSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ModelerSettings.create = function (model) {
            return internal.instancehelpers.createElement(model, ModelerSettings);
        };
        /** @internal */
        ModelerSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ModelerSettings.structureTypeName = "Settings$ModelerSettings";
        ModelerSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ModelerSettings;
    }(ProjectSettingsPart));
    settings.ModelerSettings = ModelerSettings;
    /**
     * See: {@link https://docs.mendix.com/refguide7/project-settings relevant section in reference guide}
     */
    var ProjectSettings = /** @class */ (function (_super) {
        __extends(ProjectSettings, _super);
        function ProjectSettings(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__settingsParts = new internal.PartListProperty(ProjectSettings, _this, "settingsParts", []);
            _this._containmentName = "projectDocuments";
            return _this;
        }
        Object.defineProperty(ProjectSettings.prototype, "containerAsProject", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.Project); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProjectSettings.prototype, "settingsParts", {
            get: function () { return this.__settingsParts.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new ProjectSettings unit in the SDK and on the server.
         * Expects one argument, the projects.IProject in which this unit is contained.
         */
        ProjectSettings.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, ProjectSettings);
        };
        /** @internal */
        ProjectSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ProjectSettings.structureTypeName = "Settings$ProjectSettings";
        ProjectSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return ProjectSettings;
    }(projects_1.projects.ProjectDocument));
    settings.ProjectSettings = ProjectSettings;
    var RuntimeSettings = /** @class */ (function (_super) {
        __extends(RuntimeSettings, _super);
        function RuntimeSettings(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__afterStartupMicroflow = new internal.ByNameReferenceProperty(RuntimeSettings, _this, "afterStartupMicroflow", null, "Microflows$Microflow");
            /** @internal */
            _this.__beforeShutdownMicroflow = new internal.ByNameReferenceProperty(RuntimeSettings, _this, "beforeShutdownMicroflow", null, "Microflows$Microflow");
            /** @internal */
            _this.__healthCheckMicroflow = new internal.ByNameReferenceProperty(RuntimeSettings, _this, "healthCheckMicroflow", null, "Microflows$Microflow");
            /** @internal */
            _this.__firstDayOfWeek = new internal.EnumProperty(RuntimeSettings, _this, "firstDayOfWeek", FirstDayOfWeekEnum.Default, FirstDayOfWeekEnum);
            /** @internal */
            _this.__defaultTimeZoneCode = new internal.PrimitiveProperty(RuntimeSettings, _this, "defaultTimeZoneCode", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__scheduledEventTimeZoneCode = new internal.PrimitiveProperty(RuntimeSettings, _this, "scheduledEventTimeZoneCode", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__hashAlgorithm = new internal.EnumProperty(RuntimeSettings, _this, "hashAlgorithm", HashAlgorithmType.BCrypt, HashAlgorithmType);
            /** @internal */
            _this.__roundingMode = new internal.EnumProperty(RuntimeSettings, _this, "roundingMode", RoundingMode.HalfUp, RoundingMode);
            /** @internal */
            _this.__allowUserMultipleSessions = new internal.PrimitiveProperty(RuntimeSettings, _this, "allowUserMultipleSessions", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__enforceDataStorageUniqueness = new internal.PrimitiveProperty(RuntimeSettings, _this, "enforceDataStorageUniqueness", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__enableDataStorageOptimisticLocking = new internal.PrimitiveProperty(RuntimeSettings, _this, "enableDataStorageOptimisticLocking", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__enableDataStorageNewQueryHandling = new internal.PrimitiveProperty(RuntimeSettings, _this, "enableDataStorageNewQueryHandling", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new RuntimeSettings() cannot be invoked directly, please use 'model.settings.createRuntimeSettings()'");
            }
            return _this;
        }
        Object.defineProperty(RuntimeSettings.prototype, "containerAsProjectSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, ProjectSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "afterStartupMicroflow", {
            get: function () { return this.__afterStartupMicroflow.get(); },
            set: function (newValue) { this.__afterStartupMicroflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "afterStartupMicroflowQualifiedName", {
            get: function () { return this.__afterStartupMicroflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "beforeShutdownMicroflow", {
            get: function () { return this.__beforeShutdownMicroflow.get(); },
            set: function (newValue) { this.__beforeShutdownMicroflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "beforeShutdownMicroflowQualifiedName", {
            get: function () { return this.__beforeShutdownMicroflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "healthCheckMicroflow", {
            get: function () { return this.__healthCheckMicroflow.get(); },
            set: function (newValue) { this.__healthCheckMicroflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "healthCheckMicroflowQualifiedName", {
            get: function () { return this.__healthCheckMicroflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "firstDayOfWeek", {
            get: function () { return this.__firstDayOfWeek.get(); },
            set: function (newValue) { this.__firstDayOfWeek.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "defaultTimeZoneCode", {
            get: function () { return this.__defaultTimeZoneCode.get(); },
            set: function (newValue) { this.__defaultTimeZoneCode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "scheduledEventTimeZoneCode", {
            get: function () { return this.__scheduledEventTimeZoneCode.get(); },
            set: function (newValue) { this.__scheduledEventTimeZoneCode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "hashAlgorithm", {
            get: function () { return this.__hashAlgorithm.get(); },
            set: function (newValue) { this.__hashAlgorithm.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "roundingMode", {
            get: function () { return this.__roundingMode.get(); },
            set: function (newValue) { this.__roundingMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "allowUserMultipleSessions", {
            get: function () { return this.__allowUserMultipleSessions.get(); },
            set: function (newValue) { this.__allowUserMultipleSessions.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "enforceDataStorageUniqueness", {
            /**
             * In version 7.1.0: introduced
             */
            get: function () { return this.__enforceDataStorageUniqueness.get(); },
            set: function (newValue) { this.__enforceDataStorageUniqueness.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "enableDataStorageOptimisticLocking", {
            /**
             * In version 7.5.0: introduced
             */
            get: function () { return this.__enableDataStorageOptimisticLocking.get(); },
            set: function (newValue) { this.__enableDataStorageOptimisticLocking.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeSettings.prototype, "enableDataStorageNewQueryHandling", {
            /**
             * In version 7.10.0: introduced
             */
            get: function () { return this.__enableDataStorageNewQueryHandling.get(); },
            set: function (newValue) { this.__enableDataStorageNewQueryHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RuntimeSettings instance in the SDK and on the server.
         * The new RuntimeSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        RuntimeSettings.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RuntimeSettings, "settingsParts", true);
        };
        /**
         * Creates and returns a new RuntimeSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RuntimeSettings.create = function (model) {
            return internal.instancehelpers.createElement(model, RuntimeSettings);
        };
        /** @internal */
        RuntimeSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__enableDataStorageNewQueryHandling.isAvailable) {
                this.enableDataStorageNewQueryHandling = true;
            }
            if (this.__enableDataStorageOptimisticLocking.isAvailable) {
                this.enableDataStorageOptimisticLocking = true;
            }
            if (this.__enforceDataStorageUniqueness.isAvailable) {
                this.enforceDataStorageUniqueness = true;
            }
            this.firstDayOfWeek = FirstDayOfWeekEnum.Default;
            this.hashAlgorithm = HashAlgorithmType.BCrypt;
            this.roundingMode = RoundingMode.HalfUp;
            this.scheduledEventTimeZoneCode = "Etc/UTC";
        };
        RuntimeSettings.structureTypeName = "Settings$RuntimeSettings";
        RuntimeSettings.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "enforceDataStorageUniqueness": {
                    "introduced": "7.1.0"
                },
                "enableDataStorageOptimisticLocking": {
                    "introduced": "7.5.0"
                },
                "enableDataStorageNewQueryHandling": {
                    "introduced": "7.10.0"
                }
            }
        }, internal.StructureType.Element);
        return RuntimeSettings;
    }(ProjectSettingsPart));
    settings.RuntimeSettings = RuntimeSettings;
    var WebUIProjectSettingsPart = /** @class */ (function (_super) {
        __extends(WebUIProjectSettingsPart, _super);
        function WebUIProjectSettingsPart(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__theme = new internal.PrimitiveProperty(WebUIProjectSettingsPart, _this, "theme", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__themeModuleName = new internal.PrimitiveProperty(WebUIProjectSettingsPart, _this, "themeModuleName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__feedbackWidgetUpdated = new internal.PrimitiveProperty(WebUIProjectSettingsPart, _this, "feedbackWidgetUpdated", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__enableWidgetBundling = new internal.PrimitiveProperty(WebUIProjectSettingsPart, _this, "enableWidgetBundling", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__enableDownloadResources = new internal.PrimitiveProperty(WebUIProjectSettingsPart, _this, "enableDownloadResources", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__enableMicroflowReachabilityAnalysis = new internal.PrimitiveProperty(WebUIProjectSettingsPart, _this, "enableMicroflowReachabilityAnalysis", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new WebUIProjectSettingsPart() cannot be invoked directly, please use 'model.settings.createWebUIProjectSettingsPart()'");
            }
            return _this;
        }
        Object.defineProperty(WebUIProjectSettingsPart.prototype, "containerAsProjectSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, ProjectSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebUIProjectSettingsPart.prototype, "theme", {
            get: function () { return this.__theme.get(); },
            set: function (newValue) { this.__theme.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebUIProjectSettingsPart.prototype, "themeModuleName", {
            /**
             * In version 7.9.0: introduced
             */
            get: function () { return this.__themeModuleName.get(); },
            set: function (newValue) { this.__themeModuleName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebUIProjectSettingsPart.prototype, "feedbackWidgetUpdated", {
            /**
             * In version 6.2.0: deleted
             */
            get: function () { return this.__feedbackWidgetUpdated.get(); },
            set: function (newValue) { this.__feedbackWidgetUpdated.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebUIProjectSettingsPart.prototype, "enableWidgetBundling", {
            get: function () { return this.__enableWidgetBundling.get(); },
            set: function (newValue) { this.__enableWidgetBundling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebUIProjectSettingsPart.prototype, "enableDownloadResources", {
            /**
             * In version 6.6.0: introduced
             */
            get: function () { return this.__enableDownloadResources.get(); },
            set: function (newValue) { this.__enableDownloadResources.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebUIProjectSettingsPart.prototype, "enableMicroflowReachabilityAnalysis", {
            /**
             * In version 7.0.2: introduced
             */
            get: function () { return this.__enableMicroflowReachabilityAnalysis.get(); },
            set: function (newValue) { this.__enableMicroflowReachabilityAnalysis.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WebUIProjectSettingsPart instance in the SDK and on the server.
         * The new WebUIProjectSettingsPart will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        WebUIProjectSettingsPart.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WebUIProjectSettingsPart, "settingsParts", true);
        };
        /**
         * Creates and returns a new WebUIProjectSettingsPart instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WebUIProjectSettingsPart.create = function (model) {
            return internal.instancehelpers.createElement(model, WebUIProjectSettingsPart);
        };
        /** @internal */
        WebUIProjectSettingsPart.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__enableMicroflowReachabilityAnalysis.isAvailable) {
                this.enableMicroflowReachabilityAnalysis = true;
            }
            this.theme = "(Default)";
        };
        WebUIProjectSettingsPart.structureTypeName = "Settings$WebUIProjectSettingsPart";
        WebUIProjectSettingsPart.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "themeModuleName": {
                    "introduced": "7.9.0"
                },
                "feedbackWidgetUpdated": {
                    "deleted": "6.2.0",
                    "deletionMessage": null
                },
                "enableDownloadResources": {
                    "introduced": "6.6.0"
                },
                "enableMicroflowReachabilityAnalysis": {
                    "introduced": "7.0.2"
                }
            }
        }, internal.StructureType.Element);
        return WebUIProjectSettingsPart;
    }(ProjectSettingsPart));
    settings.WebUIProjectSettingsPart = WebUIProjectSettingsPart;
})(settings = exports.settings || (exports.settings = {}));
//# sourceMappingURL=settings.js.map