"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require("./projects");
var webservices_1 = require("./webservices");
var rest;
(function (rest) {
    var RestAuthenticationType = /** @class */ (function (_super) {
        __extends(RestAuthenticationType, _super);
        function RestAuthenticationType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "rest.RestAuthenticationType";
            return _this;
        }
        RestAuthenticationType.Basic = new RestAuthenticationType("Basic", {});
        RestAuthenticationType.None = new RestAuthenticationType("None", {});
        return RestAuthenticationType;
    }(internal.AbstractEnum));
    rest.RestAuthenticationType = RestAuthenticationType;
    var RestOperationParameterType = /** @class */ (function (_super) {
        __extends(RestOperationParameterType, _super);
        function RestOperationParameterType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "rest.RestOperationParameterType";
            return _this;
        }
        RestOperationParameterType.Path = new RestOperationParameterType("Path", {});
        RestOperationParameterType.Query = new RestOperationParameterType("Query", {});
        return RestOperationParameterType;
    }(internal.AbstractEnum));
    rest.RestOperationParameterType = RestOperationParameterType;
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-odata-services relevant section in reference guide}
     */
    var PublishedODataService = /** @class */ (function (_super) {
        __extends(PublishedODataService, _super);
        function PublishedODataService(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__namespace = new internal.PrimitiveProperty(PublishedODataService, _this, "namespace", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__path = new internal.PrimitiveProperty(PublishedODataService, _this, "path", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__allowedModuleRoles = new internal.ByNameReferenceListProperty(PublishedODataService, _this, "allowedModuleRoles", [], "Security$ModuleRole");
            /** @internal */
            _this.__resources = new internal.PartListProperty(PublishedODataService, _this, "resources", []);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(PublishedODataService.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedODataService.prototype, "namespace", {
            get: function () { return this.__namespace.get(); },
            set: function (newValue) { this.__namespace.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedODataService.prototype, "path", {
            get: function () { return this.__path.get(); },
            set: function (newValue) { this.__path.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedODataService.prototype, "allowedModuleRoles", {
            get: function () { return this.__allowedModuleRoles.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedODataService.prototype, "allowedModuleRolesQualifiedNames", {
            get: function () { return this.__allowedModuleRoles.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedODataService.prototype, "resources", {
            get: function () { return this.__resources.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new PublishedODataService unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        PublishedODataService.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, PublishedODataService);
        };
        /** @internal */
        PublishedODataService.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.namespace = "DefaultNamespace";
        };
        PublishedODataService.structureTypeName = "Rest$PublishedODataService";
        PublishedODataService.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return PublishedODataService;
    }(projects_1.projects.Document));
    rest.PublishedODataService = PublishedODataService;
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-odata-resource relevant section in reference guide}
     */
    var PublishedRestResource = /** @class */ (function (_super) {
        __extends(PublishedRestResource, _super);
        function PublishedRestResource(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__path = new internal.PrimitiveProperty(PublishedRestResource, _this, "path", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__usePaging = new internal.PrimitiveProperty(PublishedRestResource, _this, "usePaging", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__pageSize = new internal.PrimitiveProperty(PublishedRestResource, _this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new PublishedRestResource() cannot be invoked directly, please use 'model.rest.createPublishedRestResource()'");
            }
            return _this;
        }
        Object.defineProperty(PublishedRestResource.prototype, "containerAsPublishedODataService", {
            get: function () { return _super.prototype.getContainerAs.call(this, PublishedODataService); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestResource.prototype, "path", {
            get: function () { return this.__path.get(); },
            set: function (newValue) { this.__path.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestResource.prototype, "usePaging", {
            get: function () { return this.__usePaging.get(); },
            set: function (newValue) { this.__usePaging.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestResource.prototype, "pageSize", {
            get: function () { return this.__pageSize.get(); },
            set: function (newValue) { this.__pageSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new PublishedRestResource instance in the SDK and on the server.
         * The new PublishedRestResource will be automatically stored in the 'resources' property
         * of the parent PublishedODataService element passed as argument.
         */
        PublishedRestResource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, PublishedRestResource, "resources", true);
        };
        /**
         * Creates and returns a new PublishedRestResource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PublishedRestResource.create = function (model) {
            return internal.instancehelpers.createElement(model, PublishedRestResource);
        };
        /** @internal */
        PublishedRestResource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.pageSize = 10000;
        };
        PublishedRestResource.structureTypeName = "Rest$PublishedRestResource";
        PublishedRestResource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return PublishedRestResource;
    }(webservices_1.webservices.PublishedResource));
    rest.PublishedRestResource = PublishedRestResource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-rest-services relevant section in reference guide}
     *
     * In version 7.11.0: removed experimental
     * In version 7.6.0: introduced
     */
    var PublishedRestService = /** @class */ (function (_super) {
        __extends(PublishedRestService, _super);
        function PublishedRestService(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__path = new internal.PrimitiveProperty(PublishedRestService, _this, "path", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__serviceName = new internal.PrimitiveProperty(PublishedRestService, _this, "serviceName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__version = new internal.PrimitiveProperty(PublishedRestService, _this, "version", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__authenticationType = new internal.EnumProperty(PublishedRestService, _this, "authenticationType", RestAuthenticationType.Basic, RestAuthenticationType);
            /** @internal */
            _this.__allowedRoles = new internal.ByNameReferenceListProperty(PublishedRestService, _this, "allowedRoles", [], "Security$ModuleRole");
            /** @internal */
            _this.__resources = new internal.PartListProperty(PublishedRestService, _this, "resources", []);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(PublishedRestService.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestService.prototype, "path", {
            get: function () { return this.__path.get(); },
            set: function (newValue) { this.__path.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestService.prototype, "serviceName", {
            /**
             * In version 7.12.0: introduced
             */
            get: function () { return this.__serviceName.get(); },
            set: function (newValue) { this.__serviceName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestService.prototype, "version", {
            /**
             * In version 7.12.0: introduced
             */
            get: function () { return this.__version.get(); },
            set: function (newValue) { this.__version.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestService.prototype, "authenticationType", {
            /**
             * In version 7.11.0: introduced
             */
            get: function () { return this.__authenticationType.get(); },
            set: function (newValue) { this.__authenticationType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestService.prototype, "allowedRoles", {
            get: function () { return this.__allowedRoles.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestService.prototype, "allowedRolesQualifiedNames", {
            get: function () { return this.__allowedRoles.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestService.prototype, "resources", {
            /**
             * In version 7.7.0: introduced
             */
            get: function () { return this.__resources.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new PublishedRestService unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        PublishedRestService.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, PublishedRestService);
        };
        /** @internal */
        PublishedRestService.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__authenticationType.isAvailable) {
                this.authenticationType = RestAuthenticationType.Basic;
            }
            if (this.__version.isAvailable) {
                this.version = "1.0.0";
            }
        };
        PublishedRestService.structureTypeName = "Rest$PublishedRestService";
        PublishedRestService.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.6.0",
            "properties": {
                "serviceName": {
                    "introduced": "7.12.0"
                },
                "version": {
                    "introduced": "7.12.0"
                },
                "authenticationType": {
                    "introduced": "7.11.0"
                },
                "resources": {
                    "introduced": "7.7.0"
                }
            },
            "experimental": {
                "currentValue": false,
                "changedIn": [
                    "7.11.0"
                ]
            }
        }, internal.StructureType.ModelUnit);
        return PublishedRestService;
    }(projects_1.projects.Document));
    rest.PublishedRestService = PublishedRestService;
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-rest-operation relevant section in reference guide}
     *
     * In version 7.11.0: removed experimental
     * In version 7.7.0: introduced
     */
    var PublishedRestServiceOperation = /** @class */ (function (_super) {
        __extends(PublishedRestServiceOperation, _super);
        function PublishedRestServiceOperation(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__summary = new internal.PrimitiveProperty(PublishedRestServiceOperation, _this, "summary", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__documentation = new internal.PrimitiveProperty(PublishedRestServiceOperation, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__path = new internal.PrimitiveProperty(PublishedRestServiceOperation, _this, "path", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__httpMethod = new internal.EnumProperty(PublishedRestServiceOperation, _this, "httpMethod", services_1.services.HttpMethod.Get, services_1.services.HttpMethod);
            /** @internal */
            _this.__microflow = new internal.ByNameReferenceProperty(PublishedRestServiceOperation, _this, "microflow", null, "Microflows$Microflow");
            if (arguments.length < 4) {
                throw new Error("new PublishedRestServiceOperation() cannot be invoked directly, please use 'model.rest.createPublishedRestServiceOperation()'");
            }
            return _this;
        }
        Object.defineProperty(PublishedRestServiceOperation.prototype, "containerAsPublishedRestServiceResource", {
            get: function () { return _super.prototype.getContainerAs.call(this, PublishedRestServiceResource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestServiceOperation.prototype, "summary", {
            get: function () { return this.__summary.get(); },
            set: function (newValue) { this.__summary.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestServiceOperation.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestServiceOperation.prototype, "path", {
            get: function () { return this.__path.get(); },
            set: function (newValue) { this.__path.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestServiceOperation.prototype, "httpMethod", {
            get: function () { return this.__httpMethod.get(); },
            set: function (newValue) { this.__httpMethod.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestServiceOperation.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestServiceOperation.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new PublishedRestServiceOperation instance in the SDK and on the server.
         * The new PublishedRestServiceOperation will be automatically stored in the 'operations' property
         * of the parent PublishedRestServiceResource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        PublishedRestServiceOperation.createIn = function (container) {
            internal.createInVersionCheck(container.model, PublishedRestServiceOperation.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, PublishedRestServiceOperation, "operations", true);
        };
        /**
         * Creates and returns a new PublishedRestServiceOperation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PublishedRestServiceOperation.create = function (model) {
            return internal.instancehelpers.createElement(model, PublishedRestServiceOperation);
        };
        /** @internal */
        PublishedRestServiceOperation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.httpMethod = services_1.services.HttpMethod.Get;
        };
        PublishedRestServiceOperation.structureTypeName = "Rest$PublishedRestServiceOperation";
        PublishedRestServiceOperation.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.7.0",
            "experimental": {
                "currentValue": false,
                "changedIn": [
                    "7.11.0"
                ]
            }
        }, internal.StructureType.Element);
        return PublishedRestServiceOperation;
    }(internal.Element));
    rest.PublishedRestServiceOperation = PublishedRestServiceOperation;
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-rest-resource relevant section in reference guide}
     *
     * In version 7.11.0: removed experimental
     * In version 7.7.0: introduced
     */
    var PublishedRestServiceResource = /** @class */ (function (_super) {
        __extends(PublishedRestServiceResource, _super);
        function PublishedRestServiceResource(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(PublishedRestServiceResource, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__documentation = new internal.PrimitiveProperty(PublishedRestServiceResource, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__operations = new internal.PartListProperty(PublishedRestServiceResource, _this, "operations", []);
            if (arguments.length < 4) {
                throw new Error("new PublishedRestServiceResource() cannot be invoked directly, please use 'model.rest.createPublishedRestServiceResource()'");
            }
            return _this;
        }
        Object.defineProperty(PublishedRestServiceResource.prototype, "containerAsPublishedRestService", {
            get: function () { return _super.prototype.getContainerAs.call(this, PublishedRestService); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestServiceResource.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestServiceResource.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedRestServiceResource.prototype, "operations", {
            get: function () { return this.__operations.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new PublishedRestServiceResource instance in the SDK and on the server.
         * The new PublishedRestServiceResource will be automatically stored in the 'resources' property
         * of the parent PublishedRestService element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        PublishedRestServiceResource.createIn = function (container) {
            internal.createInVersionCheck(container.model, PublishedRestServiceResource.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, PublishedRestServiceResource, "resources", true);
        };
        /**
         * Creates and returns a new PublishedRestServiceResource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PublishedRestServiceResource.create = function (model) {
            return internal.instancehelpers.createElement(model, PublishedRestServiceResource);
        };
        /** @internal */
        PublishedRestServiceResource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        PublishedRestServiceResource.structureTypeName = "Rest$PublishedRestServiceResource";
        PublishedRestServiceResource.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.7.0",
            "experimental": {
                "currentValue": false,
                "changedIn": [
                    "7.11.0"
                ]
            }
        }, internal.StructureType.Element);
        return PublishedRestServiceResource;
    }(internal.Element));
    rest.PublishedRestServiceResource = PublishedRestServiceResource;
    /**
     * In version 7.11.0: removed experimental
     * In version 7.8.0: introduced
     */
    var RestOperationParameter = /** @class */ (function (_super) {
        __extends(RestOperationParameter, _super);
        function RestOperationParameter(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(RestOperationParameter, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__dataType = new internal.PrimitiveProperty(RestOperationParameter, _this, "dataType", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__parameterType = new internal.EnumProperty(RestOperationParameter, _this, "parameterType", RestOperationParameterType.Query, RestOperationParameterType);
            if (arguments.length < 4) {
                throw new Error("new RestOperationParameter() cannot be invoked directly, please use 'model.rest.createRestOperationParameter()'");
            }
            return _this;
        }
        Object.defineProperty(RestOperationParameter.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RestOperationParameter.prototype, "dataType", {
            /**
             * The value of this property is conceptually of type dataTypes.LegacyDataType.
             *
             * In version 7.9.0: deleted
             */
            get: function () { return this.__dataType.get(); },
            set: function (newValue) { this.__dataType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RestOperationParameter.prototype, "parameterType", {
            get: function () { return this.__parameterType.get(); },
            set: function (newValue) { this.__parameterType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RestOperationParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RestOperationParameter.create = function (model) {
            return internal.instancehelpers.createElement(model, RestOperationParameter);
        };
        /** @internal */
        RestOperationParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__dataType.isAvailable) {
                this.dataType = "String";
            }
            this.parameterType = RestOperationParameterType.Query;
        };
        RestOperationParameter.structureTypeName = "Rest$RestOperationParameter";
        RestOperationParameter.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.8.0",
            "properties": {
                "dataType": {
                    "deleted": "7.9.0",
                    "deletionMessage": null,
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "experimental": {
                "currentValue": false,
                "changedIn": [
                    "7.11.0"
                ]
            }
        }, internal.StructureType.Element);
        return RestOperationParameter;
    }(internal.Element));
    rest.RestOperationParameter = RestOperationParameter;
})(rest = exports.rest || (exports.rest = {}));
var services_1 = require("./services");
//# sourceMappingURL=rest.js.map