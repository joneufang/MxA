"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var services;
(function (services) {
    var HttpMethod = /** @class */ (function (_super) {
        __extends(HttpMethod, _super);
        function HttpMethod() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "services.HttpMethod";
            return _this;
        }
        HttpMethod.Get = new HttpMethod("Get", {});
        HttpMethod.Post = new HttpMethod("Post", {});
        HttpMethod.Put = new HttpMethod("Put", {});
        HttpMethod.Patch = new HttpMethod("Patch", {});
        HttpMethod.Delete = new HttpMethod("Delete", {});
        return HttpMethod;
    }(internal.AbstractEnum));
    services.HttpMethod = HttpMethod;
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Services`.
     */
})(services = exports.services || (exports.services = {}));
//# sourceMappingURL=services.js.map