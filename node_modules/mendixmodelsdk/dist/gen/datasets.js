"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require("./projects");
var datasets;
(function (datasets) {
    var DateTimeIntervalLength = /** @class */ (function (_super) {
        __extends(DateTimeIntervalLength, _super);
        function DateTimeIntervalLength() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "datasets.DateTimeIntervalLength";
            return _this;
        }
        DateTimeIntervalLength.Day = new DateTimeIntervalLength("Day", {});
        DateTimeIntervalLength.Week = new DateTimeIntervalLength("Week", {});
        DateTimeIntervalLength.Period = new DateTimeIntervalLength("Period", {});
        DateTimeIntervalLength.Month = new DateTimeIntervalLength("Month", {});
        DateTimeIntervalLength.Quarter = new DateTimeIntervalLength("Quarter", {});
        DateTimeIntervalLength.Year = new DateTimeIntervalLength("Year", {});
        return DateTimeIntervalLength;
    }(internal.AbstractEnum));
    datasets.DateTimeIntervalLength = DateTimeIntervalLength;
    var DateTimeIntervalModifier = /** @class */ (function (_super) {
        __extends(DateTimeIntervalModifier, _super);
        function DateTimeIntervalModifier() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "datasets.DateTimeIntervalModifier";
            return _this;
        }
        DateTimeIntervalModifier.Last = new DateTimeIntervalModifier("Last", {});
        DateTimeIntervalModifier.This = new DateTimeIntervalModifier("This", {});
        DateTimeIntervalModifier.Next = new DateTimeIntervalModifier("Next", {});
        DateTimeIntervalModifier.Past = new DateTimeIntervalModifier("Past", {});
        DateTimeIntervalModifier.Future = new DateTimeIntervalModifier("Future", {});
        DateTimeIntervalModifier.Always = new DateTimeIntervalModifier("Always", {});
        return DateTimeIntervalModifier;
    }(internal.AbstractEnum));
    datasets.DateTimeIntervalModifier = DateTimeIntervalModifier;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-sets relevant section in reference guide}
     */
    var DataSet = /** @class */ (function (_super) {
        __extends(DataSet, _super);
        function DataSet(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__source = new internal.PartProperty(DataSet, _this, "source", null, true);
            /** @internal */
            _this.__parameters = new internal.PartListProperty(DataSet, _this, "parameters", []);
            /** @internal */
            _this.__dataSetAccess = new internal.PartProperty(DataSet, _this, "dataSetAccess", null, true);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(DataSet.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSet.prototype, "source", {
            get: function () { return this.__source.get(); },
            set: function (newValue) { this.__source.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSet.prototype, "parameters", {
            get: function () { return this.__parameters.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSet.prototype, "dataSetAccess", {
            get: function () { return this.__dataSetAccess.get(); },
            set: function (newValue) { this.__dataSetAccess.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new DataSet unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        DataSet.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, DataSet);
        };
        /** @internal */
        DataSet.prototype._isByNameReferrable = function () { return true; };
        /** @internal */
        DataSet.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataSetAccess = DataSetAccess.create(this.model);
            this.source = OqlDataSetSource.create(this.model);
        };
        DataSet.structureTypeName = "DataSets$DataSet";
        DataSet.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "source": {
                    "required": {
                        "currentValue": true
                    }
                },
                "parameters": {
                    "public": {
                        "currentValue": true
                    }
                },
                "dataSetAccess": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return DataSet;
    }(projects_1.projects.Document));
    datasets.DataSet = DataSet;
    var DataSetAccess = /** @class */ (function (_super) {
        __extends(DataSetAccess, _super);
        function DataSetAccess(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__moduleRoleAccessList = new internal.PartListProperty(DataSetAccess, _this, "moduleRoleAccessList", []);
            if (arguments.length < 4) {
                throw new Error("new DataSetAccess() cannot be invoked directly, please use 'model.datasets.createDataSetAccess()'");
            }
            return _this;
        }
        Object.defineProperty(DataSetAccess.prototype, "containerAsDataSet", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetAccess.prototype, "moduleRoleAccessList", {
            get: function () { return this.__moduleRoleAccessList.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataSetAccess instance in the SDK and on the server.
         * The new DataSetAccess will be automatically stored in the 'dataSetAccess' property
         * of the parent DataSet element passed as argument.
         */
        DataSetAccess.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataSetAccess, "dataSetAccess", false);
        };
        /**
         * Creates and returns a new DataSetAccess instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataSetAccess.create = function (model) {
            return internal.instancehelpers.createElement(model, DataSetAccess);
        };
        /** @internal */
        DataSetAccess.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataSetAccess.structureTypeName = "DataSets$DataSetAccess";
        DataSetAccess.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataSetAccess;
    }(internal.Element));
    datasets.DataSetAccess = DataSetAccess;
    var DataSetColumn = /** @class */ (function (_super) {
        __extends(DataSetColumn, _super);
        function DataSetColumn(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(DataSetColumn, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__type = new internal.PrimitiveProperty(DataSetColumn, _this, "type", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__columnType = new internal.PartProperty(DataSetColumn, _this, "columnType", null, true);
            if (arguments.length < 4) {
                throw new Error("new DataSetColumn() cannot be invoked directly, please use 'model.datasets.createDataSetColumn()'");
            }
            return _this;
        }
        Object.defineProperty(DataSetColumn.prototype, "containerAsJavaDataSetSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaDataSetSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetColumn.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetColumn.prototype, "type", {
            /**
             * The value of this property is conceptually of type dataTypes.LegacyDataType.
             *
             * In version 7.9.0: deleted
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetColumn.prototype, "columnType", {
            /**
             * In version 7.9.0: introduced
             */
            get: function () { return this.__columnType.get(); },
            set: function (newValue) { this.__columnType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataSetColumn instance in the SDK and on the server.
         * The new DataSetColumn will be automatically stored in the 'columns' property
         * of the parent JavaDataSetSource element passed as argument.
         */
        DataSetColumn.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataSetColumn, "columns", true);
        };
        /**
         * Creates and returns a new DataSetColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataSetColumn.create = function (model) {
            return internal.instancehelpers.createElement(model, DataSetColumn);
        };
        /** @internal */
        DataSetColumn.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__columnType.isAvailable) {
                this.columnType = datatypes_1.datatypes.StringType.create(this.model);
            }
            this.name = "Column";
            if (this.__type.isAvailable) {
                this.type = "String";
            }
        };
        DataSetColumn.structureTypeName = "DataSets$DataSetColumn";
        DataSetColumn.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "type": {
                    "deleted": "7.9.0",
                    "deletionMessage": "Use property 'columnType' instead"
                },
                "columnType": {
                    "introduced": "7.9.0",
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DataSetColumn;
    }(internal.Element));
    datasets.DataSetColumn = DataSetColumn;
    var DataSetConstraintAccess = /** @class */ (function (_super) {
        __extends(DataSetConstraintAccess, _super);
        function DataSetConstraintAccess(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__constraintText = new internal.PrimitiveProperty(DataSetConstraintAccess, _this, "constraintText", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__enabled = new internal.PrimitiveProperty(DataSetConstraintAccess, _this, "enabled", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DataSetConstraintAccess() cannot be invoked directly, please use 'model.datasets.createDataSetConstraintAccess()'");
            }
            return _this;
        }
        Object.defineProperty(DataSetConstraintAccess.prototype, "containerAsDataSetParameterAccess", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSetParameterAccess); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetConstraintAccess.prototype, "constraintText", {
            get: function () { return this.__constraintText.get(); },
            set: function (newValue) { this.__constraintText.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetConstraintAccess.prototype, "enabled", {
            get: function () { return this.__enabled.get(); },
            set: function (newValue) { this.__enabled.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataSetConstraintAccess instance in the SDK and on the server.
         * The new DataSetConstraintAccess will be automatically stored in the 'constraintAccessList' property
         * of the parent DataSetParameterAccess element passed as argument.
         */
        DataSetConstraintAccess.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataSetConstraintAccess, "constraintAccessList", true);
        };
        /**
         * Creates and returns a new DataSetConstraintAccess instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataSetConstraintAccess.create = function (model) {
            return internal.instancehelpers.createElement(model, DataSetConstraintAccess);
        };
        /** @internal */
        DataSetConstraintAccess.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataSetConstraintAccess.structureTypeName = "DataSets$DataSetConstraintAccess";
        DataSetConstraintAccess.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataSetConstraintAccess;
    }(internal.Element));
    datasets.DataSetConstraintAccess = DataSetConstraintAccess;
    var DataSetParameterConstraint = /** @class */ (function (_super) {
        __extends(DataSetParameterConstraint, _super);
        function DataSetParameterConstraint(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DataSetParameterConstraint() cannot be invoked directly, please use 'model.datasets.createDataSetParameterConstraint()'");
            }
            return _this;
        }
        Object.defineProperty(DataSetParameterConstraint.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        DataSetParameterConstraint.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataSetParameterConstraint.structureTypeName = "DataSets$DataSetParameterConstraint";
        DataSetParameterConstraint.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataSetParameterConstraint;
    }(internal.Element));
    datasets.DataSetParameterConstraint = DataSetParameterConstraint;
    var DataSetDateTimeConstraint = /** @class */ (function (_super) {
        __extends(DataSetDateTimeConstraint, _super);
        function DataSetDateTimeConstraint(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__modifier = new internal.EnumProperty(DataSetDateTimeConstraint, _this, "modifier", DateTimeIntervalModifier.Last, DateTimeIntervalModifier);
            /** @internal */
            _this.__length = new internal.EnumProperty(DataSetDateTimeConstraint, _this, "length", DateTimeIntervalLength.Month, DateTimeIntervalLength);
            if (arguments.length < 4) {
                throw new Error("new DataSetDateTimeConstraint() cannot be invoked directly, please use 'model.datasets.createDataSetDateTimeConstraint()'");
            }
            return _this;
        }
        Object.defineProperty(DataSetDateTimeConstraint.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetDateTimeConstraint.prototype, "modifier", {
            get: function () { return this.__modifier.get(); },
            set: function (newValue) { this.__modifier.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetDateTimeConstraint.prototype, "length", {
            get: function () { return this.__length.get(); },
            set: function (newValue) { this.__length.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataSetDateTimeConstraint instance in the SDK and on the server.
         * The new DataSetDateTimeConstraint will be automatically stored in the 'constraints' property
         * of the parent DataSetParameter element passed as argument.
         */
        DataSetDateTimeConstraint.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataSetDateTimeConstraint, "constraints", true);
        };
        /**
         * Creates and returns a new DataSetDateTimeConstraint instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataSetDateTimeConstraint.create = function (model) {
            return internal.instancehelpers.createElement(model, DataSetDateTimeConstraint);
        };
        /** @internal */
        DataSetDateTimeConstraint.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.length = DateTimeIntervalLength.Month;
            this.modifier = DateTimeIntervalModifier.Last;
        };
        DataSetDateTimeConstraint.structureTypeName = "DataSets$DataSetDateTimeConstraint";
        DataSetDateTimeConstraint.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataSetDateTimeConstraint;
    }(DataSetParameterConstraint));
    datasets.DataSetDateTimeConstraint = DataSetDateTimeConstraint;
    var DataSetModuleRoleAccess = /** @class */ (function (_super) {
        __extends(DataSetModuleRoleAccess, _super);
        function DataSetModuleRoleAccess(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__parameterAccessList = new internal.PartListProperty(DataSetModuleRoleAccess, _this, "parameterAccessList", []);
            /** @internal */
            _this.__moduleRole = new internal.ByNameReferenceProperty(DataSetModuleRoleAccess, _this, "moduleRole", null, "Security$ModuleRole");
            if (arguments.length < 4) {
                throw new Error("new DataSetModuleRoleAccess() cannot be invoked directly, please use 'model.datasets.createDataSetModuleRoleAccess()'");
            }
            return _this;
        }
        Object.defineProperty(DataSetModuleRoleAccess.prototype, "containerAsDataSetAccess", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSetAccess); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetModuleRoleAccess.prototype, "parameterAccessList", {
            get: function () { return this.__parameterAccessList.get(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetModuleRoleAccess.prototype, "moduleRole", {
            get: function () { return this.__moduleRole.get(); },
            set: function (newValue) { this.__moduleRole.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetModuleRoleAccess.prototype, "moduleRoleQualifiedName", {
            get: function () { return this.__moduleRole.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataSetModuleRoleAccess instance in the SDK and on the server.
         * The new DataSetModuleRoleAccess will be automatically stored in the 'moduleRoleAccessList' property
         * of the parent DataSetAccess element passed as argument.
         */
        DataSetModuleRoleAccess.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataSetModuleRoleAccess, "moduleRoleAccessList", true);
        };
        /**
         * Creates and returns a new DataSetModuleRoleAccess instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataSetModuleRoleAccess.create = function (model) {
            return internal.instancehelpers.createElement(model, DataSetModuleRoleAccess);
        };
        /** @internal */
        DataSetModuleRoleAccess.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataSetModuleRoleAccess.structureTypeName = "DataSets$DataSetModuleRoleAccess";
        DataSetModuleRoleAccess.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataSetModuleRoleAccess;
    }(internal.Element));
    datasets.DataSetModuleRoleAccess = DataSetModuleRoleAccess;
    var DataSetNumericConstraint = /** @class */ (function (_super) {
        __extends(DataSetNumericConstraint, _super);
        function DataSetNumericConstraint(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__begin = new internal.PrimitiveProperty(DataSetNumericConstraint, _this, "begin", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__applyBegin = new internal.PrimitiveProperty(DataSetNumericConstraint, _this, "applyBegin", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__end = new internal.PrimitiveProperty(DataSetNumericConstraint, _this, "end", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__applyEnd = new internal.PrimitiveProperty(DataSetNumericConstraint, _this, "applyEnd", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DataSetNumericConstraint() cannot be invoked directly, please use 'model.datasets.createDataSetNumericConstraint()'");
            }
            return _this;
        }
        Object.defineProperty(DataSetNumericConstraint.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetNumericConstraint.prototype, "begin", {
            get: function () { return this.__begin.get(); },
            set: function (newValue) { this.__begin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetNumericConstraint.prototype, "applyBegin", {
            get: function () { return this.__applyBegin.get(); },
            set: function (newValue) { this.__applyBegin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetNumericConstraint.prototype, "end", {
            get: function () { return this.__end.get(); },
            set: function (newValue) { this.__end.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetNumericConstraint.prototype, "applyEnd", {
            get: function () { return this.__applyEnd.get(); },
            set: function (newValue) { this.__applyEnd.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataSetNumericConstraint instance in the SDK and on the server.
         * The new DataSetNumericConstraint will be automatically stored in the 'constraints' property
         * of the parent DataSetParameter element passed as argument.
         */
        DataSetNumericConstraint.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataSetNumericConstraint, "constraints", true);
        };
        /**
         * Creates and returns a new DataSetNumericConstraint instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataSetNumericConstraint.create = function (model) {
            return internal.instancehelpers.createElement(model, DataSetNumericConstraint);
        };
        /** @internal */
        DataSetNumericConstraint.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.applyBegin = true;
            this.applyEnd = true;
            this.begin = "0";
            this.end = "0";
        };
        DataSetNumericConstraint.structureTypeName = "DataSets$DataSetNumericConstraint";
        DataSetNumericConstraint.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataSetNumericConstraint;
    }(DataSetParameterConstraint));
    datasets.DataSetNumericConstraint = DataSetNumericConstraint;
    var DataSetObjectConstraint = /** @class */ (function (_super) {
        __extends(DataSetObjectConstraint, _super);
        function DataSetObjectConstraint(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(DataSetObjectConstraint, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__constraint = new internal.PrimitiveProperty(DataSetObjectConstraint, _this, "constraint", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new DataSetObjectConstraint() cannot be invoked directly, please use 'model.datasets.createDataSetObjectConstraint()'");
            }
            return _this;
        }
        Object.defineProperty(DataSetObjectConstraint.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetObjectConstraint.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetObjectConstraint.prototype, "constraint", {
            /**
             * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
             */
            get: function () { return this.__constraint.get(); },
            set: function (newValue) { this.__constraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataSetObjectConstraint instance in the SDK and on the server.
         * The new DataSetObjectConstraint will be automatically stored in the 'constraints' property
         * of the parent DataSetParameter element passed as argument.
         */
        DataSetObjectConstraint.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataSetObjectConstraint, "constraints", true);
        };
        /**
         * Creates and returns a new DataSetObjectConstraint instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataSetObjectConstraint.create = function (model) {
            return internal.instancehelpers.createElement(model, DataSetObjectConstraint);
        };
        /** @internal */
        DataSetObjectConstraint.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataSetObjectConstraint.structureTypeName = "DataSets$DataSetObjectConstraint";
        DataSetObjectConstraint.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataSetObjectConstraint;
    }(DataSetParameterConstraint));
    datasets.DataSetObjectConstraint = DataSetObjectConstraint;
    var DataSetParameter = /** @class */ (function (_super) {
        __extends(DataSetParameter, _super);
        function DataSetParameter(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__name = new internal.PrimitiveProperty(DataSetParameter, _this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__type = new internal.PrimitiveProperty(DataSetParameter, _this, "type", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__parameterType = new internal.PartProperty(DataSetParameter, _this, "parameterType", null, true);
            /** @internal */
            _this.__parameterTypeIsRange = new internal.PrimitiveProperty(DataSetParameter, _this, "parameterTypeIsRange", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            _this.__constraints = new internal.PartListProperty(DataSetParameter, _this, "constraints", []);
            if (arguments.length < 4) {
                throw new Error("new DataSetParameter() cannot be invoked directly, please use 'model.datasets.createDataSetParameter()'");
            }
            return _this;
        }
        Object.defineProperty(DataSetParameter.prototype, "containerAsDataSet", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetParameter.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetParameter.prototype, "type", {
            /**
             * The value of this property is conceptually of type dataTypes.LegacyDataType.
             *
             * In version 7.9.0: deleted
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetParameter.prototype, "parameterType", {
            /**
             * In version 7.9.0: introduced
             */
            get: function () { return this.__parameterType.get(); },
            set: function (newValue) { this.__parameterType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetParameter.prototype, "parameterTypeIsRange", {
            /**
             * In version 7.9.0: introduced
             */
            get: function () { return this.__parameterTypeIsRange.get(); },
            set: function (newValue) { this.__parameterTypeIsRange.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetParameter.prototype, "constraints", {
            get: function () { return this.__constraints.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataSetParameter instance in the SDK and on the server.
         * The new DataSetParameter will be automatically stored in the 'parameters' property
         * of the parent DataSet element passed as argument.
         */
        DataSetParameter.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataSetParameter, "parameters", true);
        };
        /**
         * Creates and returns a new DataSetParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataSetParameter.create = function (model) {
            return internal.instancehelpers.createElement(model, DataSetParameter);
        };
        /** @internal */
        DataSetParameter.prototype._isByNameReferrable = function () { return true; };
        Object.defineProperty(DataSetParameter.prototype, "qualifiedName", {
            get: function () {
                return this._getQualifiedName();
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        DataSetParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__parameterType.isAvailable) {
                this.parameterType = datatypes_1.datatypes.UnknownType.create(this.model);
            }
            if (this.__type.isAvailable) {
                this.type = "Unknown";
            }
        };
        DataSetParameter.structureTypeName = "DataSets$DataSetParameter";
        DataSetParameter.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "type": {
                    "deleted": "7.9.0",
                    "deletionMessage": "Use property 'columnType' instead"
                },
                "parameterType": {
                    "introduced": "7.9.0",
                    "required": {
                        "currentValue": true
                    }
                },
                "parameterTypeIsRange": {
                    "introduced": "7.9.0"
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DataSetParameter;
    }(internal.Element));
    datasets.DataSetParameter = DataSetParameter;
    var DataSetParameterAccess = /** @class */ (function (_super) {
        __extends(DataSetParameterAccess, _super);
        function DataSetParameterAccess(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__parameterName = new internal.PrimitiveProperty(DataSetParameterAccess, _this, "parameterName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__constraintAccessList = new internal.PartListProperty(DataSetParameterAccess, _this, "constraintAccessList", []);
            if (arguments.length < 4) {
                throw new Error("new DataSetParameterAccess() cannot be invoked directly, please use 'model.datasets.createDataSetParameterAccess()'");
            }
            return _this;
        }
        Object.defineProperty(DataSetParameterAccess.prototype, "containerAsDataSetModuleRoleAccess", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSetModuleRoleAccess); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetParameterAccess.prototype, "parameterName", {
            get: function () { return this.__parameterName.get(); },
            set: function (newValue) { this.__parameterName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataSetParameterAccess.prototype, "constraintAccessList", {
            get: function () { return this.__constraintAccessList.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataSetParameterAccess instance in the SDK and on the server.
         * The new DataSetParameterAccess will be automatically stored in the 'parameterAccessList' property
         * of the parent DataSetModuleRoleAccess element passed as argument.
         */
        DataSetParameterAccess.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataSetParameterAccess, "parameterAccessList", true);
        };
        /**
         * Creates and returns a new DataSetParameterAccess instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataSetParameterAccess.create = function (model) {
            return internal.instancehelpers.createElement(model, DataSetParameterAccess);
        };
        /** @internal */
        DataSetParameterAccess.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataSetParameterAccess.structureTypeName = "DataSets$DataSetParameterAccess";
        DataSetParameterAccess.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataSetParameterAccess;
    }(internal.Element));
    datasets.DataSetParameterAccess = DataSetParameterAccess;
    var DataSetSource = /** @class */ (function (_super) {
        __extends(DataSetSource, _super);
        function DataSetSource(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DataSetSource() cannot be invoked directly, please use 'model.datasets.createDataSetSource()'");
            }
            return _this;
        }
        Object.defineProperty(DataSetSource.prototype, "containerAsDataSet", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSet); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        DataSetSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataSetSource.structureTypeName = "DataSets$DataSetSource";
        DataSetSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataSetSource;
    }(internal.Element));
    datasets.DataSetSource = DataSetSource;
    var JavaDataSetSource = /** @class */ (function (_super) {
        __extends(JavaDataSetSource, _super);
        function JavaDataSetSource(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__columns = new internal.PartListProperty(JavaDataSetSource, _this, "columns", []);
            if (arguments.length < 4) {
                throw new Error("new JavaDataSetSource() cannot be invoked directly, please use 'model.datasets.createJavaDataSetSource()'");
            }
            return _this;
        }
        Object.defineProperty(JavaDataSetSource.prototype, "containerAsDataSet", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaDataSetSource.prototype, "columns", {
            get: function () { return this.__columns.get(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new JavaDataSetSource instance in the SDK and on the server.
         * The new JavaDataSetSource will be automatically stored in the 'source' property
         * of the parent DataSet element passed as argument.
         */
        JavaDataSetSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, JavaDataSetSource, "source", false);
        };
        /**
         * Creates and returns a new JavaDataSetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        JavaDataSetSource.create = function (model) {
            return internal.instancehelpers.createElement(model, JavaDataSetSource);
        };
        /** @internal */
        JavaDataSetSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        JavaDataSetSource.structureTypeName = "DataSets$JavaDataSetSource";
        JavaDataSetSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return JavaDataSetSource;
    }(DataSetSource));
    datasets.JavaDataSetSource = JavaDataSetSource;
    var OqlDataSetSource = /** @class */ (function (_super) {
        __extends(OqlDataSetSource, _super);
        function OqlDataSetSource(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__query = new internal.PrimitiveProperty(OqlDataSetSource, _this, "query", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__ignoreErrorsInQuery = new internal.PrimitiveProperty(OqlDataSetSource, _this, "ignoreErrorsInQuery", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new OqlDataSetSource() cannot be invoked directly, please use 'model.datasets.createOqlDataSetSource()'");
            }
            return _this;
        }
        Object.defineProperty(OqlDataSetSource.prototype, "containerAsDataSet", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataSet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OqlDataSetSource.prototype, "query", {
            /**
             * The value of this property is conceptually of type oql.OqlQuery.
             */
            get: function () { return this.__query.get(); },
            set: function (newValue) { this.__query.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OqlDataSetSource.prototype, "ignoreErrorsInQuery", {
            get: function () { return this.__ignoreErrorsInQuery.get(); },
            set: function (newValue) { this.__ignoreErrorsInQuery.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new OqlDataSetSource instance in the SDK and on the server.
         * The new OqlDataSetSource will be automatically stored in the 'source' property
         * of the parent DataSet element passed as argument.
         */
        OqlDataSetSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, OqlDataSetSource, "source", false);
        };
        /**
         * Creates and returns a new OqlDataSetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OqlDataSetSource.create = function (model) {
            return internal.instancehelpers.createElement(model, OqlDataSetSource);
        };
        /** @internal */
        OqlDataSetSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        OqlDataSetSource.structureTypeName = "DataSets$OqlDataSetSource";
        OqlDataSetSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return OqlDataSetSource;
    }(DataSetSource));
    datasets.OqlDataSetSource = OqlDataSetSource;
})(datasets = exports.datasets || (exports.datasets = {}));
var datatypes_1 = require("./datatypes");
//# sourceMappingURL=datasets.js.map