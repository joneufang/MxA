"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var datatypes;
(function (datatypes) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `DataTypes`.
     */
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-types relevant section in reference guide}
     *
     * In version 7.9.0: introduced
     */
    var DataType = /** @class */ (function (_super) {
        __extends(DataType, _super);
        function DataType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DataType() cannot be invoked directly, please use 'model.datatypes.createDataType()'");
            }
            return _this;
        }
        Object.defineProperty(DataType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        DataType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataType.structureTypeName = "DataTypes$DataType";
        DataType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DataType;
    }(internal.Element));
    datatypes.DataType = DataType;
    /**
     * In version 7.9.0: introduced
     */
    var BinaryType = /** @class */ (function (_super) {
        __extends(BinaryType, _super);
        function BinaryType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new BinaryType() cannot be invoked directly, please use 'model.datatypes.createBinaryType()'");
            }
            return _this;
        }
        Object.defineProperty(BinaryType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "parameterType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "type", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "columnType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "parameterType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "parameterType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "type", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "variableType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "parameterType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "variableType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "variableType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * The new BinaryType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BinaryType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, BinaryType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BinaryType, "parameterType", false);
        };
        /**
         * Creates and returns a new BinaryType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BinaryType.create = function (model) {
            return internal.instancehelpers.createElement(model, BinaryType);
        };
        /** @internal */
        BinaryType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        BinaryType.structureTypeName = "DataTypes$BinaryType";
        BinaryType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BinaryType;
    }(DataType));
    datatypes.BinaryType = BinaryType;
    /**
     * In version 7.9.0: introduced
     */
    var BooleanType = /** @class */ (function (_super) {
        __extends(BooleanType, _super);
        function BooleanType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new BooleanType() cannot be invoked directly, please use 'model.datatypes.createBooleanType()'");
            }
            return _this;
        }
        Object.defineProperty(BooleanType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BooleanType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "parameterType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "type", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "columnType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "parameterType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "parameterType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "type", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "variableType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "parameterType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "variableType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "variableType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        BooleanType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, BooleanType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, BooleanType, "parameterType", false);
        };
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BooleanType.create = function (model) {
            return internal.instancehelpers.createElement(model, BooleanType);
        };
        /** @internal */
        BooleanType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        BooleanType.structureTypeName = "DataTypes$BooleanType";
        BooleanType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BooleanType;
    }(DataType));
    datatypes.BooleanType = BooleanType;
    /**
     * In version 7.9.0: introduced
     */
    var DateTimeType = /** @class */ (function (_super) {
        __extends(DateTimeType, _super);
        function DateTimeType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DateTimeType() cannot be invoked directly, please use 'model.datatypes.createDateTimeType()'");
            }
            return _this;
        }
        Object.defineProperty(DateTimeType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimeType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "parameterType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "type", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "columnType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "parameterType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "parameterType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "type", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "variableType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "parameterType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "variableType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "variableType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DateTimeType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, DateTimeType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DateTimeType, "parameterType", false);
        };
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DateTimeType.create = function (model) {
            return internal.instancehelpers.createElement(model, DateTimeType);
        };
        /** @internal */
        DateTimeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DateTimeType.structureTypeName = "DataTypes$DateTimeType";
        DateTimeType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DateTimeType;
    }(DataType));
    datatypes.DateTimeType = DateTimeType;
    /**
     * In version 7.9.0: introduced
     */
    var DecimalType = /** @class */ (function (_super) {
        __extends(DecimalType, _super);
        function DecimalType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DecimalType() cannot be invoked directly, please use 'model.datatypes.createDecimalType()'");
            }
            return _this;
        }
        Object.defineProperty(DecimalType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecimalType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "parameterType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "type", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "columnType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "parameterType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "parameterType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "type", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "variableType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "parameterType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "variableType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "variableType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        DecimalType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, DecimalType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, DecimalType, "parameterType", false);
        };
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DecimalType.create = function (model) {
            return internal.instancehelpers.createElement(model, DecimalType);
        };
        /** @internal */
        DecimalType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DecimalType.structureTypeName = "DataTypes$DecimalType";
        DecimalType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DecimalType;
    }(DataType));
    datatypes.DecimalType = DecimalType;
    /**
     * In version 7.9.0: introduced
     */
    var EmptyType = /** @class */ (function (_super) {
        __extends(EmptyType, _super);
        function EmptyType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new EmptyType() cannot be invoked directly, please use 'model.datatypes.createEmptyType()'");
            }
            return _this;
        }
        Object.defineProperty(EmptyType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "parameterType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "type", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "columnType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "parameterType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "parameterType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "type", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "variableType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "parameterType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "variableType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "variableType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * The new EmptyType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EmptyType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, EmptyType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EmptyType, "parameterType", false);
        };
        /**
         * Creates and returns a new EmptyType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EmptyType.create = function (model) {
            return internal.instancehelpers.createElement(model, EmptyType);
        };
        /** @internal */
        EmptyType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EmptyType.structureTypeName = "DataTypes$EmptyType";
        EmptyType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EmptyType;
    }(DataType));
    datatypes.EmptyType = EmptyType;
    /**
     * In version 7.9.0: introduced
     */
    var EntityType = /** @class */ (function (_super) {
        __extends(EntityType, _super);
        function EntityType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__entity = new internal.ByNameReferenceProperty(EntityType, _this, "entity", null, "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new EntityType() cannot be invoked directly, please use 'model.datatypes.createEntityType()'");
            }
            return _this;
        }
        Object.defineProperty(EntityType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityType.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        EntityType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EntityType.structureTypeName = "DataTypes$EntityType";
        EntityType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "properties": {
                "entity": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EntityType;
    }(DataType));
    datatypes.EntityType = EntityType;
    /**
     * In version 7.9.0: introduced
     */
    var EnumerationType = /** @class */ (function (_super) {
        __extends(EnumerationType, _super);
        function EnumerationType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            /** @internal */
            _this.__enumeration = new internal.ByNameReferenceProperty(EnumerationType, _this, "enumeration", null, "Enumerations$Enumeration");
            if (arguments.length < 4) {
                throw new Error("new EnumerationType() cannot be invoked directly, please use 'model.datatypes.createEnumerationType()'");
            }
            return _this;
        }
        Object.defineProperty(EnumerationType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "enumeration", {
            get: function () { return this.__enumeration.get(); },
            set: function (newValue) { this.__enumeration.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationType.prototype, "enumerationQualifiedName", {
            get: function () { return this.__enumeration.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "parameterType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "type", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "columnType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "parameterType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "parameterType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "type", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "variableType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "parameterType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "variableType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "variableType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        EnumerationType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, EnumerationType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumerationType, "parameterType", false);
        };
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EnumerationType.create = function (model) {
            return internal.instancehelpers.createElement(model, EnumerationType);
        };
        /** @internal */
        EnumerationType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EnumerationType.structureTypeName = "DataTypes$EnumerationType";
        EnumerationType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "properties": {
                "enumeration": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EnumerationType;
    }(DataType));
    datatypes.EnumerationType = EnumerationType;
    /**
     * In version 7.9.0: introduced
     */
    var FloatType = /** @class */ (function (_super) {
        __extends(FloatType, _super);
        function FloatType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new FloatType() cannot be invoked directly, please use 'model.datatypes.createFloatType()'");
            }
            return _this;
        }
        Object.defineProperty(FloatType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "parameterType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "type", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "columnType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "parameterType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "parameterType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "type", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "variableType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "parameterType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "variableType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "variableType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        FloatType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, FloatType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, FloatType, "parameterType", false);
        };
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FloatType.create = function (model) {
            return internal.instancehelpers.createElement(model, FloatType);
        };
        /** @internal */
        FloatType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        FloatType.structureTypeName = "DataTypes$FloatType";
        FloatType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return FloatType;
    }(DataType));
    datatypes.FloatType = FloatType;
    /**
     * In version 7.9.0: introduced
     */
    var IntegerType = /** @class */ (function (_super) {
        __extends(IntegerType, _super);
        function IntegerType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new IntegerType() cannot be invoked directly, please use 'model.datatypes.createIntegerType()'");
            }
            return _this;
        }
        Object.defineProperty(IntegerType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IntegerType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "parameterType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "type", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "columnType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "parameterType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "parameterType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "type", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "variableType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "parameterType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "variableType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "variableType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        IntegerType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, IntegerType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, IntegerType, "parameterType", false);
        };
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        IntegerType.create = function (model) {
            return internal.instancehelpers.createElement(model, IntegerType);
        };
        /** @internal */
        IntegerType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        IntegerType.structureTypeName = "DataTypes$IntegerType";
        IntegerType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return IntegerType;
    }(DataType));
    datatypes.IntegerType = IntegerType;
    /**
     * In version 7.9.0: introduced
     */
    var ListType = /** @class */ (function (_super) {
        __extends(ListType, _super);
        function ListType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ListType() cannot be invoked directly, please use 'model.datatypes.createListType()'");
            }
            return _this;
        }
        Object.defineProperty(ListType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "parameterType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "type", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "columnType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "parameterType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "parameterType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "type", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "variableType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "parameterType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "variableType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "variableType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ListType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, ListType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ListType, "parameterType", false);
        };
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListType.create = function (model) {
            return internal.instancehelpers.createElement(model, ListType);
        };
        /** @internal */
        ListType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ListType.structureTypeName = "DataTypes$ListType";
        ListType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ListType;
    }(EntityType));
    datatypes.ListType = ListType;
    /**
     * In version 7.9.0: introduced
     */
    var ObjectType = /** @class */ (function (_super) {
        __extends(ObjectType, _super);
        function ObjectType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ObjectType() cannot be invoked directly, please use 'model.datatypes.createObjectType()'");
            }
            return _this;
        }
        Object.defineProperty(ObjectType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "parameterType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "type", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "columnType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "parameterType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "parameterType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "type", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "variableType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "parameterType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "variableType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "variableType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * The new ObjectType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        ObjectType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, ObjectType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, ObjectType, "parameterType", false);
        };
        /**
         * Creates and returns a new ObjectType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ObjectType.create = function (model) {
            return internal.instancehelpers.createElement(model, ObjectType);
        };
        /** @internal */
        ObjectType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ObjectType.structureTypeName = "DataTypes$ObjectType";
        ObjectType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ObjectType;
    }(EntityType));
    datatypes.ObjectType = ObjectType;
    /**
     * In version 7.9.0: introduced
     */
    var StringType = /** @class */ (function (_super) {
        __extends(StringType, _super);
        function StringType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new StringType() cannot be invoked directly, please use 'model.datatypes.createStringType()'");
            }
            return _this;
        }
        Object.defineProperty(StringType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "parameterType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "type", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "columnType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "parameterType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "parameterType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "type", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "variableType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "parameterType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "variableType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "variableType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        StringType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, StringType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, StringType, "parameterType", false);
        };
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StringType.create = function (model) {
            return internal.instancehelpers.createElement(model, StringType);
        };
        /** @internal */
        StringType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        StringType.structureTypeName = "DataTypes$StringType";
        StringType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return StringType;
    }(DataType));
    datatypes.StringType = StringType;
    /**
     * In version 7.9.0: introduced
     */
    var UnknownType = /** @class */ (function (_super) {
        __extends(UnknownType, _super);
        function UnknownType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new UnknownType() cannot be invoked directly, please use 'model.datatypes.createUnknownType()'");
            }
            return _this;
        }
        Object.defineProperty(UnknownType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UnknownType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "parameterType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "type", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "columnType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "parameterType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "parameterType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "type", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "variableType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "parameterType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "variableType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "variableType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * The new UnknownType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        UnknownType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, UnknownType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, UnknownType, "parameterType", false);
        };
        /**
         * Creates and returns a new UnknownType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        UnknownType.create = function (model) {
            return internal.instancehelpers.createElement(model, UnknownType);
        };
        /** @internal */
        UnknownType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        UnknownType.structureTypeName = "DataTypes$UnknownType";
        UnknownType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return UnknownType;
    }(DataType));
    datatypes.UnknownType = UnknownType;
    /**
     * In version 7.9.0: introduced
     */
    var VoidType = /** @class */ (function (_super) {
        __extends(VoidType, _super);
        function VoidType(model, structureTypeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new VoidType() cannot be invoked directly, please use 'model.datatypes.createVoidType()'");
            }
            return _this;
        }
        Object.defineProperty(VoidType.prototype, "containerAsAppServiceAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsAppServiceActionParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, appservices_1.appservices.AppServiceActionParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsConstant", {
            get: function () { return _super.prototype.getContainerAs.call(this, constants_1.constants.Constant); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsDataSetColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsDataSetParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, datasets_1.datasets.DataSetParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsDocumentTemplateParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DocumentTemplateParameter); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsValueMappingElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.ValueMappingElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsCreateVariableAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.CreateVariableAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsMicroflowParameterBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsMicroflowParameterObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.MicroflowParameterObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsPublishedOperation", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedOperation); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoidType.prototype, "containerAsPublishedParameter", {
            get: function () { return _super.prototype.getContainerAs.call(this, webservices_1.webservices.PublishedParameter); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'actionReturnType' property
         * of the parent appservices.AppServiceAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInAppServiceActionUnderActionReturnType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "actionReturnType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'parameterType' property
         * of the parent appservices.AppServiceActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInAppServiceActionParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "parameterType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'type' property
         * of the parent constants.Constant element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInConstantUnderType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "type", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'columnType' property
         * of the parent datasets.DataSetColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInDataSetColumnUnderColumnType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "columnType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'parameterType' property
         * of the parent datasets.DataSetParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInDataSetParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "parameterType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'parameterType' property
         * of the parent documenttemplates.DocumentTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInDocumentTemplateParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "parameterType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'type' property
         * of the parent mappings.ValueMappingElement element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInValueMappingElementUnderType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "type", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'variableType' property
         * of the parent microflows.CreateVariableAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInCreateVariableActionUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "variableType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'microflowReturnType' property
         * of the parent microflows.MicroflowBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInMicroflowBaseUnderMicroflowReturnType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "microflowReturnType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'parameterType' property
         * of the parent microflows.MicroflowParameterBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInMicroflowParameterBaseUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "parameterType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'variableType' property
         * of the parent microflows.MicroflowParameterObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInMicroflowParameterObjectUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "variableType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'variableType' property
         * of the parent microflows.ResultHandling element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInResultHandlingUnderVariableType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "variableType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'operationReturnType' property
         * of the parent webservices.PublishedOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInPublishedOperationUnderOperationReturnType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "operationReturnType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * The new VoidType will be automatically stored in the 'parameterType' property
         * of the parent webservices.PublishedParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        VoidType.createInPublishedParameterUnderParameterType = function (container) {
            internal.createInVersionCheck(container.model, VoidType.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, VoidType, "parameterType", false);
        };
        /**
         * Creates and returns a new VoidType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        VoidType.create = function (model) {
            return internal.instancehelpers.createElement(model, VoidType);
        };
        /** @internal */
        VoidType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        VoidType.structureTypeName = "DataTypes$VoidType";
        VoidType.versionInfo = new exports.StructureVersionInfo({
            "introduced": "7.9.0",
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return VoidType;
    }(DataType));
    datatypes.VoidType = VoidType;
})(datatypes = exports.datatypes || (exports.datatypes = {}));
var appservices_1 = require("./appservices");
var constants_1 = require("./constants");
var datasets_1 = require("./datasets");
var documenttemplates_1 = require("./documenttemplates");
var mappings_1 = require("./mappings");
var microflows_1 = require("./microflows");
var webservices_1 = require("./webservices");
//# sourceMappingURL=datatypes.js.map