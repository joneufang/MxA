"use strict";
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require("./projects");
var constants;
(function (constants) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Constants`.
     */
    /**
     * See: {@link https://docs.mendix.com/refguide7/constants relevant section in reference guide}
     */
    var Constant = /** @class */ (function (_super) {
        __extends(Constant, _super);
        function Constant(model, structureTypeName, id, isPartial, container) {
            var _this = _super.call(this, model, structureTypeName, id, isPartial, container) || this;
            /** @internal */
            _this.__dataType = new internal.PrimitiveProperty(Constant, _this, "dataType", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            _this.__type = new internal.PartProperty(Constant, _this, "type", null, true);
            /** @internal */
            _this.__defaultValue = new internal.PrimitiveProperty(Constant, _this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(Constant.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constant.prototype, "dataType", {
            /**
             * The value of this property is conceptually of type dataTypes.LegacyDataType.
             *
             * In version 7.9.0: deleted
             */
            get: function () { return this.__dataType.get(); },
            set: function (newValue) { this.__dataType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constant.prototype, "type", {
            /**
             * In version 7.9.0: introduced
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constant.prototype, "defaultValue", {
            get: function () { return this.__defaultValue.get(); },
            set: function (newValue) { this.__defaultValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Constant unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        Constant.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Constant);
        };
        /** @internal */
        Constant.prototype._isByNameReferrable = function () { return true; };
        /** @internal */
        Constant.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__dataType.isAvailable) {
                this.dataType = "String";
            }
            if (this.__type.isAvailable) {
                this.type = datatypes_1.datatypes.StringType.create(this.model);
            }
        };
        Constant.structureTypeName = "Constants$Constant";
        Constant.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "dataType": {
                    "deleted": "7.9.0",
                    "deletionMessage": "Use property 'type' instead"
                },
                "type": {
                    "introduced": "7.9.0",
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return Constant;
    }(projects_1.projects.Document));
    constants.Constant = Constant;
})(constants = exports.constants || (exports.constants = {}));
var datatypes_1 = require("./datatypes");
//# sourceMappingURL=constants.js.map